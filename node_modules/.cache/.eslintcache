[{"C:\\Users\\Charu\\Desktop\\taskhive\\src\\index.js":"1","C:\\Users\\Charu\\Desktop\\taskhive\\src\\App.js":"2","C:\\Users\\Charu\\Desktop\\taskhive\\src\\reportWebVitals.js":"3","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\Home.js":"4","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\Signup.js":"5","C:\\Users\\Charu\\Desktop\\taskhive\\src\\reducer\\UseReduser.js":"6","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\WatchVideo.js":"7","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\MainNavbar.js":"8","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\Todos.js":"9","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\Messages.js":"10","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\SearchMembers.js":"11","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\Eventscalendar.js":"12","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\DisplayProjects.js":"13","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\MyNotes.js":"14","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\Notifications.js":"15","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\Profile.js":"16","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\DeleteProject.js":"17","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\DeleteMember.js":"18","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\ViewProject.js":"19","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\TodoForm.js":"20","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\Projects.js":"21","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\UpdateProject.js":"22","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\DeleteNote.js":"23","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\ProjectNotification.js":"24","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\ProjectChat.js":"25","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\UpdateNotes.js":"26","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\AssignPhases.js":"27","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\CreateNotes.js":"28"},{"size":529,"mtime":1689505396982,"results":"29","hashOfConfig":"30"},{"size":893,"mtime":1689505396962,"results":"31","hashOfConfig":"30"},{"size":375,"mtime":1689505396983,"results":"32","hashOfConfig":"30"},{"size":1446,"mtime":1689578375685,"results":"33","hashOfConfig":"30"},{"size":14426,"mtime":1689505396976,"results":"34","hashOfConfig":"30"},{"size":297,"mtime":1689505396983,"results":"35","hashOfConfig":"30"},{"size":1861,"mtime":1689505396979,"results":"36","hashOfConfig":"30"},{"size":1781,"mtime":1689505396970,"results":"37","hashOfConfig":"30"},{"size":3653,"mtime":1689505396977,"results":"38","hashOfConfig":"30"},{"size":18235,"mtime":1689505396970,"results":"39","hashOfConfig":"30"},{"size":9456,"mtime":1689505396975,"results":"40","hashOfConfig":"30"},{"size":3319,"mtime":1689505396969,"results":"41","hashOfConfig":"30"},{"size":9986,"mtime":1689505396968,"results":"42","hashOfConfig":"30"},{"size":4252,"mtime":1689505396971,"results":"43","hashOfConfig":"30"},{"size":8289,"mtime":1689505396972,"results":"44","hashOfConfig":"30"},{"size":3063,"mtime":1689505396972,"results":"45","hashOfConfig":"30"},{"size":5193,"mtime":1689505396967,"results":"46","hashOfConfig":"30"},{"size":1483,"mtime":1689505396966,"results":"47","hashOfConfig":"30"},{"size":12750,"mtime":1689505396979,"results":"48","hashOfConfig":"30"},{"size":17355,"mtime":1689506988698,"results":"49","hashOfConfig":"30"},{"size":26669,"mtime":1689505396974,"results":"50","hashOfConfig":"30"},{"size":30150,"mtime":1689505396978,"results":"51","hashOfConfig":"30"},{"size":3169,"mtime":1689505396967,"results":"52","hashOfConfig":"30"},{"size":6468,"mtime":1689505396973,"results":"53","hashOfConfig":"30"},{"size":3626,"mtime":1689505396973,"results":"54","hashOfConfig":"30"},{"size":4821,"mtime":1689505396977,"results":"55","hashOfConfig":"30"},{"size":19077,"mtime":1689505396965,"results":"56","hashOfConfig":"30"},{"size":4379,"mtime":1689505396966,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b18cas",{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},"C:\\Users\\Charu\\Desktop\\taskhive\\src\\index.js",[],[],"C:\\Users\\Charu\\Desktop\\taskhive\\src\\App.js",["167","168"],[],"import React, { createContext, useReducer, useState, useEffect } from \"react\";\r\nimport { BrowserRouter, Routes ,Route } from 'react-router-dom'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Home from \"./components/Home\"\r\n\r\nimport {initialState, reducer} from \"../src/reducer/UseReduser\"\r\nimport Signup from \"./components/Signup\";\r\n\r\n\r\nexport const UserContext = createContext();\r\n\r\nfunction App() {\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState); \r\n    \r\n\r\n    return (\r\n       \r\n        <BrowserRouter>\r\n            <UserContext.Provider value={{state, dispatch}}>  \r\n                <Routes>\r\n                    <Route exact path=\"/\" element={<Home />}/>\r\n                    <Route exact path=\"/login\" element={<Signup />}/>\r\n                </Routes>\r\n            </UserContext.Provider>\r\n        </BrowserRouter>\r\n       \r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Charu\\Desktop\\taskhive\\src\\reportWebVitals.js",[],[],"C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\Home.js",["169","170","171","172","173","174","175","176","177","178","179"],[],"import React, {useState, useEffect, useContext} from 'react'\r\nimport { useNavigate, NavLink } from 'react-router-dom'\r\nimport '../stylesheets/home.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Row, Col,Container, Fade, Button, ListGroup, Badge } from 'react-bootstrap';\r\nimport { UserContext } from '../App';\r\nimport MainNavbar from './MainNavbar';\r\nimport Signup from './Signup';\r\n\r\n\r\nconst Home = () => {\r\n\r\n    const {state, dispatch} = useContext(UserContext);   \r\n    // const [selectedProject, setSelectedProject] = useState();\r\n    \r\n  return (\r\n    <>\r\n        {state\r\n        ?\r\n        <Container  className='background ' fluid>\r\n          <MainNavbar />\r\n          <div className='bgg'>\r\n          <h3>Welcome to TaskHive</h3>\r\n          <p className='bgtext'>TaskHive is a cutting-edge task and project management website designed to streamline your workflow and boost productivity. With its intuitive interface and robust features, TaskHive empowers individuals and teams to effortlessly organize, prioritize, and track tasks, ensuring deadlines are met and projects are completed with efficiency and precision.</p>\r\n            </div>\r\n        </Container>\r\n        :\r\n        <Container className='background2 ' fluid>\r\n          <Signup/>\r\n          {/* <h1>For creating / managing teams please<NavLink to=\"/login\" >Login</NavLink></h1> */}\r\n        </Container>\r\n        }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\Signup.js",["180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195"],[],"import React, {useState, useContext, useEffect, useRef  } from 'react'\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport { GoogleLogin } from \"react-google-login\";\r\nimport '../stylesheets/login.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\n\r\nimport { UserContext } from '../App';\r\nimport WatchVideo from './WatchVideo';\r\n\r\nconst Signup = () => {\r\n\r\n    const {state, dispatch} = useContext(UserContext);\r\n    const fileInputRef = useRef();\r\n    const navigate = useNavigate();\r\n    const [showModal, setShowModal] = useState(false);\r\n    const handleClose = () => setShowModal(false);\r\n    const [showAlertForm, setShowAlertForm] = useState(false);\r\n    const handleAlertFormClose = () =>{setShowAlertForm(false);}\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const handleAlertClose = () =>{setShowAlert(false);}\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [alertTitle, setAlertTitle] = useState(\"\");\r\n    const [userName, setUserName] = useState(\"\");\r\n    const [userEmail, setUserEmail] = useState(\"\");\r\n    const [userPassword, setUserPassword] = useState(\"\");\r\n    const [userCnfrmPass, setUserCnfrmPass] = useState(\"\");\r\n    const [userImage, setUserImage] = useState();\r\n\r\n\r\n    const handleFiles = (e) =>{\r\n        let myfile = e.target.files[0]; \r\n        let fileSize = parseFloat(myfile.size / (1024 * 1024)).toFixed(2); \r\n        if(myfile.type.match('image.*') && fileSize < 2){\r\n            setUserImage(myfile);\r\n        }\r\n        else{\r\n            fileInputRef.current.value = null;\r\n            setAlertTitle(\"Alert\")\r\n            setAlertMessage(\"Please upload an image of 2 MB or less.\");\r\n            setShowAlert(true);\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n\r\n    const handleResponce = async (response) =>{\r\n        const jwtIDToken = response.credential;\r\n\r\n        try{\r\n            const res = await fetch('https://taskhive-backend-testing.onrender.com/googleSignIn', { \r\n                method: \"POST\",\r\n                headers:{\r\n                    \"Content-Type\" : \"application/json\"                \r\n                },\r\n                body: JSON.stringify({\r\n                    jwtIDToken\r\n                })\r\n            });\r\n            \r\n            const data = await res.json() \r\n            console.log(data)\r\n            if(res.status === 201 && data){\r\n                dispatch({type: \"USER\", payload: data});\r\n                navigate(\"/\");\r\n                window.location.reload();\r\n            }        \r\n            \r\n        } catch(error){\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect( () => {\r\n        /*global google*/\r\n        google.accounts.id.initialize({\r\n            client_id: \"564873804785-l5h8sv9j4kqgrsldpfgcdqarmkqqm75n.apps.googleusercontent.com\",\r\n            callback: handleResponce\r\n        });\r\n\r\n        google.accounts.id.renderButton(\r\n            document.getElementById(\"signInDiv\"),\r\n            { theme: \"outline\", size: \"large\"}\r\n        );\r\n\r\n    }, []);\r\n\r\n\r\n\r\n\r\n    const handleSinginSubmit = async (e) =>{\r\n        e.preventDefault();\r\n\r\n        if(userEmail && userPassword){\r\n            try {\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/signInUser', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({userEmail, userPassword}),\r\n                });\r\n                console.log(response.cookie);\r\n                const data = await response.json();\r\n\r\n                if(response.status === 201 && data){\r\n                    console.log(data)\r\n                    dispatch({type: \"USER\", payload: data});\r\n                    navigate(\"/\")\r\n                    window.location.reload();\r\n                }\r\n                else{\r\n                    setAlertTitle(\"Alert\")\r\n                    setAlertMessage(data.message);\r\n                    setShowAlert(true);\r\n                }\r\n                \r\n            } catch (error) {\r\n                console.log(error);\r\n                \r\n            }\r\n        }\r\n        else{\r\n            setAlertTitle(\"Alert\")\r\n            setAlertMessage(\"Please fill the form correctly\");\r\n            setShowAlert(true);\r\n        }\r\n       \r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    const handleSingupSubmit = async (e) =>{\r\n        e.preventDefault();\r\n        const form = e.currentTarget;\r\n\r\n        let nameRegEx = /^[A-Za-z\\s]*$/.test(userName);\r\n        let checkName = userName.length > 0 && userName.length < 15;\r\n        let emailRegEx = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(userEmail);\r\n        let checkPass = userPassword.length > 7;\r\n        let checkCnfrmPass = userCnfrmPass.length > 7;\r\n        let checkBothPass = userPassword === userCnfrmPass;\r\n\r\n        if(checkName && nameRegEx && emailRegEx && checkPass && checkCnfrmPass && checkBothPass && userImage){\r\n            \r\n            let formData = new FormData();\r\n            \r\n            formData.append('userName', userName);\r\n            formData.append('userEmail', userEmail);\r\n            formData.append('userPassword', userPassword);\r\n            formData.append('userCnfrmPass', userCnfrmPass);\r\n            formData.append('userImage', userImage);\r\n            \r\n            try {\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/createNewUser', {\r\n                    method: \"POST\",\r\n                    body: formData\r\n                      \r\n                });\r\n                const data = await response.json();\r\n\r\n                if(response.status === 201 && data){\r\n                    setAlertTitle(\"Alert\")\r\n                    setAlertMessage(data.message);\r\n                    setShowAlert(true);\r\n\r\n                    setUserName(\"\");\r\n                    setUserEmail(\"\");\r\n                    setUserPassword(\"\");\r\n                    setUserCnfrmPass(\"\");\r\n                    fileInputRef.current.value = null;\r\n                    form.reset();\r\n                    setShowModal(false);\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n\r\n        }\r\n        else{\r\n            setShowAlertForm(true);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Container  className='background2' fluid>\r\n                <Container className='signInCont'>\r\n                    <Row>\r\n                        <Container className='headingCont'>\r\n                            <h2>SignIn</h2> \r\n                        </Container>\r\n                    </Row>\r\n                    <Row>\r\n                        <Container className='signinFormCont'>\r\n                            <Form method='POST' onSubmit={handleSinginSubmit}>\r\n                                <Form.Group className=\"mb-3\">\r\n                                    <Form.Label>Email address</Form.Label>\r\n                                    <Form.Control type=\"email\" className='formInput' value={userEmail} onChange={(e)=>setUserEmail(e.target.value)} placeholder=\"Enter email\" />\r\n                                    <Form.Text className=\"text-muted\">\r\n                                        We'll never share your email with anyone else.\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                                <Form.Group className=\"mb-3\">\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control type=\"password\" className='formInput' value={userPassword} onChange={(e)=>setUserPassword(e.target.value)} placeholder=\"Password\" />\r\n                                </Form.Group>\r\n                                <br></br>\r\n                                <Form.Group className=\"mb-3\" >\r\n                                    <Button className='formSignInBtn' variant=\"primary\" type=\"submit\" >\r\n                                        Signin\r\n                                    </Button>\r\n                            </Form.Group> \r\n                            </Form>\r\n                        </Container>\r\n                    </Row>\r\n                    <br></br>\r\n                    <Row>\r\n                        <Container className='orCont'>\r\n                            <p className='orTxt'>OR</p>\r\n                        </Container>\r\n                    </Row>\r\n                    <br></br>\r\n                    <Row>\r\n                        <Container className='googleBtnCont'>\r\n                            <Row className=\"justify-content-md-center\">\r\n                                <Col sm lg=\"6\">\r\n                                    <h5>SignIn with Google</h5> \r\n                                    <br></br>   \r\n                                </Col>\r\n                                <Col sm lg=\"5\">\r\n                                    <div id='signInDiv'></div>\r\n                                    <br></br> \r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Row>\r\n                    <br></br>\r\n                    <Row>\r\n                        <Container className='headingCont'>\r\n                            <p className='accountTxt'>Need an account? <i className='signUpTxt' onClick={()=>setShowModal(true)}>Sign Up</i></p>\r\n                        </Container>\r\n                    </Row>\r\n                    <br></br>\r\n                    <Row>\r\n                        {/* <Container className='headingCont'>\r\n                            <p className='accountTxt'>See how it works <WatchVideo/></p>\r\n                        </Container> */}\r\n                    </Row>\r\n                </Container>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                {/* Signup Modal */}\r\n\r\n\r\n                <Modal show={showModal} onHide={handleClose}>\r\n                    <Modal.Header closeButton className='modalHeader'>\r\n                        <Modal.Title>Signup</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body className='modalBody'>\r\n                        <Form method='POST' onSubmit={handleSingupSubmit}>\r\n                            <Form.Group className=\"mb-3\" >\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control type=\"text\" className='formInput' value={userName} onChange={(e)=>setUserName(e.target.value)}  placeholder=\"Enter your full name\" />\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mb-3\" >\r\n                                <Form.Label>Email</Form.Label>\r\n                                <Form.Control type=\"email\" className='formInput' value={userEmail} onChange={(e)=>setUserEmail(e.target.value)} placeholder=\"Enter email\" />\r\n                                <Form.Text className=\"text-muted\">\r\n                                    We'll never share your email with anyone else.\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Label>Profile image</Form.Label>\r\n                                <Form.Control type=\"file\" name='profileImage' className='formInput' id='profileImage' ref={fileInputRef} onChange={handleFiles}/>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mb-3\" >\r\n                                <Form.Label>Password</Form.Label>\r\n                                <Form.Control type=\"password\" className='formInput' value={userPassword} onChange={(e)=>setUserPassword(e.target.value)} placeholder=\"Password\" />\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mb-3\" >\r\n                                <Form.Label>Confirm Password</Form.Label>\r\n                                <Form.Control type=\"password\" className='formInput' value={userCnfrmPass} onChange={(e)=>setUserCnfrmPass(e.target.value)} placeholder=\"Confirm Password\" />\r\n                            </Form.Group>\r\n                                <br></br>\r\n                            <Form.Group className=\"mb-3\" >\r\n                                <Button className='formSignInBtn' variant=\"primary\" type=\"submit\" >\r\n                                    Signup\r\n                                </Button>\r\n                            </Form.Group> \r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Container>\r\n\r\n\r\n\r\n\r\n\r\n             {/* Alert Form Modal */}\r\n\r\n             <Modal size=\"sm\" show={showAlertForm} onHide={handleAlertFormClose} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">Insturctions</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>Please fill the form correctly.</p>\r\n                <p>Name must be less then 15 characters.</p>\r\n                <p>Image size should be less then 2 MB.</p>\r\n                <p>Password should be atleast 8 characters.</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn' onClick={handleAlertFormClose}>Ok</Button> \r\n            </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n\r\n\r\n\r\n            {/* Alert Modal */}\r\n\r\n            <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>{alertMessage}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \r\n            </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Signup\r\n","C:\\Users\\Charu\\Desktop\\taskhive\\src\\reducer\\UseReduser.js",[],[],"C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\WatchVideo.js",["196","197","198","199","200","201","202","203","204","205","206","207"],[],"import React, {useState, useEffect} from 'react'\r\nimport \"../stylesheets/projects.css\"\r\nimport {Container, Ratio, Button, Row, Col, Badge, FloatingLabel, Popover, Dropdown, ButtonGroup, DropdownButton, OverlayTrigger, FormControl, Modal, ListGroup, InputGroup } from 'react-bootstrap';\r\n\r\n\r\nconst WatchVideo = () => {\r\n\r\n    const [lgShow, setLgShow] = useState(false);\r\n\r\n\r\n  return (\r\n    <>\r\n        <i className='signUpTxt' onClick={()=>setLgShow(true)}>Click here</i>\r\n\r\n        <Modal size=\"lg\" show={lgShow} onHide={() => setLgShow(false)} aria-labelledby=\"example-modal-sizes-title-lg\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-lg\">Project Board Video</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>\r\n                <Container className='videoCont'>\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <Col lg={9}>\r\n                            <Ratio aspectRatio=\"16x9\">\r\n                                <iframe \r\n                                    width=\"560\" \r\n                                    height=\"315\" \r\n                                    src=\"https://www.youtube.com/embed/a5UKTs4ePe4\" \r\n                                    title=\"YouTube video player\" \r\n                                    frameborder=\"0\" \r\n                                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" \r\n                                    allowfullscreen>\r\n                                </iframe>\r\n                            </Ratio>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </Modal.Body>\r\n        </Modal>\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default WatchVideo","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\MainNavbar.js",["208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223"],[],"import React, {useState, useLayoutEffect, useEffect} from 'react'\r\nimport '../stylesheets/navbar.css'\r\nimport { Row, Col,Container, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\nimport Todos from \"./Todos\";\r\nimport SearchMembers from './SearchMembers';\r\nimport Messages from './Messages';\r\nimport { UserContext } from '../App'\r\nimport DisplayProjects from './DisplayProjects';\r\nimport Eventscalendar from './Eventscalendar';\r\nimport MyNotes from './MyNotes';\r\nimport Profile from './Profile';\r\nimport Notifications from './Notifications';\r\n\r\nconst MainNavbar = () => {\r\n\r\n    return (\r\n  \r\n      <Navbar expand=\"md\" fixed=\"top\"  className='navbarMain'>\r\n        <Container>\r\n          <Navbar.Brand className='title' href=\"#home\">TaskHive</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" className='toggleBtn1'/>\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"me-auto navItems\">\r\n              <Nav.Link href=\"#todos\" className='navLinks'><Todos/></Nav.Link>\r\n              <Nav.Link href=\"#todos\" className='navLinks'><MyNotes/></Nav.Link>\r\n              <Nav.Link href=\"#projects\" className='navLinks'><DisplayProjects/></Nav.Link>\r\n              {/* <Nav.Link href=\"#messages\" className='navLinks'><Messages/></Nav.Link> */}\r\n              <Nav.Link href=\"#calendar\" className='navLinks'><Eventscalendar/></Nav.Link>\r\n              <Nav.Link href=\"#searchMembers\" className='navLinks'><Notifications/></Nav.Link>         \r\n              <Nav.Link href=\"#searchMembers\" className='navLinks'><Profile/></Nav.Link>         \r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n\r\n    )\r\n}\r\n\r\nexport default MainNavbar\r\n","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\Todos.js",["224","225","226","227","228","229","230"],[],"import React, { useState, useEffect, useContext, useRef } from 'react';\r\nimport { useNavigate, NavLink } from 'react-router-dom'\r\nimport { Row, Col, Container, Fade, Button, ListGroup, Badge } from 'react-bootstrap';\r\nimport Offcanvas from 'react-bootstrap/Offcanvas';\r\nimport '../stylesheets/todos.css'\r\nimport TodoForm from './TodoForm';\r\nimport { UserContext } from '../App'\r\n\r\nconst SideNavbar = () => {\r\n\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const [fecthTasks, setFecthTasks] = useState();\r\n  const [tasks, setTasks] = useState([]);\r\n  const [taskUpdate, setTaskUpdate] = useState();\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    setTaskUpdate(null);\r\n  }\r\n  const handleShow = () => setShow(true);\r\n\r\n\r\n\r\n\r\n  const showTasks = async () => {\r\n    try {\r\n      const userProfile = JSON.parse(localStorage.getItem('User'));\r\n      const tok = userProfile.tok;\r\n      const response = await fetch('https://taskhive-backend-testing.onrender.com/showTasks', {\r\n        method: 'GET',\r\n        headers: {\r\n          Authorization: `Bearer ${tok}`,\r\n        },\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log(data)\r\n      setTasks(data);\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    showTasks();\r\n  }, [fecthTasks])\r\n\r\n\r\n  const handleClick = (e) => {\r\n\r\n    const taskId = e.target.id;\r\n\r\n    const findTask = tasks.find(clickedTask => clickedTask._id === taskId);\r\n\r\n    let oldDate = new Date(findTask.date)\r\n    let day = oldDate.getDate();\r\n    let month = oldDate.getMonth() + 1;\r\n    let year = oldDate.getFullYear();\r\n\r\n    if (month < 10) month = \"0\" + month;\r\n    if (day < 10) day = \"0\" + day;\r\n\r\n    let fullDate = year + \"-\" + month + \"-\" + day;\r\n\r\n    findTask.date = fullDate;\r\n\r\n    setTaskUpdate(findTask)\r\n    // taskUpdate = findTask;\r\n    // taskUpdate.current = findTask;\r\n    // navigate(\"/updateForm\", {state : {findTask}})\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ListGroup.Item className='navList' onClick={handleShow}>\r\n        <i className='fas fa-tasks'>&nbsp;</i>\r\n        {' '}\r\n        To-Do List\r\n      </ListGroup.Item>\r\n\r\n      <Offcanvas show={show} onHide={handleClose} >\r\n        <Offcanvas.Header closeButton className='todoOffCanvas'>\r\n          <Offcanvas.Title>To-Do-List</Offcanvas.Title>\r\n        </Offcanvas.Header>\r\n        <Offcanvas.Body className='todoOffCanvas'>\r\n          <TodoForm clickedTask={{ taskUpdate, setFecthTasks }} />\r\n          <Container className='todosContainer'>\r\n            <Row>\r\n              <Col>\r\n                <ListGroup as=\"ol\" variant=\"flush\" numbered className='todosList'>\r\n                  {tasks.map((tasks, index) =>\r\n                    <ListGroup.Item as=\"li\" key={index} className=\"d-flex justify-content-between align-items-start todosList\">\r\n                      <div id='category' className=\"ms-2 me-auto\">\r\n                        <div id={tasks._id} onClick={handleClick} className=\"fw-bold cursor-pointer\">\r\n                          {tasks.task}\r\n                        </div>\r\n\r\n                        {tasks.category}\r\n                      </div>\r\n                      <Badge id='date' bg=\"primary\" pill className='badgeList'>\r\n                        {'Due Date: '}{new Date(tasks.date).toLocaleDateString()}\r\n                      </Badge>\r\n                    </ListGroup.Item>\r\n                  )}\r\n                </ListGroup>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n\r\n\r\n\r\n        </Offcanvas.Body>\r\n      </Offcanvas>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SideNavbar\r\n\r\n\r\n\r\n","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\Messages.js",["231","232","233","234","235","236","237","238","239","240","241"],[],"import React, {useState, useEffect, useContext} from 'react'\r\nimport { useNavigate, NavLink } from 'react-router-dom'\r\nimport '../stylesheets/messages.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Row, Col,Container, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\nimport image_S1 from '../images/abstract10.png'\r\nimport image_S2 from '../images/abstract1.png'\r\nimport { UserContext } from '../App'\r\nimport io from \"socket.io-client\";\r\nimport DeleteMember from './DeleteMember';\r\n\r\nconst ENDPOINT = \"https://taskhive-hb9j.onrender.com\"\r\nvar socket, currentChat;\r\n\r\nconst Messages = () => {\r\n\r\n    const {state, dispatch} = useContext(UserContext);\r\n    const [smShow, setSmShow] = useState(false);\r\n    const [smShowGroup, setSmShowGroup] = useState(false);\r\n    const [fullscreen, setFullscreen] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const handleShow = () => {setFullscreen(true); setShow(true);}\r\n    const [lgShow, setLgShow] = useState(false);\r\n    const [lgShowGroup, setLgGroupShow] = useState(false);\r\n    const [groupChats, setGroupChats] = useState([]);\r\n    const [allfriends, setAllfriends] = useState([]);\r\n    const [selectedId, setSelectedId] = useState(\"\");\r\n    const [txtInput, setTxtInput] = useState(\"\");\r\n    const [allMessages, setAllMessages] = useState([]);\r\n    const [userConnection, setUserConnection] = useState(false);\r\n    const [selectedChatId, setSelectedChatId] = useState(\"\");\r\n    const [senderchatId, setSenderChatId] = useState(\"\");\r\n    const [notification, setNotification] = useState([]);\r\n    const userProfile = JSON.parse(localStorage.getItem(\"User\")); \r\n\r\n    const handleHideSelectionModal = () =>{\r\n        setSmShow(false);\r\n    }\r\n\r\n    const handleHideSelectionModalGroup = () =>{\r\n        setSmShowGroup(false);\r\n    }\r\n\r\n\r\n    const getAllChats = async () =>{\r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/allGroupChats', {\r\n                method: 'GET',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                  },\r\n            })\r\n\r\n            const data = await response.json();\r\n            console.log(data)\r\n            setGroupChats(data);\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n    \r\n    \r\n\r\n    const getFriends = async () =>{\r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/getFriends', {\r\n                method: 'GET',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                  },\r\n            })\r\n\r\n            const data = await response.json();\r\n            console.log(data)\r\n            setAllfriends(data);\r\n            // console.log(senderProfiles)\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getFriends();\r\n        getAllChats();\r\n        socket = io(ENDPOINT);\r\n        socket.emit(\"setUser\", userProfile);\r\n        socket.on(\"User Connected\", () => setUserConnection(true));\r\n    },[])\r\n\r\n\r\n    const handleRefreshCompnent = () =>{\r\n        getFriends();\r\n        getAllChats();\r\n    }\r\n\r\n\r\n\r\n    const handleGroupClick = async (e) =>{\r\n        // console.log(e.target.id)\r\n        setSelectedId(e.target.id)\r\n        let selectedId = e.target.id;\r\n        // console.log(e.target.id)\r\n        setSmShowGroup(true);\r\n\r\n        try { \r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/getAllGroupMsgs', {  \r\n                method: 'POST',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                    'Content-Type' : 'application/json' \r\n                },\r\n                body: JSON.stringify({selectedId}),\r\n            });\r\n\r\n            const data = await response.json();\r\n            let getMessages = data.getAllMessages;\r\n            let getChat = data.chatExist;\r\n            setSelectedChatId(getChat._id);\r\n            setAllMessages(getMessages);\r\n\r\n            socket.emit(\"joinSelectedChat\", getChat._id);\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }  \r\n        \r\n    }\r\n\r\n\r\n\r\n    const handleClick = async (e) =>{\r\n        // console.log(e.target.id)\r\n        setSelectedId(e.target.id)\r\n        let selectedId = e.target.id;\r\n        // console.log(e.target.id)\r\n        setSmShow(true);\r\n\r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/getAllMsgs', {  \r\n                method: 'POST',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                    'Content-Type' : 'application/json' \r\n                },\r\n                body: JSON.stringify({selectedId}),\r\n            });\r\n\r\n            const data = await response.json();\r\n            let getMessages = data.getAllMessages;\r\n            let getChat = data.chatExist;\r\n            setSelectedChatId(getChat._id);\r\n            setAllMessages(getMessages);\r\n\r\n            socket.emit(\"joinSelectedChat\", getChat._id);\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }  \r\n        \r\n    }\r\n\r\n\r\n\r\n    // const handelChange = (e) =>{setTxtInput(e.target.value)}\r\n\r\n    const handleKeyDown = async (e) =>{\r\n        if(e.keyCode === 13 && selectedId){\r\n            try {\r\n                const userProfile = JSON.parse(localStorage.getItem('User'));\r\n                const tok = userProfile.tok;\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/sendingMsg', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        Authorization: `Bearer ${tok}`,\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({selectedId, txtInput}),\r\n                    // body: searchInput\r\n                })\r\n                \r\n                let data = await response.json();\r\n               \r\n                setSenderChatId(data.newMessage.ChatId)\r\n                socket.emit(\"sendingMessage\", data)\r\n    \r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    const handleSendBtn = async () =>{\r\n\r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/sendingMsg', {\r\n                method: 'POST',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                    'Content-Type' : 'application/json' \r\n                },\r\n                body: JSON.stringify({selectedId, txtInput}),\r\n                // body: searchInput\r\n            })\r\n            \r\n            let data = await response.json();\r\n           \r\n            setSenderChatId(data.newMessage.ChatId)\r\n            socket.emit(\"sendingMessage\", data)\r\n            setTxtInput(\"\");\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n\r\n    const handleKeyDownGroup = async (e) =>{\r\n        if(e.keyCode === 13 && selectedId){\r\n            try {\r\n                const userProfile = JSON.parse(localStorage.getItem('User'));\r\n                const tok = userProfile.tok;\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/sendingGroupMsg', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        Authorization: `Bearer ${tok}`,\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({selectedId, txtInput}),\r\n                    // body: searchInput\r\n                })\r\n                \r\n                let data = await response.json();\r\n               \r\n                setSenderChatId(data.newMessage.ChatId)\r\n                socket.emit(\"sendingMessage\", data)\r\n    \r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    const handleSendGroupBtn = async () =>{\r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/sendingGroupMsg', {\r\n                method: 'POST',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                    'Content-Type' : 'application/json' \r\n                },\r\n                body: JSON.stringify({selectedId, txtInput}),\r\n                // body: searchInput\r\n            })\r\n            \r\n            let data = await response.json();\r\n           \r\n            setSenderChatId(data.newMessage.ChatId)\r\n            socket.emit(\"sendingMessage\", data)\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n \r\n\r\n\r\n    useEffect(() => {\r\n        currentChat = selectedChatId\r\n\r\n    }, [selectedChatId])\r\n\r\n    useEffect(() => {\r\n        socket.on(\"messageRecieved\", (newMessage) =>{\r\n            console.log(newMessage)    \r\n            if(!currentChat || currentChat !== newMessage.ChatId){\r\n                console.log(newMessage)\r\n                setNotification(notification => [newMessage, ...notification]);\r\n                socket.off(\"messageRecieved\");\r\n                console.log(notification)\r\n            } \r\n            else{  \r\n            setAllMessages(allMessages => [...allMessages, newMessage]);\r\n            socket.off(\"messageRecieved\");\r\n            }\r\n        });\r\n        console.log(allMessages)\r\n        \r\n    },[])\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n          \r\n        <ListGroup.Item className='navList' onClick={handleShow}>\r\n            <i className='far fa-comments'>&nbsp;</i>         \r\n            {' '}\r\n            Chat Box \r\n        </ListGroup.Item>\r\n       \r\n     \r\n        <Modal show={show} fullscreen={fullscreen} onHide={() => setShow(false)}>\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title>Chat Box</Modal.Title>\r\n                <Button className='refreshBtn' onClick={handleRefreshCompnent}><i className=\"material-icons refreshIcon\">refresh</i></Button>\r\n            </Modal.Header>\r\n        <Modal.Body className='modalBody'>\r\n            <Container>\r\n                <Row className=\"justify-content-md-center\">\r\n                    {allfriends.map( (allfriends, index) =>\r\n                        <Col sm lg=\"3\" key={index}>\r\n                            <ListGroup.Item as=\"li\"  id={allfriends._id} onClick={handleClick} className=\"profileMessages\">\r\n                                <img \r\n                                    src={allfriends.image}\r\n                                    id={allfriends._id}\r\n                                    onClick={handleClick}\r\n                                    onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\r\n                                    className=\"profileImages\"\r\n                                />\r\n                                <br></br>\r\n                                <b>{allfriends.name}</b>\r\n                            </ListGroup.Item>\r\n                            <br></br>\r\n                        </Col>\r\n                    )}\r\n                    {groupChats.map( (element, index) =>\r\n                        <Col sm lg=\"3\" key={index}>\r\n                            <ListGroup.Item as=\"li\"  id={element._id} onClick={handleGroupClick} className=\"profileMessages\">\r\n                                <img \r\n                                    src={image_S2}\r\n                                    id={element._id}\r\n                                    onClick={handleGroupClick}\r\n                                    onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\r\n                                    className=\"profileImages\"\r\n                                />\r\n                                <br></br>\r\n                                <b>{element.groupName}</b>\r\n                            </ListGroup.Item>\r\n                            <br></br>\r\n                        </Col>\r\n                    )}\r\n                </Row>  \r\n            </Container>     \r\n        </Modal.Body>\r\n      </Modal>\r\n\r\n\r\n\r\n\r\n      <Modal size=\"sm\" show={smShow} onHide={handleHideSelectionModal} aria-labelledby=\"example-modal-sizes-title-sm\" >\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\" className='titleSelection'>\r\n                    Choose For Selected Member\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>\r\n\r\n                <ListGroup.Item className='selectedListItem' onClick={() => setLgShow(true)}>\r\n                    <i className='far fa-comments'></i>         \r\n                    <br></br>\r\n                    Start Chat\r\n                </ListGroup.Item>\r\n\r\n                <br></br>\r\n\r\n                <DeleteMember/>\r\n\r\n            </Modal.Body>\r\n        </Modal>\r\n\r\n\r\n\r\n      <Modal size=\"lg\" show={lgShow} onHide={() => setLgShow(false)} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-lg\">\r\n        <Modal.Header closeButton className='modalHeader'>\r\n          <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n            Chat\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className='modalBodyMsg'>\r\n            {selectedId ?\r\n                <Container>  \r\n                    <ListGroup>                 \r\n                    {allMessages.map( (allMessages, index) =>                              \r\n                        <ListGroup.Item className={allMessages.sender === state.id ? \"myMsgs\" : \"otherMsgs\"} key={index}>\r\n                            <p className='msgtxt'> {allMessages.message}</p> \r\n                        </ListGroup.Item>                        \r\n                    )}\r\n                    </ListGroup>\r\n                </Container>\r\n            :\r\n                <Container></Container>\r\n            }\r\n        </Modal.Body>\r\n        <Modal.Footer className='modalFooter'>\r\n            {selectedId ?\r\n                <Container>        \r\n                    <InputGroup className=\"mb-3\">\r\n                        <Form.Control placeholder=\"Message\" className='formInput' value={txtInput} onChange={(e) => setTxtInput(e.target.value)} onKeyDown={handleKeyDown} />\r\n                        <Button variant=\"outline-secondary\" className='searchBtn' id=\"button-addon2\" onClick={handleSendBtn}>\r\n                            <i className=\"fa fa-paper-plane\"></i>\r\n                        </Button>\r\n                    </InputGroup>\r\n                </Container>\r\n            :\r\n                <Container></Container>\r\n            }\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      <Modal size=\"sm\" show={smShowGroup} onHide={handleHideSelectionModalGroup} aria-labelledby=\"example-modal-sizes-title-sm\" >\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\" className='titleSelection'>\r\n                    Choose For Selected Group\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>\r\n\r\n                <ListGroup.Item className='selectedListItem' onClick={() => setLgGroupShow(true)}>\r\n                    <i className='far fa-comments'></i>         \r\n                    <br></br>\r\n                    Start Chat\r\n                </ListGroup.Item>\r\n\r\n                <br></br>\r\n\r\n                <DeleteMember/>\r\n\r\n            </Modal.Body>\r\n        </Modal>\r\n\r\n            {/* group chat */}\r\n\r\n      <Modal size=\"lg\" show={lgShowGroup} onHide={() => setLgGroupShow(false)} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-lg\">\r\n        <Modal.Header closeButton className='modalHeader'>\r\n          <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n            Chat\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className='modalBodyMsg'>\r\n            {selectedId ?\r\n                <Container>  \r\n                    <ListGroup>                 \r\n                    {allMessages.map( (allMessages, index) =>                              \r\n                        <ListGroup.Item className={allMessages.sender === state.id ? \"myMsgs\" : \"otherMsgs\"} key={index}>\r\n                            <p className='msgtxt'> {allMessages.message}</p> \r\n                        </ListGroup.Item>                        \r\n                    )}\r\n                    </ListGroup>\r\n                </Container>\r\n            :\r\n                <Container></Container>\r\n            }\r\n        </Modal.Body>\r\n        <Modal.Footer className='modalFooter'>\r\n            {selectedId ?\r\n                <Container>        \r\n                    <InputGroup className=\"mb-3\">\r\n                        <Form.Control placeholder=\"Message\" className='formInput' value={txtInput} onChange={(e) => setTxtInput(e.target.value)} onKeyDown={handleKeyDownGroup} />\r\n                        <Button variant=\"outline-secondary\" className='searchBtn' id=\"button-addon2\" onClick={handleSendGroupBtn}>\r\n                            <i className=\"fa fa-paper-plane\"></i>\r\n                        </Button>\r\n                    </InputGroup>\r\n                </Container>\r\n            :\r\n                <Container></Container>\r\n            }\r\n        </Modal.Footer>\r\n      </Modal>\r\n    \r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Messages","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\SearchMembers.js",["242","243","244","245","246","247","248","249"],[],"import React, {useState, useEffect, useContext} from 'react'\r\nimport { NavLink, useNavigate } from 'react-router-dom'\r\nimport '../stylesheets/searchMembers.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Row, Col, Container, InputGroup, Button, Modal, FormControl, ListGroup, Badge } from 'react-bootstrap';\r\nimport image_S1 from '../images/abstract10.png'\r\nimport { UserContext } from '../App'\r\n\r\nconst SearchMembers = ({props}) => {\r\n    const {state, dispatch} = useContext(UserContext);  \r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const handleAlertClose = () =>{setShowAlert(false);}\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [alertTitle, setAlertTitle] = useState(\"\");\r\n    const [show, setShow] = useState(false);\r\n    const [searchInput, setSearchInput] = useState('');\r\n    const [searchResult, setSearchResult] = useState([]);\r\n    const [allfriends, setAllfriends] = useState([]);\r\n\r\n    \r\n    \r\n    const getFriends = async () =>{\r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/getFriends', {\r\n                method: 'GET',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                  },\r\n            })\r\n\r\n            const data = await response.json();\r\n            console.log(data)\r\n            setAllfriends(data);\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getFriends();\r\n    },[])\r\n\r\n\r\n    const handelChange = (e) =>{\r\n        setSearchInput(e.target.value)\r\n        // console.log(e.target.value)\r\n    }\r\n\r\n    const handleKeyDown = async (e) =>{\r\n        \r\n\r\n        if(e.keyCode === 13 && searchInput){\r\n\r\n            try {\r\n                const userProfile = JSON.parse(localStorage.getItem('User'));\r\n                const tok = userProfile.tok;\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/searchBar', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        Authorization: `Bearer ${tok}`,\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({searchInput}),\r\n                })\r\n                \r\n                let data = await response.json();\r\n                if(response.status === 201 && data.length > 0){\r\n                    setSearchResult(data);\r\n                } \r\n                else{\r\n                    setAlertTitle(\"Alert\");\r\n                    setAlertMessage(\"No matches found.\");\r\n                    setShowAlert(true);\r\n                }             \r\n                \r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    const handleSearchBtn = async () =>{\r\n        \r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/searchBar', {\r\n                method: 'POST',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                    'Content-Type' : 'application/json' \r\n                },\r\n                body: JSON.stringify({searchInput}),\r\n            })\r\n            \r\n            let data = await response.json();\r\n            if(response.status === 201 && data.length > 0){\r\n                setSearchResult(data);\r\n            } \r\n            else{\r\n                setAlertTitle(\"Alert\");\r\n                setAlertMessage(\"No matches found.\");\r\n                setShowAlert(true);\r\n            } \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    const compareIds = () =>{\r\n        let selfBtn = document.getElementById(state.id)\r\n        \r\n        if(selfBtn){\r\n            selfBtn.textContent = 'Own Profile';\r\n            selfBtn.disabled = true;\r\n        }\r\n\r\n        allfriends.map((element)=>{\r\n            let friendBtn = document.getElementById(element._id)\r\n            if(friendBtn){\r\n                friendBtn.textContent = 'Member Exist';\r\n                friendBtn.disabled = true;\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(()=>{\r\n        compareIds();\r\n    },[searchResult])\r\n   \r\n\r\n    const handleRequestBtn = async (e) =>{\r\n        let personId = e.target.id;        \r\n       \r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/sendingRequest', {\r\n                method: 'POST',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                    'Content-Type' : 'application/json' \r\n                }, \r\n                body: JSON.stringify({personId}),\r\n                // body: searchInput\r\n            })\r\n            \r\n    \r\n            let data = await response.json();\r\n    \r\n            if(response.status === 201 && data){\r\n                setAlertTitle(\"Alert\");\r\n                setAlertMessage(data.message);\r\n                setShowAlert(true); \r\n                props.setFetchData(data);\r\n                setShow(false);\r\n                setSearchInput(\"\");\r\n                setSearchResult([]);\r\n            }\r\n            else{\r\n                setAlertTitle(\"Alert\");\r\n                setAlertMessage(data.message);\r\n                setShowAlert(true); \r\n            }\r\n            \r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    const handleCoseModal = () =>{\r\n        setShow(false);\r\n        setSearchInput(\"\");\r\n        setSearchResult([]);\r\n    }\r\n \r\n  return (\r\n    <>\r\n\r\n        <ListGroup.Item className='newProjectBtn' onClick={() => setShow(true)}>    \r\n            <i className='fa fa-search'></i>\r\n            {' '}\r\n            Find Members      \r\n        </ListGroup.Item>\r\n\r\n        <Modal show={show} onHide={handleCoseModal}>\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title>Find Members</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>\r\n                <Row>    \r\n                    <Col>\r\n                        <InputGroup className=\"mb-3\">\r\n                        <FormControl\r\n                            placeholder=\"Find Members\"\r\n                            type=\"text\"\r\n                            aria-label=\"Recipient's username\"\r\n                            aria-describedby=\"basic-addon2\"\r\n                            value={searchInput}\r\n                            className='formInput'\r\n                            onChange={handelChange}\r\n                            onKeyDown={handleKeyDown}\r\n                        />\r\n                        <Button variant=\"outline-secondary\" className='searchBtn' id=\"button-addon2\" onClick={handleSearchBtn}>\r\n                            <i className=\"fa fa-search searchIcon\"></i>\r\n                        </Button>\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                <Col>\r\n                  <ListGroup as=\"ol\" variant=\"flush\" >\r\n                    {searchResult.map( (searchResult, index) =>\r\n                      <ListGroup.Item as=\"li\" key={index}  className=\"d-flex justify-content-between align-items-start memberLists\">\r\n                        <Row>\r\n                            <Col>\r\n                                <img src={searchResult.image}\r\n                                    onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\r\n                                    className=\"profileImages\"\r\n                                />\r\n                                <h5>{searchResult.name}</h5>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <Button id={searchResult._id} className='sendRequestBtn'  bg=\"primary\" onClick={handleRequestBtn}>\r\n                                    Send Request\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    )}\r\n                  </ListGroup>\r\n                </Col>\r\n              </Row>\r\n            </Modal.Body>\r\n        </Modal>\r\n            \r\n\r\n\r\n\r\n\r\n            {/* Alert Modal */}\r\n\r\n            <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>{alertMessage}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \r\n            </Modal.Footer>\r\n            </Modal>\r\n        \r\n           \r\n        \r\n    </>\r\n  )\r\n}\r\n\r\nexport default SearchMembers","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\Eventscalendar.js",["250","251","252","253","254","255","256","257","258","259","260","261","262"],[],"import React, {useState, useLayoutEffect, useEffect} from 'react'\r\nimport '../stylesheets/eventsCalendar.css'\r\nimport { Row, Col,Container, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\n\r\n\r\n\r\nconst Eventscalendar = () => {\r\n    const [fullscreen, setFullscreen] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const handleShow = () => {setFullscreen(true); setShow(true);}\r\n    const [tasks, setTasks] = useState([]);\r\n    const [projects, setProjects] = useState([]);\r\n    const [allEvents, setAllEvents] = useState([]);\r\n    \r\n\r\n    const showTasks = async () =>{\r\n        try {\r\n          const userProfile = JSON.parse(localStorage.getItem('User'));\r\n          const tok = userProfile.tok;\r\n          const response = await fetch('https://taskhive-backend-testing.onrender.com/showTasks', {\r\n            method: 'GET',\r\n            headers: {\r\n              Authorization: `Bearer ${tok}`,\r\n            },\r\n        });\r\n  \r\n        const data = await response.json();\r\n        // console.log(data)\r\n        setTasks(data);\r\n\r\n        } catch (error) {\r\n          console.log(error)\r\n        }\r\n      \r\n  }\r\n\r\n\r\n  const showProjects = async () =>{\r\n    try {\r\n      const userProfile = JSON.parse(localStorage.getItem('User'));\r\n      const tok = userProfile.tok;\r\n      const response = await fetch('https://taskhive-backend-testing.onrender.com/getProjects', {\r\n        method: 'GET',\r\n        headers: {\r\n          Authorization: `Bearer ${tok}`,\r\n        },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    setProjects(data)\r\n\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  \r\n}\r\n\r\n  useEffect(() =>{\r\n      showTasks();\r\n      showProjects();\r\n  },[])\r\n\r\n\r\n  const createEvents = () =>{\r\n    let events = [];\r\n\r\n    for(let items of tasks){\r\n        events.push({\r\n            title: items.task,\r\n            date: items.date.substring(0,10)\r\n        })\r\n  \r\n    }\r\n\r\n    for(let items of projects){\r\n        events.push({\r\n            title: items.projectTitle,\r\n            date: items.dueDate.substring(0,10)\r\n        })\r\n    }\r\n\r\n    console.log(events)\r\n    setAllEvents(events)\r\n\r\n  }\r\n\r\n\r\n  useEffect(() =>{\r\n    createEvents();\r\n},[tasks, projects])\r\n\r\n  return (\r\n    <>\r\n      <ListGroup.Item className='navList' onClick={handleShow}>\r\n        <i className='fa fa-calendar'>&nbsp;</i>         \r\n        {' '}\r\n        Calendar View\r\n      </ListGroup.Item>\r\n      <Modal show={show} fullscreen={fullscreen} onHide={() => setShow(false)}>\r\n        <Modal.Header closeButton className='modalHeader'>\r\n          <Modal.Title>Due Projects & Tasks</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className='modalBody'>\r\n\r\n        <FullCalendar\r\n        plugins={[ dayGridPlugin, timeGridPlugin ]}\r\n        initialView=\"dayGridMonth\"\r\n        // events={[\r\n        //     { title: 'event 1', date: '2022-10-13' },\r\n        //     { title: 'event 2', date: '2022-10-13' }\r\n        //   ]}\r\n        events={allEvents}\r\n        />\r\n        \r\n        </Modal.Body>\r\n      </Modal>\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default Eventscalendar","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\DisplayProjects.js",["263","264","265","266","267","268","269","270","271","272","273","274"],[],"import React, {useState, useLayoutEffect, useEffect} from 'react'\r\nimport '../stylesheets/displayProjects.css'\r\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\nimport ViewProject from './ViewProject';\r\nimport UpdateProject from './UpdateProject';\r\nimport DeleteProject from './DeleteProject';\r\nimport Projects from './Projects';\r\nimport AssignPhases from './AssignPhases';\r\nimport ProjectNotification from './ProjectNotification';\r\nimport ProjectChat from './ProjectChat';\r\n\r\n\r\nconst DisplayProjects = (props) => {\r\n\r\n    const [fullscreen, setFullscreen] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const handleShow = () => {setFullscreen(true); setShow(true);}\r\n    const [smShow, setSmShow] = useState(false);\r\n    const [smShowAssign, setSmShowAssign] = useState(false);\r\n    const [allfriends, setAllfriends] = useState([]);\r\n    const [projects, setProjects] = useState([]);\r\n    const [assignedProjects, setAssignedProjects] = useState([]);\r\n    // const [projectId, setProjectId] = useState();\r\n    const [currentProject, setCurrentProject] = useState();\r\n    const [currentAssignedProject, setCurrentAssignedProject] = useState();\r\n    const [fecthTasks, setFecthTasks] = useState();\r\n    const [fecthAfterDelete, setFecthAfterDelete] = useState();\r\n\r\n    const handleHideModal = () =>{\r\n        setShow(false);\r\n    }\r\n\r\n    const handleHideSelectionModal = () =>{\r\n        setCurrentProject(\"\")\r\n        setSmShow(false)\r\n    }\r\n\r\n    const handleHideAssignModal = () =>{\r\n        setCurrentAssignedProject(\"\")\r\n        setSmShowAssign(false)\r\n    }\r\n\r\n    const getFriends = async () =>{\r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/getFriends', {\r\n                method: 'GET',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                  },\r\n            })\r\n\r\n            const data = await response.json();\r\n            console.log(data)\r\n            setAllfriends(data);\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const showAssignedProjects = async () =>{\r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n          const response = await fetch('https://taskhive-backend-testing.onrender.com/getAssignedProjects', {\r\n            method: 'GET',\r\n            headers: {\r\n                Authorization: `Bearer ${tok}`,\r\n              },\r\n        });\r\n    \r\n        const data = await response.json();\r\n        console.log(data)\r\n        setAssignedProjects(data)\r\n    \r\n        } catch (error) {\r\n          console.log(error)\r\n        }\r\n      \r\n    }\r\n\r\n\r\n\r\n    const showProjects = async () =>{\r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n          const response = await fetch('https://taskhive-backend-testing.onrender.com/getProjects', {\r\n            method: 'GET',\r\n            headers: {\r\n                Authorization: `Bearer ${tok}`,\r\n              },\r\n        });\r\n    \r\n        const data = await response.json();\r\n        console.log(data)\r\n        setProjects(data)\r\n    \r\n        } catch (error) {\r\n          console.log(error)\r\n        }\r\n      \r\n    }\r\n\r\n    useEffect(() =>{\r\n        setSmShow(false);\r\n        setCurrentProject(\"\");\r\n        getFriends();\r\n        showProjects();\r\n        showAssignedProjects();\r\n    },[fecthTasks])\r\n\r\n\r\n\r\n\r\n    const clickedProject = (e) =>{\r\n        let selectedId = e.target.id \r\n\r\n        let findProject = projects.find(element => element._id === selectedId);\r\n        setCurrentProject(findProject)\r\n        // setProjectId(selectedId)\r\n        setSmShow(true)\r\n        // props.setSelectedProject(selectedId)\r\n    }\r\n\r\n    const clickedAssignedProject = (e) =>{\r\n        let selectedId = e.target.id \r\n\r\n        let findProject = assignedProjects.find(element => element._id === selectedId);\r\n        setCurrentAssignedProject(findProject)\r\n        // setProjectId(selectedId)\r\n        setSmShowAssign(true) \r\n        // props.setSelectedProject(selectedId)\r\n    }\r\n\r\n\r\n    const handleRefreshCompnent = () =>{\r\n        setCurrentProject(\"\");\r\n        getFriends();\r\n        showProjects();\r\n        showAssignedProjects();\r\n    }\r\n\r\n\r\n  return (\r\n    <>\r\n \r\n        <ListGroup.Item className='navList' onClick={handleShow}>\r\n          <i className='fas fa-project-diagram'>&nbsp;</i>         \r\n          {' '}\r\n          My Projects\r\n        </ListGroup.Item>\r\n\r\n        <Modal show={show} fullscreen={fullscreen} onHide={handleHideModal}>\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Container>\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <Col sm lg=\"5\">\r\n                            <Modal.Title>Current Projects</Modal.Title>\r\n                            <br></br>\r\n                        </Col>\r\n                        <Col sm lg=\"6\">\r\n                            <Container><Projects props={{setFecthTasks}}/></Container>\r\n                            <br></br>\r\n                        </Col>\r\n                        <Col sm lg=\"1\">\r\n                            <Button className='refreshBtn2' onClick={handleRefreshCompnent}><i className=\"material-icons refreshIcon\">refresh</i></Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>       \r\n                <Container>\r\n                    {/* <Button className='refreshBtn2' onClick={handleRefreshCompnent}><i className=\"material-icons refreshIcon\">refresh</i></Button> */}\r\n                    <br></br>\r\n                    <Row className=\"justify-content-md-center\">\r\n                        {projects.map((project, index)=>\r\n                            <Col xs lg=\"5\" key={index}>\r\n                                <ListGroup.Item className='projectListItem' id={project._id} onClick={clickedProject}>\r\n                                    <b>{project.projectTitle}</b><b className='projectOwner'>My Project</b>\r\n                                    <br></br>\r\n                                    <br></br>\r\n                                    <ProgressBar animated variant=\"info\" now={project.progressBar} label={`${project.progressBar}%`} />\r\n                                    <br></br>\r\n                                    <p>Due Date: {project.dueDate.substring(0,10)}</p>\r\n                                </ListGroup.Item>\r\n                                <br></br>\r\n                            </Col>\r\n                        )}\r\n                        {assignedProjects.map((project, index)=>\r\n                            <Col xs lg=\"5\" key={index}>\r\n                                <ListGroup.Item className='projectListItem' id={project._id} onClick={clickedAssignedProject}>\r\n                                    <b>{project.projectTitle}</b><b className='projectOwner'>Assigned Project</b>\r\n                                    <br></br>\r\n                                    <br></br>\r\n                                    <ProgressBar animated variant=\"info\" now={project.progressBar} label={`${project.progressBar}%`}/>\r\n                                    <br></br>\r\n                                    <p>Due Date: {project.dueDate.substring(0,10)}</p>\r\n                                </ListGroup.Item>\r\n                                <br></br>\r\n                            </Col>\r\n                        )}\r\n                    </Row>\r\n                </Container>\r\n            </Modal.Body>\r\n        </Modal>\r\n\r\n\r\n\r\n\r\n        {/* Project Option Selection Modal */}\r\n\r\n\r\n        <Modal size=\"sm\" show={smShow} onHide={handleHideSelectionModal} aria-labelledby=\"example-modal-sizes-title-sm\" >\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\" className='titleSelection'>\r\n                    Choose For Selected Project\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>\r\n               \r\n                <ViewProject projectData={currentProject}/> \r\n\r\n                <br></br>\r\n\r\n                <UpdateProject projectData={{currentProject, allfriends, setFecthTasks}}/>\r\n                        \r\n                <br></br>\r\n\r\n                <AssignPhases projectData={{currentProject, allfriends, setFecthTasks}}/>\r\n                        \r\n                <br></br>\r\n\r\n                <ProjectNotification projectData={currentProject}/>\r\n                        \r\n                <br></br>\r\n\r\n                <ProjectChat projectData={currentProject}/>\r\n\r\n                <br></br>\r\n                \r\n                <DeleteProject projectData={{currentProject, setFecthTasks}} />\r\n                \r\n                <br></br>\r\n\r\n            </Modal.Body>\r\n        </Modal>\r\n\r\n\r\n\r\n\r\n\r\n        {/* Assigned Project Option Selection Modal */}\r\n\r\n\r\n        <Modal size=\"sm\" show={smShowAssign} onHide={handleHideAssignModal} aria-labelledby=\"example-modal-sizes-title-sm\" >\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\" className='titleSelection'>\r\n                    Choose For Selected Project\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>\r\n            \r\n                <ViewProject projectData={currentAssignedProject}/> \r\n\r\n                <br></br>\r\n\r\n            </Modal.Body>\r\n        </Modal>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DisplayProjects","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\MyNotes.js",["275","276","277","278","279","280","281","282","283","284","285","286"],[],"import React, {useState, useLayoutEffect, useEffect} from 'react'\r\nimport '../stylesheets/displayProjects.css'\r\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\nimport CreateNotes from './CreateNotes';\r\nimport UpdateNotes from './UpdateNotes';\r\nimport DeleteNote from './DeleteNote';\r\n\r\n\r\nconst MyNotes = () => {\r\n\r\n    const [fullscreen, setFullscreen] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const handleShow = () => {setFullscreen(true); setShow(true);}\r\n    const handleHideModal = () =>{setShow(false);}\r\n    const [smShow, setSmShow] = useState(false);\r\n    const [myNotes, setMyNotes] = useState([]);\r\n    const [currentNote, setCurrentNote] = useState();\r\n    const handleHideSelectionModal = () =>{setCurrentNote(\"\"); setSmShow(false);}\r\n    const [fecthTasks, setFecthTasks] = useState();\r\n\r\n\r\n\r\n    const getNotes = async () =>{\r\n      try {\r\n        const userProfile = JSON.parse(localStorage.getItem('User'));\r\n        const tok = userProfile.tok;\r\n          const response = await fetch('https://taskhive-backend-testing.onrender.com/getallNotes', {\r\n              method: 'GET',\r\n              headers: {\r\n                Authorization: `Bearer ${tok}`,\r\n              },\r\n          })\r\n\r\n          const data = await response.json();\r\n          console.log(data)\r\n          setMyNotes(data);\r\n\r\n      } catch (error) {\r\n          console.log(error)\r\n      }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    getNotes();\r\n  },[fecthTasks])\r\n\r\n\r\n  const clickedNote = (e) =>{\r\n      let noteId = e.target.id;\r\n      let getnote = myNotes.find(element => element._id === noteId);\r\n      setCurrentNote(getnote);\r\n      setSmShow(true);\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n        <ListGroup.Item className='navList' onClick={handleShow}>\r\n          <i className='fa fa-sticky-note'>&nbsp;</i>         \r\n          {' '}\r\n          My Notes\r\n        </ListGroup.Item>\r\n\r\n        <Modal show={show} fullscreen={fullscreen} onHide={handleHideModal}>\r\n            <Modal.Header closeButton className='modalHeader'>\r\n              <Container>\r\n                <Row className=\"justify-content-md-center\">\r\n                  <Col sm lg=\"5\">\r\n                    <Modal.Title>My Notes</Modal.Title>\r\n                    <br></br>\r\n                  </Col>\r\n                  <Col sm lg=\"6\">\r\n                    <Container ><CreateNotes props={{setFecthTasks}}/></Container>\r\n                    <br></br>\r\n                  </Col>\r\n                </Row>\r\n              </Container>  \r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>\r\n              \r\n              <br></br>\r\n              <Container>\r\n                <Row className=\"justify-content-md-center\">\r\n                  {myNotes.map((element, index)=>\r\n                    <Col sm lg=\"4\" key={index}>\r\n                      <ListGroup.Item className='notesCont' id={element._id} onClick={clickedNote}>\r\n                        <h5>Title: {element.noteTitle}</h5>\r\n                        <br></br>\r\n                        <p><b>Note:</b> {element.noteText}</p>\r\n                        <br></br>\r\n                        <p>Date: {element.noteDate.substring(0,10)}</p>\r\n                      </ListGroup.Item>\r\n                      <br></br>\r\n                    </Col>\r\n                  )}\r\n                </Row>\r\n              </Container>\r\n            </Modal.Body>\r\n        </Modal>\r\n\r\n\r\n\r\n\r\n        <Modal size=\"sm\" show={smShow} onHide={handleHideSelectionModal} aria-labelledby=\"example-modal-sizes-title-sm\" >\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\" className='titleSelection'>\r\n                    Choose For Selected Note\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>\r\n              <UpdateNotes noteData={{currentNote, setFecthTasks}}/>              \r\n              <br></br>\r\n              <DeleteNote noteData={{currentNote, setFecthTasks}}/>\r\n              <br></br>\r\n            </Modal.Body>\r\n        </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MyNotes","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\Notifications.js",["287","288","289","290","291","292","293","294"],[],"import React, {useState, useEffect, useContext} from 'react'\r\nimport { NavLink, useNavigate } from 'react-router-dom'\r\nimport '../stylesheets/notifications.css'\r\nimport { Row, Col, Container, InputGroup, Button, Modal, FormControl, ListGroup, Badge } from 'react-bootstrap';\r\nimport SearchMembers from './SearchMembers';\r\nimport image_S1 from '../images/abstract10.png'\r\n\r\nconst Notifications = () => { \r\n\r\n    const [fullscreen, setFullscreen] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const handleShow = () => {setFullscreen(true); setShow(true);}\r\n    const [senderProfiles, setSenderProfiles] = useState([]);\r\n    const [receiverProfiles, setReceiverProfiles] = useState([]);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const handleAlertClose = () =>{setShowAlert(false);}\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [alertTitle, setAlertTitle] = useState(\"\");\r\n    const [fetchData, setFetchData] = useState();\r\n\r\n\r\n    const requestSentBYMe = async () =>{\r\n      try {\r\n        const userProfile = JSON.parse(localStorage.getItem('User'));\r\n        const tok = userProfile.tok;\r\n          const response = await fetch('https://taskhive-backend-testing.onrender.com/requestSentBYMe', { \r\n              method: 'GET',\r\n              headers: {\r\n                Authorization: `Bearer ${tok}`,\r\n              },\r\n          })\r\n\r\n          const data = await response.json();\r\n          console.log(data)\r\n          setReceiverProfiles(data);\r\n\r\n      } catch (error) {\r\n          console.log(error)\r\n      }\r\n  }\r\n\r\n\r\n\r\n    const getRequest = async () =>{\r\n        try {\r\n          const userProfile = JSON.parse(localStorage.getItem('User'));\r\n          const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/getRequest', { \r\n                method: 'GET',\r\n                headers: {\r\n                  Authorization: `Bearer ${tok}`,\r\n                },\r\n            })\r\n\r\n            const data = await response.json();\r\n            console.log(data)\r\n            setSenderProfiles(data);\r\n            // console.log(senderProfiles)\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRequest();\r\n        requestSentBYMe();\r\n    },[fetchData])\r\n\r\n\r\n    const handleAcceptBtn = async (e) =>{\r\n        let personId = e.target.id;\r\n        try {\r\n          const userProfile = JSON.parse(localStorage.getItem('User'));\r\n          const tok = userProfile.tok;\r\n          const response = await fetch('https://taskhive-backend-testing.onrender.com/acceptRequest', {\r\n            method: 'POST',\r\n            headers: {\r\n              Authorization: `Bearer ${tok}`,\r\n                'Content-Type' : 'application/json' \r\n            },\r\n            body: JSON.stringify({personId}),\r\n            // body: searchInput\r\n        })\r\n\r\n        let data = await response.json();\r\n\r\n        if(response.status === 201 && data){\r\n          setAlertTitle(\"Alert\");\r\n          setAlertMessage(data.message);\r\n          setShowAlert(true);\r\n          setFetchData(data)\r\n        }\r\n          \r\n      } catch (error) {\r\n        console.log(error)    \r\n      }\r\n        \r\n    }\r\n\r\n\r\n\r\n    const handleCancelRequest = async (e) =>{\r\n      let personId = e.target.id;\r\n      try {\r\n        const userProfile = JSON.parse(localStorage.getItem('User'));\r\n        const tok = userProfile.tok;\r\n        const response = await fetch('https://taskhive-backend-testing.onrender.com/cancelRequest', {\r\n          method: 'POST',\r\n          headers: {\r\n              Authorization: `Bearer ${tok}`,\r\n              'Content-Type' : 'application/json' \r\n          },\r\n          body: JSON.stringify({personId}),\r\n          // body: searchInput\r\n      })\r\n\r\n      let data = await response.json();\r\n\r\n      if(response.status === 201 && data){\r\n        setAlertTitle(\"Alert\");\r\n        setAlertMessage(data.message);\r\n        setShowAlert(true);\r\n        setFetchData(data)\r\n      }\r\n        \r\n    } catch (error) {\r\n      console.log(error)    \r\n    }\r\n\r\n    }\r\n\r\n    const handleRefreshCompnent = () =>{\r\n      getRequest();\r\n    }\r\n\r\n\r\n  return (\r\n    <>\r\n      <ListGroup.Item className='navList' onClick={handleShow}>\r\n        <i className='fa fa-search'>&nbsp;</i>         \r\n        {' '}\r\n        Members\r\n      </ListGroup.Item>\r\n\r\n      <Modal show={show} fullscreen={fullscreen} onHide={()=>setShow(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n        <Modal.Header closeButton className='modalHeader'>\r\n          <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col sm lg=\"5\">\r\n                <Modal.Title>Notifications</Modal.Title>\r\n                <br></br>\r\n              </Col>\r\n              <Col sm lg=\"6\">\r\n                <Container><SearchMembers props={{setFetchData}}/></Container>  \r\n                <br></br>\r\n              </Col>\r\n              <Col sm lg=\"1\">\r\n                <Button className='refreshBtn2' onClick={handleRefreshCompnent}><i className=\"material-icons refreshIcon\">refresh</i></Button>\r\n              </Col>\r\n            </Row>\r\n          </Container>    \r\n        </Modal.Header>\r\n        <Modal.Body className='modalBody'>\r\n          <Container>\r\n              <Row>\r\n                <Container>\r\n                  <Row className=\"justify-content-md-center\">\r\n                      {senderProfiles.map( (senderProfiles, index) =>\r\n                        <Col sm lg=\"4\" key={index}>\r\n                          <ListGroup.Item as=\"li\" key={index}  className=\"profileMessages\">\r\n                            <img \r\n                              src={senderProfiles.image}\r\n                              onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\r\n                              className=\"profileImages\"\r\n                            />\r\n                            <br></br>\r\n                            <b>{senderProfiles.name}</b>\r\n                            <br></br>\r\n                            <br></br>\r\n                            <Button id={senderProfiles._id} bg=\"primary\" className=\"sendRequestBtn\" onClick={handleAcceptBtn}>\r\n                              Accept Request\r\n                            </Button>\r\n                          </ListGroup.Item>\r\n                        </Col>\r\n                      )}\r\n                      {receiverProfiles.map( (receiverProfiles, index) =>\r\n                        <Col sm lg=\"4\" key={index}>\r\n                          <ListGroup.Item as=\"li\" key={index}  className=\"profileMessages\">\r\n                            <img \r\n                              src={receiverProfiles.image}\r\n                              onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\r\n                              className=\"profileImages\"\r\n                            />\r\n                            <br></br>\r\n                            <b>{receiverProfiles.name}</b>\r\n                            <br></br>\r\n                            <br></br>\r\n                            <Button id={receiverProfiles._id} bg=\"primary\" className=\"sendRequestBtn\" onClick={handleCancelRequest}>\r\n                              Cancel Request\r\n                            </Button>\r\n                          </ListGroup.Item>\r\n                        </Col>\r\n                      )}\r\n                  </Row>\r\n                </Container>\r\n              </Row>\r\n          </Container>\r\n        </Modal.Body>\r\n      </Modal>\r\n\r\n\r\n\r\n\r\n      {/* Alert Modal */}\r\n\r\n      <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>{alertMessage}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \r\n            </Modal.Footer>\r\n            </Modal>\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default Notifications","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\Profile.js",["295","296","297","298","299","300","301","302","303","304","305","306","307"],[],"import React, {useState, useContext, useEffect} from 'react'\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport '../stylesheets/profile.css'\r\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\nimport image_S1 from '../images/abstract10.png'\r\nimport { UserContext } from '../App'\r\n\r\nconst Profile = () => {\r\n\r\n    const {state, dispatch} = useContext(UserContext); \r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const handleSignOut = async () =>{\r\n\r\n        try{\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/userSignOut', {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                  },\r\n            });\r\n            let data = await response.json();\r\n\r\n            if(response.status === 201 && data){\r\n                localStorage.removeItem(\"User\")      \r\n                navigate(\"/login\");\r\n            }\r\n        } catch(error){\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n  return (\r\n    <>\r\n        <ListGroup.Item className='navList' onClick={()=>setShowAlert(true)}>\r\n            <i className='fa fa-user-circle'>&nbsp;</i>         \r\n            {' '}\r\n            Profile\r\n        </ListGroup.Item>\r\n\r\n        <Modal size=\"sm\" show={showAlert} onHide={()=>setShowAlert(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">Profile</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                {state ?\r\n                    <Container className='profileCont'>\r\n                        <Row className=\"justify-content-md-center\">\r\n                            <Col>\r\n                                <img \r\n                                    src={state.image}\r\n                                    onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\r\n                                    className=\"profileImages\"\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <p>{state.name}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <p>{state.email}</p>\r\n                        </Row>\r\n                    </Container>\r\n                :\r\n                    <Container></Container>\r\n                }                \r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn' onClick={handleSignOut}>SignOut</Button> \r\n            </Modal.Footer>\r\n        </Modal>\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default Profile","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\DeleteProject.js",["308","309","310","311","312","313","314","315","316","317","318","319","320","321","322"],[],"import React, {useState, useEffect} from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport \"../stylesheets/projects.css\"\r\nimport {Container, Form, Button, Row, Col, Badge, FloatingLabel, Popover, Dropdown, ButtonGroup, DropdownButton, OverlayTrigger, FormControl, Modal, ListGroup, InputGroup } from 'react-bootstrap';\r\n// import DisplayProjects from './DisplayProjects';\r\n\r\nconst DeleteProject = ({projectData}) => {\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n    const handleClose = () => setShowModal(false);\r\n    const handleShow = () => setShowModal(true);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const handleAlertClose = () =>{setShowAlert(false);}\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [alertTitle, setAlertTitle] = useState(\"\");\r\n\r\n    const handleDeleteProject = async (e) =>{\r\n        let selectedId = e.target.id;\r\n        \r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/deleteProject', { \r\n                method: 'POST',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                    'Content-Type' : 'application/json' \r\n                },\r\n                body: JSON.stringify({selectedId}),\r\n            })\r\n\r\n            let data = await response.json();\r\n            if(response.status === 201 && data){\r\n                setShowModal(false);\r\n                setAlertTitle(\"Alert\");\r\n                setAlertMessage(data.message);\r\n                setShowAlert(true);\r\n                projectData.setFecthTasks(data);\r\n            }\r\n            console.log(data)\r\n            \r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        } \r\n        \r\n    }\r\n\r\n\r\n  return (\r\n    <>\r\n        <ListGroup.Item className='selectedListItem' onClick={handleShow}>\r\n            <i className='fa fa-trash chat-icon'></i>         \r\n            <br></br>\r\n            Delete Project\r\n        </ListGroup.Item>\r\n\r\n        <Modal show={showModal} onHide={handleClose} >\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title>Delete Project</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                {projectData ?\r\n                <>\r\n                <p className='warningTxt'>Selected project will be permanently deleted when click on <b>Delete Project</b> button.</p>\r\n                <ListGroup>\r\n                    <ListGroup.Item className='memberLists'><b>Title: </b> {projectData.currentProject.projectTitle} </ListGroup.Item>\r\n                    <ListGroup.Item className='memberLists'><b>Discription: </b> {projectData.currentProject.projectDiscription}</ListGroup.Item>\r\n                    <ListGroup.Item className='memberLists'><b>Type: </b> {projectData.currentProject.projectType}</ListGroup.Item>\r\n                </ListGroup>\r\n                </>\r\n                :\r\n                <>\r\n                <p className='warningTxt'>Selected project will be permanently deleted when click on <b>Delete Project</b> button.</p>\r\n                <ListGroup>\r\n                    <ListGroup.Item className='memberLists'><b>Title: </b> </ListGroup.Item>\r\n                    <ListGroup.Item className='memberLists'><b>Discription: </b> </ListGroup.Item>\r\n                    <ListGroup.Item className='memberLists'><b>Start Date: </b> </ListGroup.Item>\r\n                    <ListGroup.Item className='memberLists'><b>Due Date: </b> </ListGroup.Item>\r\n                    <ListGroup.Item className='memberLists'><b>Due Date: </b> </ListGroup.Item>\r\n                    <ListGroup.Item ><b>Type: </b> </ListGroup.Item>\r\n                </ListGroup>\r\n                </>\r\n                }\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                {projectData ?\r\n                    <Button variant=\"warning\" className='saveBtn' id={projectData.currentProject._id} onClick={handleDeleteProject}>Delete Project</Button>\r\n                :\r\n                    <Button variant=\"warning\" className='saveBtn' >Delete Project</Button>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n       \r\n        {/* <Container className='contHidden'><DisplayProjects keyNum={keyNum}/></Container> */}\r\n                \r\n\r\n\r\n                \r\n            {/* Alert Modal */}\r\n\r\n            <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose}  aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>{alertMessage}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \r\n            </Modal.Footer>\r\n            </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DeleteProject","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\DeleteMember.js",["323","324","325","326","327","328","329","330","331","332","333","334"],[],"import React, {useState, useEffect, useContext} from 'react'\r\nimport { useNavigate, NavLink } from 'react-router-dom'\r\nimport '../stylesheets/messages.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Row, Col,Container, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\nimport image_S1 from '../images/abstract10.png'\r\n\r\nconst DeleteMember = () => {\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n    const handleClose = () => setShowModal(false);\r\n  return (\r\n    <>\r\n        <ListGroup.Item className='selectedListItem' onClick={() => setShowModal(true)}>\r\n            <i className='fa fa-trash'></i>         \r\n            <br></br>\r\n            Remove Member\r\n        </ListGroup.Item>\r\n\r\n        <Modal show={showModal} onHide={handleClose} backdrop=\"static\" keyboard={false} >\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title>Delete Project</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p className='warningTxt'>Selected member will be permanently deleted from all Projects / Tasks & Chat Box when click on <b>Remove Member</b> button.</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button variant=\"warning\" className='saveBtn' >Remove Member</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DeleteMember","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\ViewProject.js",["335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351"],[],"import React, {useState, useContext, useEffect} from 'react'\r\nimport '../stylesheets/displayProjects.css'\r\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\nimport { UserContext } from '../App'\r\n\r\nconst ViewProject = ({projectData}) => {\r\n   \r\n    const {state, dispatch} = useContext(UserContext);  \r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const handleAlertClose = () =>{setShowAlert(false);}\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [alertTitle, setAlertTitle] = useState(\"\");\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const [smShow, setSmShow] = useState(false);\r\n    const [currentProjectMembers, setCurrentProjectMembers] = useState([]);\r\n    const [assignedPhases, setAssignedPhases] = useState([]);\r\n    const [currentProjectCreator, setCurrentProjectCreator] = useState();\r\n    const [myAssignedPhases, setmyAssignedPhases] = useState([]);\r\n    const [selectedPhase, setSelectedPhase] = useState();\r\n  \r\n\r\n\r\n\r\n    const showPhases = async () =>{\r\n        if(projectData){\r\n            try {\r\n                let selectedProjectId = projectData._id;\r\n                let selectedProjectCreator = projectData.projectCreator;\r\n\r\n                const userProfile = JSON.parse(localStorage.getItem('User'));\r\n                const tok = userProfile.tok;\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/showProjectPhases', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        Authorization: `Bearer ${tok}`,\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({selectedProjectId, selectedProjectCreator}),\r\n                })\r\n    \r\n                const data = await response.json();\r\n                console.log(data)\r\n                if(data){\r\n                    if(data.findProjectPhases){\r\n                        setAssignedPhases(data.findProjectPhases.allPhases);\r\n                    }\r\n                    else{\r\n                        setAssignedPhases([]);\r\n                    }\r\n                    setCurrentProjectCreator(data.findProjectCreator);\r\n                    setCurrentProjectMembers(data.selectedProjectMembers)\r\n                }\r\n               \r\n\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        showPhases();\r\n    },[])\r\n\r\n    const handelAssigning = () =>{\r\n        if(assignedPhases){\r\n            let phaseObj = [];\r\n            assignedPhases.map((element)=>{\r\n                if(element.memberRef === state.id){\r\n                    phaseObj.push(element);\r\n                }\r\n            })\r\n       \r\n            setmyAssignedPhases(phaseObj); \r\n\r\n            console.log(myAssignedPhases)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    useEffect(() =>{\r\n        handelAssigning();\r\n    },[assignedPhases])\r\n\r\n\r\n    const phaseCompletionModal = (e) =>{\r\n        let id = e.target.id;\r\n        let findPhase = myAssignedPhases.find(element => element.phaseId === id);\r\n        console.log(findPhase)\r\n        setSelectedPhase(findPhase);\r\n        setSmShow(true);\r\n    }\r\n\r\n    const handleCompletedPhases = async (e) =>{\r\n        let selectedProjectId = e.target.id;\r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/phaseCompletedNotification', {\r\n                method: 'POST',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                    'Content-Type' : 'application/json' \r\n                },\r\n                body: JSON.stringify({selectedProjectId, selectedPhase}),\r\n            })\r\n\r\n            const data = await response.json();\r\n\r\n            if(response.status === 201 && data){\r\n                setAlertTitle(\"Alert\")\r\n                setAlertMessage(data.message);\r\n                setShowAlert(true);\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        setSmShow(false);\r\n    }\r\n\r\n\r\n    const handleDownloadFile = async (e) =>{\r\n        let fileId = e.target.id;\r\n        console.log(fileId)\r\n        let x = document.getElementById(\"2abc\")\r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch(`https://taskhive-backend-testing.onrender.com/downloadFile/${fileId}`);\r\n\r\n            const file = await response.blob();\r\n            const url = window.URL.createObjectURL(file);\r\n\r\n            const a = document.createElement('a');\r\n            a.style.display = 'none';\r\n            a.href = url;\r\n            a.download = fileId;\r\n            // document.body.appendChild(a);\r\n            x.appendChild(a);\r\n            a.click();\r\n            // window.URL.revokeObjectURL(url);\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n  \r\n    return (\r\n    <>\r\n    \r\n        <ListGroup.Item className='selectedListItem' onClick={handleShow}>\r\n            <i className='fa fa-tv chat-icon'></i>         \r\n            <br></br>\r\n            View Project\r\n        </ListGroup.Item>\r\n        <Modal show={show} onHide={handleClose} backdrop=\"static\" keyboard={false} >\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title>Selected Project</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>\r\n                {projectData ?\r\n                    <Container>\r\n                        <ListGroup>\r\n                            <h6><b>Details: </b> </h6>\r\n                            {currentProjectCreator ?\r\n                                <ListGroup.Item className='phaseListItem'><b>Project Creator: {currentProjectCreator.projectCreatorName}</b></ListGroup.Item>\r\n                            :\r\n                                <ListGroup.Item className='phaseListItem'><b>Project Creator: </b></ListGroup.Item>\r\n                            }\r\n                            \r\n                            <ListGroup.Item className='phaseListItem'><b>Title: </b> {projectData.projectTitle} </ListGroup.Item>\r\n                            <ListGroup.Item className='phaseListItem'><b>Discription: </b> {projectData.projectDiscription}</ListGroup.Item>\r\n                            <ListGroup.Item className='phaseListItem'><b>Start Date: </b> {projectData.startDate.substring(0,10)}</ListGroup.Item>\r\n                            <ListGroup.Item className='phaseListItem'><b>Due Date: </b> {projectData.dueDate.substring(0,10)}</ListGroup.Item>\r\n                            <ListGroup.Item className='phaseListItem'><b>Type: </b> {projectData.projectType}</ListGroup.Item>\r\n                            <br></br>\r\n                            <h6><b>Members: </b> </h6>\r\n                            {currentProjectMembers.map((element, index)=>\r\n                                <ListGroup.Item key={index} className='phaseListItem'>\r\n                                    {element.memberName}\r\n                                </ListGroup.Item>\r\n                            )}\r\n                            <br></br>\r\n                            <h6><b>Phases: </b> </h6>\r\n                            {projectData.projectPhases.map((element, index)=>\r\n                                <ListGroup.Item key={index} className='phaseListItem'>\r\n                                    Phase {element.PhaseNum} --- {element.PhaseTitle}\r\n                                </ListGroup.Item>\r\n                            )}\r\n                            <br></br> \r\n                            <h6><b>Files: </b> </h6>\r\n                            {projectData.projectFiles.map((element, index)=>\r\n                                <ListGroup.Item key={index} id={index + \"abc\"} className='phaseListItem'>\r\n                                    File Name: {element.fileName}\r\n                                    <br></br>\r\n                                    File Size: {Math.floor(element.fileSize/10000) + 'KB'}\r\n                                    <Button className='downloadBtn' id={element._id} onClick={handleDownloadFile}><i className=\"fa fa-download\" id={element._id} onClick={handleDownloadFile}></i></Button>\r\n                                </ListGroup.Item>\r\n                            )}\r\n                            <br></br>\r\n                            <h6><b>My Assigned Phases & Tasks: </b> </h6>\r\n                            {myAssignedPhases ?\r\n                                <>\r\n                                {myAssignedPhases.map((element, index)=>\r\n                                    <ListGroup.Item key={index} className='phaseListItem'>\r\n                                        Phase Number: {element.phaseNum} <i id={element.phaseId} className=\"fa fa-check-circle completedBtn\" onClick={phaseCompletionModal}></i>\r\n                                        <br></br>\r\n                                        Phase Title: {element.phaseTitle}\r\n                                    </ListGroup.Item>\r\n                                )}\r\n                                </>\r\n                            :\r\n                                <ListGroup.Item className='phaseListItem'>No Assigned Phases</ListGroup.Item>\r\n                            }\r\n                            \r\n                    </ListGroup>\r\n                    </Container>\r\n                :\r\n                    <ListGroup>\r\n                        <ListGroup.Item className='phaseListItem'><b>Creator: </b> </ListGroup.Item>\r\n                        <ListGroup.Item className='phaseListItem'><b>Title: </b> </ListGroup.Item>\r\n                        <ListGroup.Item className='phaseListItem'><b>Discription: </b> </ListGroup.Item>\r\n                        <ListGroup.Item className='phaseListItem'><b>Start Date: </b> </ListGroup.Item>\r\n                        <ListGroup.Item className='phaseListItem'><b>Due Date: </b> </ListGroup.Item>\r\n                        <ListGroup.Item className='phaseListItem'><b>Type: </b> </ListGroup.Item>\r\n                        <ListGroup.Item className='phaseListItem'><b>Members: </b> </ListGroup.Item>\r\n                        <ListGroup.Item className='phaseListItem'><b>Phases: </b> </ListGroup.Item>\r\n                        <ListGroup.Item className='phaseListItem'><b>Files: </b> </ListGroup.Item>\r\n                    </ListGroup>\r\n                }\r\n                \r\n            </Modal.Body>\r\n        </Modal>\r\n\r\n\r\n                {/* Phase Completion Modal  */}\r\n\r\n\r\n        <Modal size=\"sm\" show={smShow} onHide={() => setSmShow(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                {selectedPhase ?\r\n                    <Modal.Title id=\"example-modal-sizes-title-sm\">{selectedPhase.phaseTitle}</Modal.Title>\r\n                  :\r\n                    <Modal.Title id=\"example-modal-sizes-title-sm\">Selected Phase</Modal.Title>\r\n                }  \r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>If you completed the selected phase / task then click \r\n                    on <b>Task Completed</b> button to send notification to the project creator.</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                {projectData ?\r\n                    <Button className='saveBtn' id={projectData._id} onClick={handleCompletedPhases}>Task Completed</Button>\r\n                    :\r\n                    <Button className='saveBtn'>Save</Button>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n\r\n\r\n        <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>{alertMessage}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \r\n            </Modal.Footer>\r\n            </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ViewProject","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\TodoForm.js",["352","353","354","355","356"],[],"import React, {useState, useEffect, useRef} from 'react'\r\nimport { useNavigate, NavLink } from 'react-router-dom'\r\nimport \"../stylesheets/todoForm.css\"\r\nimport {Container, Form, Button, Row, Col, Badge, Modal, ListGroup } from 'react-bootstrap';\r\n\r\nconst TodoForm = ({clickedTask}) => {\r\n    \r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const handleAlertClose = () =>{setShowAlert(false);}\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [alertTitle, setAlertTitle] = useState(\"\");\r\n    const [smShow, setSmShow] = useState(false);\r\n    const [taskCat, setTaskCat] = useState([]);\r\n    const [taskForUpdate, setTaskForUpdate] = useState();\r\n    const [defaultCat, setDefaultCat] = useState([\r\n        {category: 'Default'},\r\n        {category: 'Personal'},\r\n        {category: 'Important'}\r\n    ]);\r\n    // let markTask = clickedTask.taskUpdate;\r\n  \r\n\r\n    const showCategories = async () =>{\r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/showCategories', {\r\n                method: 'GET',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                  },\r\n            });\r\n    \r\n            const data = await response.json();\r\n            setTaskCat(data);\r\n            \r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        showCategories();\r\n    },[])\r\n\r\n\r\n    \r\n\r\n    const handleSubmit = async (e) =>{\r\n        e.preventDefault();\r\n        const form = e.currentTarget;\r\n        const {task, date, category } = e.target.elements;\r\n\r\n        let details = {\r\n            task: task.value,\r\n            date: date.value,\r\n            category: category.value\r\n        }\r\n\r\n        const userProfile = JSON.parse(localStorage.getItem('User'));\r\n        const tok = userProfile.tok;\r\n        const response = await fetch('https://taskhive-backend-testing.onrender.com/addNewTask', {\r\n            method: 'POST',\r\n            headers: {\r\n                Authorization: `Bearer ${tok}`,\r\n                'Content-Type' : 'application/json'\r\n            },\r\n            body: JSON.stringify(details),\r\n        })\r\n\r\n        let data = await response.json();\r\n\r\n        if(response.status === 400 || !data){\r\n            setAlertTitle(\"Alert\")\r\n            setAlertMessage(\"Something went wrong.\");\r\n            setShowAlert(true);\r\n        }\r\n        else{\r\n            setAlertTitle(\"Alert\")\r\n            setAlertMessage(\"Task added successfully.\");\r\n            setShowAlert(true);\r\n            showCategories();\r\n            clickedTask.setFecthTasks(data);\r\n        }\r\n        setTaskForUpdate(null); \r\n        form.reset();\r\n        \r\n    }\r\n\r\n    const handleUpdate = async (e) => {\r\n        e.preventDefault();\r\n        const form = e.currentTarget;\r\n        const {updateTask, updateDate, updateCategory } = e.target.elements;\r\n\r\n        let details = {\r\n            task: updateTask.value,\r\n            date: updateDate.value,\r\n            category: updateCategory.value,\r\n            id: taskForUpdate._id\r\n        }\r\n\r\n        const userProfile = JSON.parse(localStorage.getItem('User'));\r\n        const tok = userProfile.tok;\r\n        const response = await fetch('https://taskhive-backend-testing.onrender.com/updatingTask', {\r\n            method: 'POST',\r\n            headers: {\r\n                Authorization: `Bearer ${tok}`,\r\n                'Content-Type' : 'application/json'\r\n            },\r\n            body: JSON.stringify(details),\r\n        })\r\n\r\n        let data = await response.json();\r\n\r\n        if(response.status === 400 || !data){\r\n            setAlertTitle(\"Alert\")\r\n            setAlertMessage(\"Something went wrong.\");\r\n            setShowAlert(true);\r\n            \r\n        }\r\n        else{\r\n            setAlertTitle(\"Alert\")\r\n            setAlertMessage(\"Task updated successfully.\");\r\n            setShowAlert(true);\r\n            clickedTask.setFecthTasks(data);\r\n            setTaskForUpdate(null);\r\n        }\r\n        form.reset();\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        setTaskForUpdate(clickedTask.taskUpdate);\r\n    },[clickedTask.taskUpdate])\r\n\r\n\r\n\r\n    const addCategory = async (e) =>{\r\n        e.preventDefault();\r\n\r\n        const {categoryInput} = e.target.elements;\r\n\r\n        let newcategory = {\r\n            name: categoryInput.value\r\n        }\r\n        \r\n    \r\n        const userProfile = JSON.parse(localStorage.getItem('User'));\r\n        const tok = userProfile.tok;\r\n        const response = await fetch('https://taskhive-backend-testing.onrender.com/alltaskCategories', { \r\n            method: 'POST',\r\n            headers: {\r\n                Authorization: `Bearer ${tok}`,\r\n                'Content-Type' : 'application/json' \r\n            },\r\n            body: JSON.stringify(newcategory),\r\n        })\r\n        \r\n        let data = await response.json();\r\n\r\n        if(response.status === 400 || !data){\r\n            setAlertTitle(\"Alert\")\r\n            setAlertMessage(\"Something went wrong.\");\r\n            setShowAlert(true);\r\n        }\r\n        else{\r\n            setAlertTitle(\"Alert\")\r\n            setAlertMessage(\"Category added successfully.\");\r\n            setShowAlert(true);\r\n            // window.location.reload(false);\r\n        }\r\n        categoryInput.value = \"\";\r\n    }\r\n\r\n\r\n    const deleteCat = async (e) =>{\r\n        let catId = e.target.id\r\n        console.log(catId)\r\n        \r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/deletingCategory', {\r\n                method: 'POST',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                    'Content-Type' : 'application/json'\r\n                },\r\n                body: JSON.stringify({catId}),\r\n            })\r\n    \r\n            let data = await response.json();\r\n\r\n            setTaskCat(data);\r\n    \r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n\r\n\r\n    const handleDeleteTask = async (e) =>{\r\n        let taskId = e.target.id;\r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/deletingselectedTask', {\r\n                method: 'POST',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                    'Content-Type' : 'application/json'\r\n                },\r\n                body: JSON.stringify({taskId}),\r\n            })\r\n    \r\n            let data = await response.json();\r\n            if(response.status === 201 && data){\r\n                console.log(data);\r\n                setAlertTitle(\"Alert\")\r\n                setAlertMessage(data.message);\r\n                setShowAlert(true);\r\n                clickedTask.setFecthTasks(data);\r\n                setTaskForUpdate(null);\r\n            }\r\n    \r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n\r\n  return (\r\n    <>\r\n        <Container className='todoFormContainer'> \r\n            <Modal size=\"sm\" show={smShow} onHide={() => setSmShow(false)} aria-labelledby=\"example-modal-sizes-title-sm\" >\r\n            <Modal.Header closeButton className='modalHeader'>\r\n            <Modal.Title id=\"example-modal-sizes-title-sm\">\r\n                Add New Category\r\n            </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>\r\n                <Container>\r\n                <Row >\r\n                    <Col>\r\n                        <Form method='POST' onSubmit={addCategory}> \r\n                            <Form.Group className=\"mb-3 taskForm\" >\r\n                                <Container>\r\n                                    <Row className=\"justify-content-md-center\">\r\n                                        <Col sm lg={10} >\r\n                                            <Form.Control type=\"text\" id='categoryInput' className='formInput' placeholder=\"Enter Category\" />\r\n                                        </Col>\r\n                                        <Col sm lg={2}>\r\n                                            <Button className='categoryBtn' variant=\"primary\" type=\"submit\" >\r\n                                                <i className=\"fa fa-plus\"></i>\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Container>\r\n                            </Form.Group>\r\n                            \r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <ListGroup variant=\"flush\" >\r\n                            <ListGroup.Item className='todosList'>Default</ListGroup.Item>\r\n                            <ListGroup.Item className='todosList'>Personal</ListGroup.Item>\r\n                            <ListGroup.Item className='todosList'>Important</ListGroup.Item>\r\n                            {taskCat.map( (taskCat, index) =>\r\n                                <ListGroup.Item className='todosList' key={index}>{taskCat.category} <i className=\"fa fa-trash trashBtn\" id={taskCat._id} onClick={deleteCat}></i> </ListGroup.Item>\r\n                            )}\r\n                        </ListGroup>\r\n                    </Col>\r\n                </Row>\r\n                </Container>\r\n            </Modal.Body>\r\n            </Modal>\r\n\r\n        {taskForUpdate ?\r\n            <Form method='POST' onSubmit={handleUpdate} className='contactForm' >\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-3\" >\r\n                                <Form.Label className='formTxt'>Update Task</Form.Label>\r\n                                <Form.Control type=\"text\" className='formInput' id='updateTask' defaultValue={taskForUpdate.task} placeholder=\"Enter Task\" />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-3 inputGroup\" >\r\n                                <Form.Label className='formTxt'>Due Date</Form.Label>\r\n                                <Form.Control type=\"date\" id='updateDate' className='formInput' defaultValue={taskForUpdate.date} placeholder=\"date\" />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-3 inputGroup\" >\r\n                                <Form.Label className='formTxt'>Category</Form.Label>\r\n                                    <Form.Select id='updateCategory' className='formInput' aria-label=\"Default select example\">  \r\n                                        <option className='listOption' >{taskForUpdate.category}</option> \r\n                                            {taskCat.map( (taskCat, index) => {\r\n                                                return taskCat.category !== taskForUpdate.category ?\r\n                                                <option className='listOption' key={index} >{taskCat.category}</option> \r\n                                            :\r\n                                                null  \r\n                                            })}\r\n\r\n                                            {defaultCat.map((defaultCat, index) => {\r\n                                                return defaultCat.category !== taskForUpdate.category ?\r\n                                                <option className='listOption'  key={index} >{defaultCat.category}</option> \r\n                                            :\r\n                                                null \r\n                                            })}                   \r\n                                    </Form.Select>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row >\r\n                        <Col >\r\n                            <Form.Group className=\"mb-3\" >\r\n                                <Form.Label className='formTxt'>Submit</Form.Label>\r\n                                <Button className='updateBtn' variant=\"primary\" type=\"submit\" >\r\n                                    <i className=\"fa fa-check\"></i> \r\n                                </Button>\r\n                            </Form.Group>\r\n                            {/* <Form.Group className=\"mb-3\" >\r\n                                <Form.Label className='formTxt'>Status</Form.Label>\r\n                                <Form.Select id='updateStatus' className='formInput' aria-label=\"Default select example\"> \r\n                                    <option className='listOption'>Pending</option>                \r\n                                    <option className='listOption'>Completed</option>                \r\n                                </Form.Select>\r\n                            </Form.Group> */}\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-3\" >\r\n                                <Form.Label className='formTxt'>Delete</Form.Label>\r\n                                <Button className='updateBtn' variant=\"primary\" id={taskForUpdate._id} onClick={handleDeleteTask} >\r\n                                    <i className=\"fa fa-trash\"></i> \r\n                                </Button>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </Form>\r\n\r\n            :\r\n\r\n\r\n            <Form method='POST' onSubmit={handleSubmit} className='contactForm' >\r\n                <Container>\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <Col>\r\n                            <Form.Group className=\"mb-3\" >\r\n                                <Form.Label className='formTxt'>Task</Form.Label>\r\n                                <Form.Control type=\"text\" id='task' className='formInput' placeholder=\"Enter Task\" />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <Col sm lg=\"6\">\r\n                            <Form.Group className=\"mb-3 inputGroup\" >\r\n                                <Form.Label className='formTxt'>Due Date</Form.Label>\r\n                                <Form.Control type=\"date\" id='date' className='formInput' placeholder=\"date\" />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col sm lg=\"6\">\r\n                            <Form.Group className=\"mb-3 inputGroup\" >\r\n                                <Form.Label className='formTxt'>Category</Form.Label>\r\n                                <Button className=\"addCatBadge\" onClick={() => setSmShow(true)}><i className=\"fa fa-plus\" ></i></Button>\r\n                                <Form.Select id='category' className='formInput' aria-label=\"Default select example\">  \r\n                                    <option className='listOption'>Default</option>               \r\n                                    <option className='listOption'>Personal</option>               \r\n                                    <option className='listOption'>Important</option>               \r\n                                    {taskCat.map( (taskCat, index) =>\r\n                                        <option className='listOption' key={index}>{taskCat.category}</option>\r\n                                    )}\r\n                                </Form.Select>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <Col sm lg=\"6\">\r\n                            <Button className='submitBtn' variant=\"primary\" type=\"submit\" ><i className=\"fa fa-plus\"></i></Button>                \r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </Form>\r\n            }\r\n        </Container>\r\n\r\n\r\n\r\n\r\n        {/* Alert Modal */}\r\n\r\n        <Modal size=\"sm\" className='my-modal' show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>{alertMessage}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn ' onClick={handleAlertClose}>Ok</Button> \r\n            </Modal.Footer>\r\n        </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TodoForm","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\Projects.js",["357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373"],[],"import React, {useState, useEffect} from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport \"../stylesheets/projects.css\"\r\nimport {Container, Form, Button, Row, Col, Badge, FloatingLabel, Popover, Dropdown, ButtonGroup, DropdownButton, OverlayTrigger, FormControl, Modal, ListGroup, InputGroup } from 'react-bootstrap';\r\nimport image_S1 from '../images/abstract10.png'\r\n\r\n\r\nconst Projects = ({props}) => {\r\n\r\n    const [fullscreen, setFullscreen] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const handleShow = () => {setFullscreen(true); setShow(true);}\r\n    const [smShow, setSmShow] = useState(false);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const handleAlertClose = () =>{setShowAlert(false);}\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [alertTitle, setAlertTitle] = useState(\"\");\r\n    const [desigModal, setDesigModal] = useState(false);\r\n    const [phaseModal, setPhaseModal] = useState(false);\r\n    const [phaseUpdateModal, setPhaseUpdateModal] = useState(false);\r\n    const [txtInput, setTxtInput] = useState(\"\");\r\n    const [projectPhases, setProjectPhases] = useState([]);\r\n    const [allfriends, setAllfriends] = useState([]);\r\n    const [friends, setFriends] = useState([]);\r\n    const [members, setMembers] = useState([]);\r\n    const [membersIds, setMembersIds] = useState([]);\r\n    const [designationInput, setDesignationInput] = useState();\r\n    const [phaseInput, setPhaseInput] = useState(\"\");\r\n    const [phaseEditInput, setPhaseEditInput] = useState(\"\");\r\n    const [desigId, setDesigId] = useState(\"\");\r\n    const [projectSelected, setProjectSelected] = useState();\r\n    const [projectFiles, setProjectFiles] = useState([]);\r\n    const [projectDetails, setProjectDetails] = useState({\r\n        projectTitle : \"\",\r\n        projectDiscription : \"\",\r\n        startDate : \"\",\r\n        dueDate : \"\",\r\n        projectType : \"\",\r\n    });\r\n\r\n    let name, value;\r\n\r\n    const handleInputs = (e) =>{ \r\n        name = e.target.name;\r\n        value = e.target.value;\r\n        \r\n        setProjectDetails({...projectDetails, [name]:value});\r\n    }\r\n    \r\n    \r\n    const handleFiles = (e) =>{\r\n        let myfiles = e.target.files \r\n        console.log(myfiles)\r\n        setProjectFiles(myfiles);\r\n        \r\n    }\r\n\r\n    const handleSubmit = async (e) =>{\r\n        e.preventDefault();\r\n        const form = e.currentTarget;\r\n       \r\n        console.log(membersIds)\r\n        let addDesig = []\r\n\r\n        membersIds.map((membersIds)=>{\r\n            let singleId = document.getElementById(membersIds)\r\n            addDesig.push({id: membersIds, desg: singleId.value})\r\n        })\r\n        \r\n        let formData = new FormData();\r\n        formData.append('projectTitle', projectDetails.projectTitle)\r\n        formData.append('projectDiscription', projectDetails.projectDiscription)\r\n        formData.append('startDate', projectDetails.startDate)\r\n        formData.append('dueDate', projectDetails.dueDate)\r\n        formData.append('projectType', projectDetails.projectType)\r\n        formData.append('projectMembers', JSON.stringify(members))\r\n        formData.append('projectDesig', JSON.stringify(addDesig))\r\n        formData.append('projectPhases', JSON.stringify(projectPhases))\r\n        \r\n        for(let i=0; i < projectFiles.length; i++){\r\n            formData.append('projectFiles', projectFiles[i])\r\n        }\r\n          \r\n        console.log(projectFiles)\r\n        if(projectPhases.length > 0 && projectDetails.projectTitle && projectDetails.startDate &&  projectDetails.dueDate && projectDetails.projectDiscription && projectDetails.projectType){\r\n            try {\r\n                const userProfile = JSON.parse(localStorage.getItem('User'));\r\n                const tok = userProfile.tok;\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/createNewProject', {\r\n                    method: \"POST\",\r\n                    body: formData,\r\n                    headers: {\r\n                        Authorization: `Bearer ${tok}`,\r\n                      },\r\n                      \r\n                });\r\n\r\n                const data = await response.json();\r\n\r\n                if(response.status === 201 && data){\r\n                    setProjectDetails({\r\n                        projectTitle : \"\",\r\n                        projectDiscription : \"\",\r\n                        startDate : \"\",\r\n                        dueDate : \"\",\r\n                        projectType : \"\",\r\n                    })\r\n                    setProjectPhases([]);\r\n                    setMembers([]);\r\n                    form.reset();\r\n\r\n                    setAlertTitle(\"Alert\");\r\n                    setAlertMessage(\"Project created.\");\r\n                    setShowAlert(true);\r\n                    props.setFecthTasks(data);\r\n                    setShow(false);\r\n                }\r\n                \r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n            \r\n        }\r\n        else{\r\n            setAlertTitle(\"Alert\")\r\n            setAlertMessage(\"Please fill all the fields.\");\r\n            setShowAlert(true);\r\n        } \r\n\r\n    }\r\n\r\n\r\n    const getFriends = async () =>{\r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/getFriends', {\r\n                method: 'GET',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                  },\r\n            })\r\n\r\n            const data = await response.json();\r\n            console.log(data)\r\n            setAllfriends(data);\r\n            setFriends(data);\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getFriends();\r\n    },[])\r\n\r\n\r\n\r\n    const handelDesigInput = (e) =>{\r\n        let input = e.target.value\r\n\r\n        setDesignationInput(input)\r\n\r\n        console.log(designationInput)\r\n    }\r\n\r\n\r\n\r\n    const showSearchResult = () =>{\r\n\r\n        if(txtInput === \"\"){\r\n            \r\n            setAllfriends(friends) \r\n        }\r\n        else{\r\n            let newList = allfriends.filter((element) =>{\r\n                return element.name.toLowerCase().includes(txtInput.toLowerCase())\r\n            })\r\n\r\n            setAllfriends(newList) \r\n        }\r\n\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        showSearchResult();\r\n    },[txtInput])\r\n\r\n    const handelChange = (e) =>{\r\n        setTxtInput(e.target.value)\r\n        showSearchResult();\r\n    }\r\n\r\n\r\n    \r\n\r\n    const addMember = (e) =>{\r\n        let id = e.target.id;\r\n\r\n        if(projectSelected){\r\n            let getProfile = members.find(element => element._id === id);\r\n            if(getProfile){\r\n                projectSelected.members.map((element)=>{\r\n                    if(element.memberRef === id){\r\n                        window.alert(\"Exisiting Member\")\r\n                    }\r\n                })\r\n            }\r\n            else{\r\n                let getProfile = allfriends.find(element => element._id === id);\r\n        \r\n            setMembersIds(membersIds => [...membersIds, getProfile._id])\r\n    \r\n            setMembers(members => [...members, getProfile])\r\n    \r\n    \r\n            const newList = allfriends.filter(friendId => {\r\n                return friendId._id !== id;\r\n            })\r\n            \r\n            setAllfriends(newList) \r\n            }\r\n           \r\n           \r\n        }\r\n        else{\r\n            let getProfile = allfriends.find(element => element._id === id);\r\n        \r\n            setMembersIds(membersIds => [...membersIds, getProfile._id])\r\n    \r\n            setMembers(members => [...members, getProfile])\r\n    \r\n    \r\n            const newList = allfriends.filter(friendId => {\r\n                return friendId._id !== id;\r\n            })\r\n            \r\n            setAllfriends(newList)  \r\n        }\r\n\r\n             \r\n        \r\n    }\r\n\r\n    const removeMember = (e) =>{\r\n        let id = e.target.id;\r\n\r\n        let getProfile = members.find(element => element._id === id);\r\n        let getfriends = allfriends.find(element => element._id === id);\r\n\r\n        if(!getfriends){\r\n            console.log(\"done\")\r\n            setAllfriends(allfriends => [...allfriends, getProfile])\r\n        }\r\n        \r\n\r\n        const newList = members.filter(friendId => {\r\n            return friendId._id !== id;\r\n        })\r\n\r\n        const newIds = membersIds.filter(ids => {\r\n            return ids !== id\r\n        })\r\n        setMembersIds(newIds)\r\n        setMembers(newList)\r\n\r\n    }\r\n\r\n    const handleHideModal = () =>{\r\n        setShow(false);\r\n        setProjectSelected(null);\r\n    }\r\n\r\n\r\n\r\n    const changeDesig = (e) =>{\r\n        setDesigId(e.target.id )\r\n        setDesigModal(true)\r\n    }\r\n\r\n    const handleDeisgBtn = () =>{\r\n        console.log(designationInput)\r\n        let desigTag = document.getElementById(desigId)\r\n        desigTag.innerText = designationInput\r\n        setDesigModal(false)\r\n        // console.log(desigTag.innerText)\r\n    }\r\n\r\n\r\n\r\n    const handlePhasesInput = (e) =>{\r\n        const form = e.currentTarget;\r\n        e.preventDefault();\r\n       \r\n\r\n        console.log(phaseInput)\r\n        \r\n        if(projectPhases.length <= 9 && phaseInput){\r\n            let checkPhase = projectPhases.find(element1 => element1 === phaseInput);\r\n            if(checkPhase){\r\n                setAlertTitle(\"Alert\")\r\n                setAlertMessage(\"Phase title already exist, Choose a different title.\");\r\n                setShowAlert(true);\r\n            }\r\n            else{\r\n                if(phaseInput){\r\n                    setProjectPhases(projectPhases => [...projectPhases, phaseInput])\r\n                }\r\n                else{\r\n                    return;\r\n                }  \r\n            }\r\n        }\r\n        else{\r\n            setAlertTitle(\"Alert\")\r\n            setAlertMessage(\"Please add minimum 1 or maximum 10 phases per project.\");\r\n            setShowAlert(true);\r\n        }\r\n        \r\n        \r\n        setPhaseInput(\"\")\r\n        form.reset();\r\n    }\r\n\r\n    const removePhase = (e) =>{\r\n        let phaseName = e.target.id;\r\n        let removeSelectedPhase = projectPhases.filter(element1 => element1 !== phaseName);\r\n        setProjectPhases(removeSelectedPhase)\r\n    }\r\n\r\n\r\n    const editPhase = (e) =>{\r\n        let phaseName = e.target.id;\r\n        setPhaseEditInput(phaseName)\r\n        setPhaseUpdateModal(true)\r\n        console.log(phaseName)\r\n    }\r\n\r\n   const handlePhaseUpdate = (e) =>{\r\n        const form = e.currentTarget;\r\n        e.preventDefault();\r\n\r\n        const index = projectPhases.indexOf(phaseEditInput);\r\n        projectPhases[index] = phaseInput;\r\n\r\n        setPhaseInput(\"\")\r\n        form.reset();\r\n        setPhaseUpdateModal(false)\r\n   }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n        <ListGroup.Item className='newProjectBtn' onClick={handleShow}>\r\n            <i className='fa fa-plus'></i>\r\n            {' '}\r\n            Create Project         \r\n        </ListGroup.Item>\r\n     \r\n      <Modal show={show} fullscreen={fullscreen} onHide={handleHideModal}>\r\n        <Modal.Header closeButton className='modalHeader'>\r\n            <Modal.Title>Create New Project</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className='modalBody'>\r\n            <Form method='POST' onSubmit={handleSubmit} className='contactForm' name='projectForm' id='projectForm'>\r\n                <Container className='formCont'>\r\n                <Row>\r\n                    <Col>\r\n                    <Form.Group className=\"mb-3\" >\r\n                        <Form.Label >Title</Form.Label>\r\n                        <Form.Control type=\"text\" name='projectTitle' className='formInput' id='projectTitle' value={projectDetails.projectTitle} onChange={handleInputs} placeholder=\"Enter Project Title\" />\r\n                    </Form.Group>\r\n                    </Col>\r\n                    <Col>\r\n                    <Form.Group className=\"mb-3 inputGroup\" >\r\n                        <Form.Label >Type</Form.Label>\r\n                        <Form.Select name='projectType' id='projectType' onChange={handleInputs} value={projectDetails.projectType} className='formInput'>                \r\n                            <option className='listOption' value='N/A'>N/A</option>               \r\n                            <option className='listOption' value='Personal'>Personal</option>               \r\n                            <option className='listOption' value='Team'>Team</option>              \r\n                        </Form.Select>\r\n                    </Form.Group>\r\n  \r\n                </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>Discription</Form.Label>\r\n                        <Form.Control as=\"textarea\" rows={3} name='projectDiscription' className='formInput'id='projectDiscription' value={projectDetails.projectDiscription} onChange={handleInputs}/>\r\n                    </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                <Col>\r\n                <Form.Group className=\"mb-3 inputGroup\" >\r\n                    <Form.Label >Start Date</Form.Label>\r\n                    <Form.Control type=\"date\" name='startDate' id='startDate' className='formInput' value={projectDetails.startDate} onChange={handleInputs} placeholder=\"date\" />\r\n                </Form.Group>\r\n                </Col>\r\n                <Col>\r\n                <Form.Group className=\"mb-3 inputGroup\" >\r\n                    <Form.Label >Due Date</Form.Label>\r\n                    <Form.Control type=\"date\" name='dueDate' id='dueDate' className='formInput' value={projectDetails.dueDate} onChange={handleInputs} placeholder=\"date\" />\r\n                </Form.Group>\r\n                </Col>\r\n                \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>Add files</Form.Label>\r\n                        <Form.Control type=\"file\" multiple name='projectFiles' className='formInput' id='projectFiles' onChange={handleFiles}/>\r\n                    </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Label>Add Project Phases</Form.Label><Button className=\"addMembers\" onClick={()=>setPhaseModal(true)}><i className=\"fa fa-plus\"></i></Button>\r\n                        <ListGroup variant=\"flush\" className='teamlist'>\r\n\r\n                        {projectPhases.map((element, index)=>\r\n                            <ListGroup.Item as=\"li\" key={index} className='phaseListItem'>\r\n                                <Container>\r\n                                    <Row>\r\n                                        <Col sm lg={8}> Phase {index + 1} {element}  </Col>\r\n                                        <Col sm lg={2}>  <i className=\"fa fa-edit phaseEditBtn\" id={element} onClick={editPhase}></i>  <br></br> </Col>\r\n                                        <Col sm lg={2}> <i className=\"fa fa-trash phaseTrashBtn\" id={element} onClick={removePhase}></i>   </Col>\r\n                                    </Row>\r\n                                </Container>\r\n                            </ListGroup.Item>\r\n                        )}\r\n\r\n                        </ListGroup>                \r\n                    </Col>\r\n                </Row>\r\n                <br></br>\r\n                <Row>\r\n                    <Col>\r\n                    <Form.Label>Add Team Members </Form.Label><Button className=\"addMembers\" onClick={()=>setSmShow(true)}><i className=\"fa fa-plus\"></i></Button>\r\n                    <ListGroup variant=\"flush\" className='teamlist'>\r\n                        {members.map( (members, index) =>\r\n                            <ListGroup.Item as=\"li\" key={index}  className=\"d-flex justify-content-between align-items-start phaseListItem\" >\r\n                                <Container>\r\n                                <Row className=\"justify-content-md-center\">\r\n                                    <Col lg=\"3\">\r\n                                        <img \r\n                                            src={members.image}\r\n                                            onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\r\n                                            className=\"profileImages imageFloat\"\r\n                                        />\r\n                                    </Col>\r\n                                    <Col lg=\"3\">\r\n                                        <p className='memberListName'>{members.name}</p>\r\n                                    </Col>\r\n                                    <Col lg=\"4\">\r\n                                        Designation:\r\n                                    <InputGroup className=\"mb-3 \">\r\n                                        <Form.Control\r\n                                            placeholder=\"Enter Designation\"\r\n                                            aria-label=\"Recipient's username\"\r\n                                            aria-describedby=\"basic-addon2\"\r\n                                            id={members._id}\r\n                                            className=\"formInput\"\r\n                                            onChange={handelDesigInput}\r\n                                        />\r\n                                    </InputGroup>\r\n                                    </Col>\r\n                                    <Col lg=\"2\">\r\n                                        <i className=\"fa fa-trash phaseTrashBtn\" id={members._id} onClick={removeMember}></i>\r\n                                    </Col>\r\n                                    \r\n                                </Row>\r\n                                </Container>\r\n                            </ListGroup.Item>\r\n                        )}\r\n                        </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                    <br></br>\r\n                    <Row className=\"justify-content-md-center\">            \r\n                        <Col sm lg={5}>\r\n                            <Button className='projectSubmitBtn' variant=\"primary\" type=\"submit\">\r\n                                Create Project\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </Form>\r\n            <br></br>\r\n            <br></br>\r\n        </Modal.Body>\r\n      </Modal>\r\n\r\n\r\n\r\n\r\n      <Modal size=\"sm\" show={smShow} onHide={() => setSmShow(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n            <Modal.Title id=\"example-modal-sizes-title-sm\">\r\n                Add Members\r\n            </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>\r\n                <Container>\r\n                <Row >\r\n                    <Col>\r\n                        <InputGroup className=\"mb-3\">\r\n                        <Form.Control\r\n                            placeholder=\"Search Members\"\r\n                            aria-label=\"Recipient's username\"\r\n                            aria-describedby=\"basic-addon2\"\r\n                            value={txtInput}\r\n                            onChange={handelChange}\r\n                            className='formInput'\r\n                        />\r\n                    </InputGroup>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <ListGroup variant=\"flush\">\r\n                        {allfriends.map( (allfriends, index) =>\r\n                            <ListGroup.Item as=\"li\" key={index}  className=\"d-flex justify-content-between align-items-start membersList\" >\r\n                                <Row>\r\n                                    <Col>\r\n                                        <img src={allfriends.image}\r\n                                        onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\r\n                                        className=\"profileImages\"/>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <p>{allfriends.name}</p>\r\n                                    </Col>\r\n                                    <Col>\r\n                                    <i className=\"fa fa-plus addFriendIcon\" id={allfriends._id} onClick={addMember}></i>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                        )}\r\n                        </ListGroup>\r\n                    </Col>\r\n                </Row>\r\n                </Container>\r\n            </Modal.Body>\r\n            </Modal>\r\n\r\n\r\n\r\n                            {/* Changing Designation */}\r\n\r\n            {/* <Modal\r\n                size=\"sm\"\r\n                show={desigModal}\r\n                onHide={() => setDesigModal(false)}\r\n                aria-labelledby=\"example-modal-sizes-title-sm\"\r\n            >\r\n            <Modal.Header closeButton>\r\n            <Modal.Title id=\"example-modal-sizes-title-sm\">\r\n                Add Designation\r\n            </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Container>\r\n                <Row >\r\n                    <Col>\r\n\r\n                    <InputGroup className=\"mb-3\">\r\n                        <FormControl\r\n                            placeholder=\"Enter Designation\"\r\n                            aria-label=\"Recipient's username\"\r\n                            aria-describedby=\"basic-addon2\"\r\n                            // id={members._id}\r\n                            onChange={handelDesigInput}\r\n                        />\r\n                        <Button variant=\"outline-secondary\" className='searchBtn' id=\"button-addon2\" onClick={handleDeisgBtn}>\r\n                            <i className=\"fa fa-plus searchIcon\"></i>\r\n                        </Button>\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Row>\r\n                </Container>\r\n            </Modal.Body>\r\n            </Modal> */}\r\n\r\n\r\n\r\n                        {/* Phase Modal */}\r\n\r\n            <Modal size=\"sm\" show={phaseModal} onHide={() => setPhaseModal(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n            <Modal.Title id=\"example-modal-sizes-title-sm\">\r\n                Project Phases\r\n            </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>\r\n                <Container>\r\n                    <p>You can only add 1 to 10 phases per project.</p>\r\n                    <Form noValidate onSubmit={handlePhasesInput}>\r\n                        <Form.Group  controlId=\"validationCustom01\">\r\n                            <Form.Label>Phase Title</Form.Label>\r\n                            <Form.Control\r\n                                required\r\n                                type=\"text\"\r\n                                placeholder=\"Phase Title\"\r\n                                onChange={(e)=>setPhaseInput(e.target.value)} \r\n                                isValid={phaseInput}\r\n                                isInvalid={!phaseInput}\r\n                                className='formInput'\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Invalid Input\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <br></br>\r\n                        <Button type=\"submit\" className='phaseBtn'>\r\n                            <i className=\"fa fa-plus\"></i>\r\n                        </Button>\r\n                    </Form>\r\n                </Container>\r\n            </Modal.Body>\r\n            </Modal>\r\n\r\n\r\n\r\n                {/* Phase Edit Modal */}\r\n\r\n            <Modal  size=\"sm\" show={phaseUpdateModal} onHide={() => setPhaseUpdateModal(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n                 <Modal.Header closeButton className='modalHeader'>\r\n                    <Modal.Title id=\"example-modal-sizes-title-sm\">\r\n                        Edit Phases\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body className='modalBody'>\r\n                <Container>\r\n                    <Form noValidate  onSubmit={handlePhaseUpdate}>\r\n                        <Form.Group  controlId=\"validationCustom01\">\r\n                            <Form.Label>Phase Title</Form.Label>\r\n                            <Form.Control\r\n                                required\r\n                                type=\"text\"\r\n                                placeholder=\"Phase Title\"\r\n                                defaultValue={phaseEditInput}\r\n                                onChange={(e)=>setPhaseInput(e.target.value)} \r\n                                isValid={phaseInput}\r\n                                className='formInput'\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Invalid Input\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <br></br>\r\n                        <Button type=\"submit\" className='saveBtnPhase'>\r\n                            Save Changes\r\n                        </Button>\r\n                    </Form>\r\n                </Container>\r\n                </Modal.Body>\r\n            </Modal>\r\n            \r\n\r\n\r\n\r\n\r\n\r\n            {/* Alert Modal */}\r\n\r\n            <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>{alertMessage}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \r\n            </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n            \r\n                \r\n    </>\r\n  )\r\n}\r\n\r\nexport default Projects","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\UpdateProject.js",["374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390"],[],"import React, {useState, useEffect} from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport \"../stylesheets/projects.css\"\r\nimport {Container, Form, Button, Row, Col, Badge, FloatingLabel, Popover, Dropdown, ButtonGroup, DropdownButton, OverlayTrigger, FormControl, Modal, ListGroup, InputGroup } from 'react-bootstrap';\r\nimport image_S1 from '../images/abstract10.png'\r\n\r\n\r\nconst UpdateProject = ({projectData}) => {\r\n    \r\n    const [fullscreen, setFullscreen] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const handleAlertClose = () =>{setShowAlert(false);}\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [alertTitle, setAlertTitle] = useState(\"\");\r\n    const handleShow = () => {setFullscreen(true); setShow(true);}\r\n    const handleHideModal = () =>{setShow(false);}\r\n    const [smShow, setSmShow] = useState(false);\r\n    const [desigModal, setDesigModal] = useState(false);\r\n    const [phaseModaInUpdate, setPhaseModaInUpdate] = useState(false);  \r\n    const [phaseEditModalInUpdate, setPhaseEditModalInUpdate] = useState(false);\r\n    const [txtInput, setTxtInput] = useState(\"\");\r\n    const [updateProjectPhases, setUpdateProjectPhases] = useState([]);\r\n    const [allfriends, setAllfriends] = useState([]);\r\n    const [friends, setFriends] = useState([]);\r\n    const [members, setMembers] = useState([]);\r\n    const [membersIds, setMembersIds] = useState([]);\r\n    const [designationInput, setDesignationInput] = useState();\r\n    const [phaseInput, setPhaseInput] = useState(\"\");\r\n    const [phaseEditInput, setPhaseEditInput] = useState(\"\");\r\n    const [desigId, setDesigId] = useState(\"\");\r\n    const [projectFiles, setProjectFiles] = useState([]);\r\n    const [projectDetails, setProjectDetails] = useState({\r\n        projectTitle : \"\",\r\n        projectDiscription : \"\",\r\n        startDate : \"\",\r\n        dueDate : \"\",\r\n        projectType : \"\",\r\n    });\r\n\r\n    let name, value;\r\n\r\n    const handleInputs = (e) =>{ \r\n        name = e.target.name;\r\n        value = e.target.value;\r\n        \r\n        setProjectDetails({...projectDetails, [name]:value});\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    const handleFiles = (e) =>{\r\n        let myfiles = e.target.files \r\n        console.log(myfiles)\r\n        setProjectFiles(myfiles);\r\n        \r\n    }\r\n\r\n\r\n    const getFriends = async () =>{\r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/getFriends', {\r\n                method: 'GET',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                  },\r\n            })\r\n\r\n            const data = await response.json();\r\n            console.log(data)\r\n            setAllfriends(data);\r\n            setFriends(data);\r\n            console.log(data)\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getFriends();\r\n    },[])\r\n\r\n\r\n    const forUpdatingProject = () =>{       \r\n\r\n        if(projectData.currentProject){\r\n            let getMembers = []\r\n            let getMembersIds = []\r\n            projectData.currentProject.members.map((element)=>{\r\n                let findMember = projectData.allfriends.find(element1 => element1._id === element.memberRef)\r\n                getMembersIds.push(findMember._id)\r\n                let memberWithDesig = Object.assign(findMember, {designation: element.designation})\r\n                getMembers.push(memberWithDesig)\r\n            })\r\n            // console.log(projectSelected)\r\n            setMembersIds(getMembersIds)\r\n            setMembers(getMembers)\r\n            setUpdateProjectPhases(projectData.currentProject.projectPhases)\r\n\r\n           \r\n        }\r\n       \r\n    }\r\n\r\n    useEffect(()=>{\r\n        forUpdatingProject();\r\n    },[projectData.currentProject])\r\n\r\n\r\n\r\n    const handelDesigInput = (e) =>{\r\n        let input = e.target.value\r\n\r\n        setDesignationInput(input)\r\n\r\n        console.log(designationInput)\r\n    }\r\n\r\n\r\n\r\n    const showSearchResult = () =>{\r\n\r\n        if(txtInput === \"\"){\r\n            // console.log(\"AA\")\r\n            setAllfriends(friends) \r\n        }\r\n        else{\r\n            let newList = allfriends.filter((element) =>{\r\n                return element.name.toLowerCase().includes(txtInput.toLowerCase())\r\n            })\r\n\r\n            setAllfriends(newList) \r\n        }\r\n\r\n        \r\n\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        showSearchResult();\r\n    },[txtInput])\r\n\r\n    const handelChange = (e) =>{\r\n        setTxtInput(e.target.value)\r\n        // console.log(txtInput)\r\n        showSearchResult();\r\n    }\r\n\r\n\r\n    \r\n\r\n    const addMember = (e) =>{\r\n        let id = e.target.id;\r\n\r\n        if(projectData.currentProject){\r\n            let getProfile = members.find(element => element._id === id);\r\n            if(getProfile){\r\n                projectData.currentProject.members.map((element)=>{\r\n                    if(element.memberRef === id){\r\n                        window.alert(\"Exisiting Member\")\r\n                    }\r\n                })\r\n            }\r\n            else{\r\n                let getProfile = projectData.allfriends.find(element => element._id === id);\r\n        \r\n            setMembersIds(membersIds => [...membersIds, getProfile._id])\r\n    \r\n            setMembers(members => [...members, getProfile])\r\n    \r\n    \r\n            const newList = projectData.allfriends.filter(friendId => {\r\n                return friendId._id !== id;\r\n            })\r\n            \r\n            setAllfriends(newList) \r\n            }\r\n           \r\n           \r\n        }\r\n        else{\r\n            let getProfile = projectData.allfriends.find(element => element._id === id);\r\n        \r\n            setMembersIds(membersIds => [...membersIds, getProfile._id])\r\n    \r\n            setMembers(members => [...members, getProfile])\r\n    \r\n    \r\n            const newList = projectData.allfriends.filter(friendId => {\r\n                return friendId._id !== id;\r\n            })\r\n            \r\n            setAllfriends(newList)  \r\n        }\r\n\r\n             \r\n        \r\n    }\r\n\r\n    const removeMember = (e) =>{\r\n        let id = e.target.id;\r\n\r\n        let getProfile = members.find(element => element._id === id);\r\n        let getfriends = allfriends.find(element => element._id === id);\r\n\r\n        if(!getfriends){\r\n            console.log(\"done\")\r\n            setAllfriends(allfriends => [...allfriends, getProfile])\r\n        }\r\n        \r\n\r\n        const newList = members.filter(friendId => {\r\n            return friendId._id !== id;\r\n        })\r\n\r\n        const newIds = membersIds.filter(ids => {\r\n            return ids !== id\r\n        })\r\n        setMembersIds(newIds)\r\n        // console.log(newList)\r\n        setMembers(newList)\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    const removeFile = (e) =>{\r\n        let fileId = e.target.id;\r\n\r\n        let removeSelectedFile = projectData.currentProject.projectFiles.filter(element1 => element1._id !== fileId)\r\n\r\n        projectData.currentProject.projectFiles = removeSelectedFile\r\n\r\n        // let listedFiles = document.getElementById(\"filesList\")\r\n        let selectedfile = document.getElementById(\"aa\"+fileId)\r\n        console.log(selectedfile)\r\n        \r\n        while (selectedfile.hasChildNodes()) {\r\n            selectedfile.removeChild(selectedfile.firstChild);\r\n        }\r\n        // let x = listedFiles.removeChild(selectedfile);\r\n        \r\n    }\r\n\r\n   \r\n\r\n    const handleUpdateProject = async (e) =>{\r\n        e.preventDefault();\r\n        console.log(membersIds)\r\n        let addDesig = []\r\n\r\n        membersIds.map((membersIds)=>{\r\n            let singleId = document.getElementById(membersIds)\r\n            addDesig.push({memberRef: membersIds, designation: singleId.innerText})\r\n        })\r\n\r\n        let startDate = document.getElementById(\"startDate\");\r\n        let dueDate = document.getElementById(\"dueDate\");\r\n        let projectDiscription = document.getElementById(\"projectDiscription\");\r\n        let projectTitle = document.getElementById(\"projectTitle\");\r\n        let projectType = document.getElementById(\"projectType\");\r\n        \r\n        \r\n        let formData = new FormData();\r\n        formData.append('projectTitle', projectTitle.value)\r\n        formData.append('projectDiscription', projectDiscription.value)\r\n        formData.append('startDate', startDate.value)\r\n        formData.append('dueDate', dueDate.value)\r\n        formData.append('projectType', projectType.value)\r\n        formData.append('projectId', JSON.stringify(projectData.currentProject._id))\r\n        formData.append('projectMembers', JSON.stringify(members))\r\n        formData.append('projectDesig', JSON.stringify(addDesig))\r\n        formData.append('existingFiles', JSON.stringify(projectData.currentProject.projectFiles))\r\n        formData.append('projectPhases', JSON.stringify(updateProjectPhases))\r\n        for(let i=0; i < projectFiles.length; i++){\r\n            formData.append('projectFiles', projectFiles[i])\r\n        }\r\n        \r\n        console.log(updateProjectPhases)\r\n\r\n        if(updateProjectPhases.length > 0){\r\n            try {\r\n                const userProfile = JSON.parse(localStorage.getItem('User'));\r\n                const tok = userProfile.tok;\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/updatingProject', {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        Authorization: `Bearer ${tok}`,\r\n                      },\r\n                    body: formData\r\n                      \r\n                });\r\n        \r\n                const data = await response.json();\r\n    \r\n                if(response.status === 201 && data){\r\n                    setAlertTitle(\"Alert\");\r\n                    setAlertMessage(\"Project Updated.\");\r\n                    setShowAlert(true);\r\n                    projectData.setFecthTasks(data);\r\n                }\r\n                \r\n            } catch (error) {\r\n               console.log(error); \r\n            }\r\n        }\r\n        else{\r\n            setAlertTitle(\"Alert\")\r\n            setAlertMessage(\"Please fill all the fields.\");\r\n            setShowAlert(true);\r\n        }\r\n        \r\n       \r\n\r\n    }\r\n\r\n    const changeDesig = (e) =>{\r\n        setDesigId(e.target.id )\r\n        setDesigModal(true)\r\n    }\r\n\r\n    const handleDeisgBtn = () =>{\r\n        console.log(designationInput)\r\n        let desigTag = document.getElementById(desigId)\r\n        desigTag.innerText = designationInput\r\n        setDesigModal(false)\r\n        // console.log(desigTag.innerText)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n   const handlePhasesInputInUpdate = (e) =>{\r\n        const form = e.currentTarget;\r\n        e.preventDefault();\r\n\r\n        if(updateProjectPhases.length <= 9 && phaseInput){\r\n            let checkPhase = updateProjectPhases.find(element1 => element1.PhaseTitle === phaseInput);\r\n            if(checkPhase){\r\n                setAlertTitle(\"Alert\")\r\n                setAlertMessage(\"Phase title already exist, Choose a different title.\");\r\n                setShowAlert(true);\r\n            }\r\n            else{\r\n                if(phaseInput){\r\n                    let phaseObj = {\r\n                        PhaseTitle: phaseInput,\r\n                        PhaseNum: \"\"\r\n                    }\r\n                    setUpdateProjectPhases(updateProjectPhases => [...updateProjectPhases, phaseObj])\r\n                }\r\n                else{\r\n                    return;\r\n                }  \r\n            }\r\n        }\r\n        else{\r\n            setAlertTitle(\"Alert\")\r\n            setAlertMessage(\"Please add minimum 1 or maximum 10 phases per project.\");\r\n            setShowAlert(true);\r\n        }\r\n        \r\n        setPhaseInput(\"\")\r\n        form.reset();\r\n    }\r\n\r\n\r\n   const removePhaseInUpdate = (e) =>{\r\n        let phaseName = e.target.id;\r\n        let removeSelectedPhase = updateProjectPhases.filter(element1 => element1.PhaseTitle !== phaseName);\r\n        setUpdateProjectPhases(removeSelectedPhase)\r\n   }\r\n\r\n      \r\n   const editPhaseInUpdate = (e) =>{\r\n        let phaseName = e.target.id;\r\n        setPhaseEditInput(phaseName)\r\n        setPhaseEditModalInUpdate(true)\r\n   }\r\n\r\n\r\n   const handlePhaseEditInUpdate = (e) =>{\r\n        const form = e.currentTarget;\r\n        e.preventDefault();\r\n        console.log(phaseInput)\r\n\r\n        let checkIndex;\r\n        \r\n        updateProjectPhases.map((element, index)=>{\r\n            if(element.PhaseTitle === phaseEditInput){\r\n                checkIndex = index;\r\n            };\r\n        });\r\n\r\n        updateProjectPhases[checkIndex].PhaseTitle = phaseInput;\r\n\r\n        setPhaseInput(\"\")\r\n        form.reset();\r\n        setPhaseEditModalInUpdate(false)\r\n   }\r\n\r\n  return (\r\n    <>\r\n        \r\n        \r\n        <ListGroup.Item className='selectedListItem' onClick={handleShow}>\r\n            <i className='fa fa-edit chat-icon'></i>         \r\n            <br></br>\r\n            Update Project\r\n        </ListGroup.Item>\r\n     \r\n        <Modal show={show} fullscreen={fullscreen} onHide={handleHideModal}>\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title>Update Project</Modal.Title>\r\n            </Modal.Header>\r\n        <Modal.Body className='modalBody'>\r\n            {projectData.currentProject ?\r\n            \r\n            <Form method='POST' className='contactForm' name='projectForm' id='projectForm'>\r\n            <Container className='formCont'>\r\n                <Row>\r\n                    <Col>\r\n                    <Form.Group className=\"mb-3\" >\r\n                        <Form.Label className='formTxt'>Update Title</Form.Label>\r\n                        <Form.Control type=\"text\" name='projectTitle' className='formInput' id='projectTitle' defaultValue={projectData.currentProject.projectTitle} placeholder=\"Enter Task\" />\r\n                    </Form.Group>\r\n                    </Col>\r\n                    <Col>\r\n                    <Form.Group className=\"mb-3 inputGroup\" >\r\n                        <Form.Label className='formTxt'>Type</Form.Label>\r\n                        <Form.Select name='projectType' id='projectType' className='formInput' defaultValue={projectData.currentProject.projectType}>                \r\n                            <option className='listOption' value='N/A'>N/A</option>               \r\n                            <option className='listOption' value='Personal'>Personal</option>               \r\n                            <option className='listOption' value='Team'>Team</option>              \r\n                        </Form.Select>\r\n                    </Form.Group>\r\n  \r\n                </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>Discription</Form.Label>\r\n                        <Form.Control as=\"textarea\" rows={3} name='projectDiscription' className='formInput' id='projectDiscription' defaultValue={projectData.currentProject.projectDiscription}/>\r\n                    </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                <Col>\r\n                <Form.Group className=\"mb-3 inputGroup\" >\r\n                    <Form.Label className='formTxt'>Start Date</Form.Label>\r\n                    <Form.Control type=\"date\" name='startDate' id='startDate' className='formInput' defaultValue={projectData.currentProject.startDate.substring(0,10)} placeholder=\"date\" />\r\n                </Form.Group>\r\n                </Col>\r\n                <Col>\r\n                <Form.Group className=\"mb-3 inputGroup\" >\r\n                    <Form.Label className='formTxt'>Due Date</Form.Label>\r\n                    <Form.Control type=\"date\" name='dueDate' id='dueDate' className='formInput' defaultValue={projectData.currentProject.dueDate.substring(0,10)} placeholder=\"date\" />\r\n                </Form.Group>\r\n                </Col>\r\n                \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>Add files</Form.Label>\r\n                        <Form.Control type=\"file\" multiple name='projectFiles' id='projectFiles' className='formInput' onChange={handleFiles}/>\r\n                    </Form.Group>\r\n\r\n                    {projectData.currentProject.projectFiles.length > 0 ?\r\n                    <>\r\n                    <Form.Label>Existing Files</Form.Label>\r\n                    <ListGroup className=\"filesList\" >\r\n                        {projectData.currentProject.projectFiles.map((allfiles, index) =>\r\n                        <ListGroup.Item\r\n                            as=\"li\"\r\n                            className=\"d-flex justify-content-between align-items-start singlefile\"\r\n                            key={index}\r\n                            id={\"aa\"+allfiles._id}\r\n                        >\r\n                        <div className=\"ms-2 me-auto\">\r\n                        <div className=\"fw-bold\">{allfiles.fileName}</div>\r\n                        {Math.floor(allfiles.fileSize/1000000) + 'MB'}\r\n                        </div>\r\n                        \r\n                        <i className=\"fa fa-trash phaseTrashBtn\" id={allfiles._id} onClick={removeFile}></i>\r\n                        \r\n                        </ListGroup.Item>\r\n                        )}\r\n                    </ListGroup>\r\n                    </>\r\n                    :\r\n\r\n                    <ListGroup>\r\n                            <ListGroup.Item className='singlefile'>No Existing Files</ListGroup.Item>\r\n                    </ListGroup>\r\n                    }\r\n                    </Col>\r\n                </Row>\r\n                <br></br>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Label>Add Project Phases</Form.Label><Button className=\"addMembers\" onClick={()=>setPhaseModaInUpdate(true)}><i className=\"fa fa-plus\"></i></Button>\r\n                        <ListGroup variant=\"flush\" className='teamlist'>\r\n\r\n                        {updateProjectPhases.map((element, index)=>\r\n                            <ListGroup.Item as=\"li\" key={index} className='phaseListItem'>\r\n                                 <Container>\r\n                                    <Row>\r\n                                        <Col sm lg={8}> Phase {index + 1} {element.PhaseTitle}   </Col>\r\n                                        <Col sm lg={2}>  <i className=\"fa fa-edit phaseEditBtn\" id={element.PhaseTitle} onClick={editPhaseInUpdate}></i>  <br></br> </Col>\r\n                                        <Col sm lg={2}> <i className=\"fa fa-trash phaseTrashBtn\" id={element.PhaseTitle} onClick={removePhaseInUpdate}></i>     </Col>\r\n                                    </Row>\r\n                                </Container>     \r\n                            </ListGroup.Item>\r\n                        )}\r\n\r\n                        </ListGroup>                \r\n                    </Col>\r\n                </Row>\r\n                <br></br>\r\n                <Row>\r\n                    <Col>\r\n                    <Form.Label>Add Team Members</Form.Label><Button className='addMembers' onClick={()=>setSmShow(true)}><i className=\"fa fa-plus\"></i></Button>\r\n                    <ListGroup variant=\"flush\" className='teamlist'>\r\n                        {members.map( (members, index) =>\r\n                            <ListGroup.Item as=\"li\" key={index}  className=\"d-flex justify-content-between align-items-start phaseListItem\">\r\n                                <Container>\r\n                                <Row className=\"justify-content-md-center\">\r\n                                    <Col lg=\"3\">\r\n                                        <img \r\n                                            src={members.image}\r\n                                            onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\r\n                                            className=\"profileImages\"\r\n                                        />\r\n                                    </Col>\r\n                                    <Col lg=\"3\">\r\n                                        <h6>{members.name}</h6>\r\n                                        \r\n                                    </Col>\r\n                                    <Col lg=\"4\">\r\n                                    {members.designation ?\r\n                                        <p id={members._id} onClick={changeDesig} className=\"changeDesig\">{members.designation}</p> \r\n                                    :\r\n                                        <p id={members._id} onClick={changeDesig} className=\"changeDesig\">Add Designation</p> \r\n                                    }                                   \r\n                                    </Col>\r\n                                    <Col lg=\"2\">\r\n                                        <i className=\"fa fa-trash phaseTrashBtn\" id={members._id} onClick={removeMember}></i>\r\n                                    </Col>\r\n                                </Row>\r\n                                </Container>\r\n                            </ListGroup.Item>\r\n                        )}\r\n\r\n                        </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                    <br></br>\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <Col sm lg={5}>\r\n                        <Button className='projectSubmitBtn' variant=\"primary\" type=\"submit\" onClick={handleUpdateProject}>\r\n                            Update Project\r\n                        </Button>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n                </Container>\r\n            </Form>\r\n            \r\n            :\r\n                <p>No selected Project</p>\r\n            }\r\n                \r\n                <br></br>\r\n                <br></br>\r\n        </Modal.Body>\r\n      </Modal>\r\n\r\n      \r\n\r\n\r\n      {/* Add Members */}\r\n\r\n      <Modal size=\"sm\" show={smShow} onHide={() => setSmShow(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">Add Members</Modal.Title>           \r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>\r\n                <Container>\r\n                <Row >\r\n                    <Col>\r\n                        <InputGroup className=\"mb-3\">\r\n                        <Form.Control\r\n                            placeholder=\"Search Members\"\r\n                            aria-label=\"Recipient's username\"\r\n                            aria-describedby=\"basic-addon2\"\r\n                            value={txtInput}\r\n                            onChange={handelChange}\r\n                            className='formInput'\r\n                        />\r\n                    </InputGroup>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <ListGroup variant=\"flush\">\r\n                        {allfriends.map( (allfriends, index) =>\r\n                            <ListGroup.Item as=\"li\" key={index}  className=\"d-flex justify-content-between align-items-start membersList\" >\r\n                                <Row>\r\n                                    <Col>\r\n                                        <img \r\n                                            src={allfriends.image}\r\n                                            onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\r\n                                            className=\"profileImages\"\r\n                                        />\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <p>{allfriends.name}</p>\r\n                                    </Col>\r\n                                    <Col>\r\n                                    <i className=\"fa fa-plus addFriendIcon\" id={allfriends._id} onClick={addMember}></i>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                        )}\r\n                        </ListGroup>\r\n                    </Col>\r\n                </Row>\r\n                </Container>\r\n            </Modal.Body>\r\n            </Modal>\r\n\r\n\r\n\r\n                            {/* Changing Designation */}\r\n\r\n            <Modal size=\"sm\" show={desigModal} onHide={() => setDesigModal(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n              <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">\r\n                    Add Designation\r\n                </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body className='modalBody'>\r\n                <Container>\r\n                <Row >\r\n                    <Col>\r\n\r\n                    <InputGroup className=\"mb-3\">\r\n                        <FormControl\r\n                            placeholder=\"Enter Designation\"\r\n                            aria-label=\"Recipient's username\"\r\n                            aria-describedby=\"basic-addon2\"\r\n                            className='formInput'\r\n                            onChange={handelDesigInput}\r\n                        />\r\n                        <Button variant=\"outline-secondary\" className='searchBtn' id=\"button-addon2\" onClick={handleDeisgBtn}>\r\n                            <i className=\"fa fa-plus\"></i>\r\n                        </Button>\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Row>\r\n                </Container>\r\n            </Modal.Body>\r\n            </Modal>\r\n\r\n\r\n\r\n                      \r\n\r\n            \r\n                {/* Phase Modal In Update*/}\r\n\r\n\r\n            <Modal size=\"sm\" show={phaseModaInUpdate} onHide={() => setPhaseModaInUpdate(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n            <Modal.Title id=\"example-modal-sizes-title-sm\">\r\n                Project Phases\r\n            </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>\r\n                <Container>\r\n                    <p>You can only add 1 to 10 phases per project.</p>\r\n                    <Form noValidate  onSubmit={handlePhasesInputInUpdate}>\r\n                        <Form.Group  controlId=\"validationCustom01\">\r\n                            <Form.Label>Phase Title</Form.Label>\r\n                            <Form.Control\r\n                                required\r\n                                type=\"text\"\r\n                                placeholder=\"Phase Title\"\r\n                                onChange={(e)=>setPhaseInput(e.target.value)} \r\n                                isValid={phaseInput}\r\n                                className=\"formInput\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Invalid Input\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <br></br>\r\n                        <Button type=\"submit\" className='phaseBtn'>\r\n                            <i className=\"fa fa-plus\"></i>\r\n                        </Button>\r\n                    </Form>\r\n                </Container>\r\n            </Modal.Body>\r\n            </Modal>\r\n\r\n\r\n\r\n\r\n             {/* Phase Edit Modal In Update*/}\r\n\r\n             <Modal size=\"sm\" show={phaseEditModalInUpdate} onHide={() => setPhaseEditModalInUpdate(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n               <Modal.Header closeButton className='modalHeader'>\r\n                    <Modal.Title id=\"example-modal-sizes-title-sm\">\r\n                        Edit Phases\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body className='modalBody'>\r\n                <Container>\r\n                    <Form noValidate  onSubmit={handlePhaseEditInUpdate}>\r\n                        <Form.Group  controlId=\"validationCustom01\">\r\n                            <Form.Label>Phase Title </Form.Label>\r\n                            <Form.Control\r\n                                required\r\n                                type=\"text\"\r\n                                placeholder=\"Phase Title\"\r\n                                defaultValue={phaseEditInput}\r\n                                onChange={(e)=>setPhaseInput(e.target.value)} \r\n                                isValid={phaseInput}\r\n                                className=\"formInput\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Invalid Input\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <br></br>\r\n                        <Button type=\"submit\" className='saveBtnPhase'>\r\n                            Save Changes\r\n                        </Button>\r\n                    </Form>\r\n                </Container>\r\n                </Modal.Body>\r\n            </Modal>\r\n\r\n\r\n\r\n\r\n            {/* Alert Modal */}\r\n\r\n            <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>{alertMessage}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \r\n            </Modal.Footer>\r\n            </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UpdateProject","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\DeleteNote.js",["391","392","393","394","395","396","397","398","399","400","401","402","403","404","405"],[],"import React, {useState, useLayoutEffect, useEffect} from 'react'\r\nimport '../stylesheets/notes.css'\r\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\n\r\n\r\n\r\nconst DeleteNote = ({noteData}) => {\r\n\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const handleAlertClose = () =>{setShowAlert(false);}\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [alertTitle, setAlertTitle] = useState(\"\");\r\n    const [noteId, setNoteId] = useState(\"\");\r\n\r\n    const setNoteForm = () =>{\r\n        if(noteData){\r\n            setAlertTitle(noteData.currentNote.noteTitle);\r\n            setAlertMessage('Click on \"Delete\" button will permanently delete the selected note.');\r\n            setNoteId(noteData.currentNote._id);\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setNoteForm();\r\n    },[]);\r\n\r\n\r\n    const handleDeleteBtn = async () =>{\r\n\r\n        if(alertTitle && noteId){\r\n            try {\r\n                const userProfile = JSON.parse(localStorage.getItem('User'));\r\n                const tok = userProfile.tok;\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/deleteCurrentNote', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        Authorization: `Bearer ${tok}`,\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({noteId}),\r\n                })\r\n    \r\n                const data = await response.json();\r\n    \r\n                if(response.status === 201 && data){\r\n                    setShowAlert(false);\r\n                    noteData.setFecthTasks(data);\r\n                }\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }else{\r\n            setAlertTitle(\"Alert\");\r\n            setAlertMessage(\"Please fill the form correctly.\");\r\n            setShowAlert(true);\r\n        }\r\n\r\n    }\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n    {/* Alert Modal */}\r\n        <ListGroup.Item className='selectedListBtn' onClick={() => setShowAlert(true)}>\r\n          <i className='fa fa-trash'></i>         \r\n          <br></br>\r\n          Delete Note\r\n        </ListGroup.Item>\r\n\r\n        <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>{alertMessage}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                {noteId ?\r\n                    <Button className='saveBtn' onClick={handleDeleteBtn}>Delete</Button> \r\n                :\r\n                    <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default DeleteNote","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\ProjectNotification.js",["406","407","408","409","410","411","412","413","414","415","416","417"],[],"import React, {useState, useLayoutEffect, useEffect} from 'react'\r\nimport '../stylesheets/displayProjects.css'\r\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\nimport Toast from 'react-bootstrap/Toast';\r\n\r\nconst ProjectNotification = ({projectData}) => {\r\n\r\n    const [fullscreen, setFullscreen] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const handleShow = () => {setFullscreen(true); setShow(true);}\r\n    const handleHideModal = () =>{setShow(false);}\r\n    const [smShow, setSmShow] = useState(false);\r\n    const [projectNotifications, setProjectNotifications] = useState([]);\r\n\r\n\r\n\r\n    const getNotifications = async () =>{\r\n        if(projectData){\r\n            let selectedProjectId = projectData._id;\r\n            try {\r\n                const userProfile = JSON.parse(localStorage.getItem('User'));\r\n                const tok = userProfile.tok;\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/getProjectNotifications', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        Authorization: `Bearer ${tok}`,\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({selectedProjectId}),\r\n                })\r\n    \r\n                const data = await response.json();\r\n                setProjectNotifications(data);\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n  \r\n\r\n    useEffect(()=>{\r\n        getNotifications();\r\n    },[])\r\n\r\n\r\n    const deleteAllNotifications = async () =>{\r\n        if(projectData){\r\n            let selectedProjectId = projectData._id;\r\n            try {\r\n                const userProfile = JSON.parse(localStorage.getItem('User'));\r\n                const tok = userProfile.tok;\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/deleteProjectNotifications', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        Authorization: `Bearer ${tok}`,\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({selectedProjectId}),\r\n                })\r\n    \r\n                const data = await response.json();\r\n\r\n                if(response.status === 201 && data){\r\n                    setSmShow(false);\r\n                    setShow(false);\r\n                }\r\n               \r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <ListGroup.Item className='selectedListItem' onClick={handleShow}>\r\n                <i className='fa fa-bell chat-icon'></i>         \r\n                <br></br>\r\n                Project Notifications\r\n            </ListGroup.Item>\r\n            \r\n            <Modal show={show} fullscreen={fullscreen} onHide={handleHideModal} backdrop=\"static\" keyboard={false} >\r\n                <Modal.Header closeButton className='modalHeader'>\r\n                    {projectData ?\r\n                        <Modal.Title>{projectData.projectTitle}</Modal.Title>\r\n                    :\r\n                        <Modal.Title>Selected Project</Modal.Title>\r\n                    } \r\n                </Modal.Header>\r\n                <Modal.Body className='modalBodyStatic'>\r\n                {projectNotifications ?\r\n                    <Container>\r\n                        <Row className=\"justify-content-md-center\">\r\n                            {projectNotifications.map((element, index)=>\r\n                                <Col sm lg=\"4\" key={index}>\r\n                                    <Toast className='toastMain'>\r\n                                        <Toast.Header className='toastHeader' closeButton={false}>\r\n                                            <img src={element.memberImage} className=\"rounded me-2 notificationImage\" alt=\"\" />\r\n                                            <strong className=\"me-auto\">{element.memberName}</strong>\r\n                                            <small>{element.notificationDate.substring(0,10)}</small>\r\n                                        </Toast.Header>\r\n                                        <Toast.Body>\r\n                                            \"Phase Number {element.phaseNum} : {element.phaseTitle}\" has been completed.\r\n                                        </Toast.Body>\r\n                                    </Toast>\r\n                                </Col>\r\n                            )}\r\n                        </Row>\r\n                    </Container>\r\n                :\r\n                    <Container></Container>\r\n                }\r\n                </Modal.Body>\r\n                <Modal.Footer className='modalFooter'>\r\n                    <Button className='saveBtn' onClick={() => setSmShow(true)}>Delete All Notification</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n\r\n\r\n            {/* Delete All Notifications Modal  */}\r\n\r\n\r\n        <Modal size=\"sm\" show={smShow} onHide={() => setSmShow(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                {projectData ?\r\n                    <Modal.Title id=\"example-modal-sizes-title-sm\">{projectData.projectTitle}</Modal.Title>\r\n                  :\r\n                    <Modal.Title id=\"example-modal-sizes-title-sm\">Selected Project</Modal.Title>\r\n                }  \r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                {projectNotifications.length > 0 ?\r\n                    <p>Click on <b>Proceed</b> button will permanently delete all notifications for this project.</p>\r\n                :\r\n                    <p>No new notifications.</p>\r\n                }\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                {projectNotifications.length > 0 ?\r\n                    <Button className='saveBtn' onClick={deleteAllNotifications}>Proceed</Button>\r\n                :\r\n                    <Button className='saveBtn' onClick={() => setSmShow(false)}>Ok</Button>\r\n                }\r\n                \r\n            </Modal.Footer>\r\n        </Modal>\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProjectNotification","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\ProjectChat.js",["418","419","420","421","422","423","424","425","426","427","428","429","430","431","432"],[],"import React, {useState, useContext, useEffect} from 'react'\r\nimport '../stylesheets/displayProjects.css'\r\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\n\r\n\r\nconst ProjectChat = ({projectData}) => {\r\n    const [show, setShow] = useState(false);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const handleAlertClose = () =>{setShowAlert(false);}\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [alertTitle, setAlertTitle] = useState(\"\");\r\n\r\n    const handleCreateChat = async (e) =>{\r\n        let selectedProjectId = e.target.id;\r\n\r\n        try {\r\n            const userProfile = JSON.parse(localStorage.getItem('User'));\r\n            const tok = userProfile.tok;\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/createProjectChat', {\r\n                method: 'POST',\r\n                headers: {\r\n                    Authorization: `Bearer ${tok}`,\r\n                    'Content-Type' : 'application/json' \r\n                },\r\n                body: JSON.stringify({selectedProjectId}),\r\n            })\r\n\r\n            const data = await response.json();\r\n\r\n            if(response.status === 201 && data){\r\n                setAlertTitle(\"Alert\")\r\n                setAlertMessage(data.message);\r\n                setShowAlert(true);\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        setShow(false);\r\n    }\r\n  \r\n  return (\r\n    <>\r\n        <ListGroup.Item className='selectedListItem' onClick={() => setShow(true)}>\r\n            <i className='far fa-comments'></i>         \r\n            <br></br>\r\n            Create Group Chat\r\n        </ListGroup.Item>\r\n\r\n        <Modal show={show} onHide={() => setShow(false)} >\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                {projectData ?\r\n                    <Modal.Title>{projectData.projectTitle}</Modal.Title>\r\n                :\r\n                    <Modal.Title>Selected Project</Modal.Title>\r\n                }   \r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>Click on <b>Create Chat</b> button will create a group chat for this project which will \r\n                include all project members.</p>\r\n                <p>For adding or removing members please update project members in <b>Update project</b> section.</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                {projectData ?\r\n                    <Button className='saveBtn' id={projectData._id} onClick={handleCreateChat}>Create Chat</Button>\r\n                    :\r\n                    <Button className='saveBtn'>Ok</Button>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal> \r\n\r\n\r\n\r\n                {/* Alert Modal */}\r\n\r\n        <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>{alertMessage}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \r\n            </Modal.Footer>\r\n        </Modal>   \r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProjectChat","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\UpdateNotes.js",["433","434","435","436","437","438","439","440","441","442","443","444","445"],[],"import React, {useState, useContext, useEffect} from 'react'\r\nimport '../stylesheets/notes.css'\r\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\n\r\n\r\nconst UpdateNotes = ({noteData}) => {\r\n\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const handleAlertClose = () =>{setShowAlert(false);}\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [alertTitle, setAlertTitle] = useState(\"\");\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [noteTitle, setNoteTitle] = useState(\"\");\r\n    const [noteText, setNoteText] = useState(\"\");\r\n    const [noteId, setNoteId] = useState(\"\");\r\n\r\n\r\n    const setNoteForm = () =>{\r\n        if(noteData){\r\n            setNoteTitle(noteData.currentNote.noteTitle);\r\n            setNoteText(noteData.currentNote.noteText);\r\n            setNoteId(noteData.currentNote._id);\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setNoteForm();\r\n    },[])\r\n\r\n\r\n\r\n    const handleNoteSubmit = async (e) =>{\r\n        e.preventDefault();\r\n        if(noteTitle && noteText){\r\n            try {\r\n                const userProfile = JSON.parse(localStorage.getItem('User'));\r\n                const tok = userProfile.tok;\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/updateCurrentNote', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        Authorization: `Bearer ${tok}`,\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({noteTitle, noteText, noteId}),\r\n                })\r\n    \r\n                const data = await response.json();\r\n    \r\n                if(response.status === 201 && data){\r\n                    setAlertTitle(\"Alert\");\r\n                    setAlertMessage(\"Note Created\");\r\n                    setShowAlert(true);\r\n                    setNoteTitle(\"\");\r\n                    setNoteText(\"\");\r\n                    setModalShow(false);\r\n                    noteData.setFecthTasks(data);\r\n                }\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }else{\r\n            setAlertTitle(\"Alert\");\r\n            setAlertMessage(\"Please fill the form correctly.\");\r\n            setShowAlert(true);\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n  return (\r\n    <>\r\n        <ListGroup.Item className='selectedListBtn' onClick={() => setModalShow(true)}>\r\n          <i className='fa fa-edit'></i>         \r\n          <br></br>\r\n          Edit Note\r\n        </ListGroup.Item>\r\n\r\n        <Modal size=\"lg\" show={modalShow} onHide={() => setModalShow(false)} backdrop=\"static\" keyboard={false} aria-labelledby=\"contained-modal-title-vcenter\" centered >\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">Modal heading </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <Container>\r\n                    <Form method='POST'>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Label>Title</Form.Label>\r\n                            <Form.Control type=\"text\" className='formInput' placeholder=\"Title\" value={noteTitle} onChange={(e)=>setNoteTitle(e.target.value)} />\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Label>Note</Form.Label>\r\n                            <Form.Control as=\"textarea\" className='formInput' rows={3} value={noteText} onChange={(e)=>setNoteText(e.target.value)} />\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn' variant=\"primary\" type=\"submit\" onClick={handleNoteSubmit}>Save</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n\r\n\r\n\r\n         {/* Alert Modal */}\r\n\r\n         <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>{alertMessage}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UpdateNotes","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\AssignPhases.js",["446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461"],[],"import React, {useState, useContext, useEffect} from 'react'\r\nimport '../stylesheets/displayProjects.css'\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\nimport image_S1 from '../images/abstract10.png'\r\nimport { UserContext } from '../App'\r\n\r\nconst AssignPhases = ({projectData}) => {\r\n    const {state, dispatch} = useContext(UserContext); \r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const handleAlertClose = () =>{setShowAlert(false);}\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [alertTitle, setAlertTitle] = useState(\"\");\r\n    const [fullscreen, setFullscreen] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const handleShow = () => {setFullscreen(true); setShow(true);}\r\n    const handleHideModal = () =>{setShow(false);}\r\n    const [smShow, setSmShow] = useState(false);\r\n    const [smShowUpdate, setSmShowUpdate] = useState(false);\r\n    const [projectMembers, setProjectMembers] = useState();\r\n    const [currentProjectCreator, setCurrentProjectCreator] = useState();\r\n    const [selectedPhase, setSelectedPhase] = useState();\r\n    const [selectedphaseForUpdate, setSelectedphaseForUpdate] = useState();\r\n    const [assignEachPhase, setAssignEachPhase] = useState([]);\r\n\r\n\r\n    const checkMembers = () =>{\r\n        if(projectData){\r\n            console.log(projectData.currentProject)\r\n            let currentMembers = [];\r\n            projectData.currentProject.members.map((element1)=>{\r\n                let getProfile = projectData.allfriends.find(element2 => element2._id === element1.memberRef);\r\n                currentMembers.push(getProfile);\r\n            })\r\n            setProjectMembers(currentMembers)\r\n            console.log(currentMembers)\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        checkMembers();\r\n    },[])\r\n\r\n\r\n    const handleAssignBtn = (e) =>{\r\n        let id = e.target.id;\r\n        \r\n        if(projectData){\r\n            let getPhase = projectData.currentProject.projectPhases.find(element => element._id === id);\r\n            setSelectedPhase(getPhase);\r\n            setSmShow(true);\r\n            console.log(getPhase)\r\n        }\r\n    }\r\n\r\n\r\n    const addMember = (e) =>{\r\n        let id = e.target.id;\r\n        \r\n\r\n        // let checkArr = assignEachPhase.find(element => element.phaseId === selectedPhase._id && element.phaseMembers === id);\r\n        let checkArr = assignEachPhase.find(element => element.phaseId === selectedPhase._id && element.memberRef === id);\r\n        \r\n        if(checkArr){\r\n            setAlertTitle(\"Alert\");\r\n            setAlertMessage(\"Member is already added in this phase.\");\r\n            setShowAlert(true);\r\n        }\r\n        else{          \r\n            \r\n            let getProfile = projectData.allfriends.find(element => element._id === id);\r\n            \r\n            if(getProfile){\r\n                let eachPhaseObj = {\r\n                    phaseId: selectedPhase._id,\r\n                    phaseNum: selectedPhase.PhaseNum,\r\n                    phaseTitle: selectedPhase.PhaseTitle,\r\n                    memberRef: id,\r\n                    memberName: getProfile.name,\r\n                    uniqueId: selectedPhase._id + id,\r\n                }\r\n                setAssignEachPhase(assignEachPhase => [...assignEachPhase, eachPhaseObj])\r\n            }\r\n            else{\r\n                let eachPhaseObj = {\r\n                    phaseId: selectedPhase._id,\r\n                    phaseNum: selectedPhase.PhaseNum,\r\n                    phaseTitle: selectedPhase.PhaseTitle,\r\n                    memberRef: id,\r\n                    memberName: state.name,\r\n                    uniqueId: selectedPhase._id + id, \r\n                }\r\n                setAssignEachPhase(assignEachPhase => [...assignEachPhase, eachPhaseObj])\r\n            }\r\n\r\n        }\r\n           \r\n    }\r\n\r\n\r\n    const removeMember = (e) =>{\r\n        let id = e.target.id;\r\n        let removeSelectedMember = assignEachPhase.filter(element => element.uniqueId !== id); \r\n        setAssignEachPhase(removeSelectedMember)\r\n    }\r\n\r\n    const handleAssignPhases = async (e) =>{\r\n        let projectId = e.target.id;\r\n        try {\r\n                const userProfile = JSON.parse(localStorage.getItem('User'));\r\n                const tok = userProfile.tok;\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/assignProjectPhases', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type' : 'application/json',\r\n                    Authorization: `Bearer ${tok}` \r\n                },\r\n                body: JSON.stringify({assignEachPhase, projectId}),\r\n            })\r\n\r\n            const data = await response.json();\r\n\r\n            if(response.status === 201 || data){\r\n                setAlertTitle(\"Alert\");\r\n                setAlertMessage(\"Phases Assigned.\");\r\n                setShowAlert(true);\r\n                projectData.setFecthTasks(data);\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        setShow(false)\r\n    }\r\n\r\n\r\n    const showPhases = async () =>{\r\n        if(projectData){\r\n            try {\r\n                let selectedProjectId = projectData.currentProject._id;\r\n                let selectedProjectCreator = projectData.currentProject.projectCreator;\r\n\r\n                    const userProfile = JSON.parse(localStorage.getItem('User'));\r\n                    const tok = userProfile.tok;\r\n                    const response = await fetch('https://taskhive-backend-testing.onrender.com/showProjectPhases', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        Authorization: `Bearer ${tok}`,\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({selectedProjectId, selectedProjectCreator}),\r\n                })\r\n    \r\n                const data = await response.json();\r\n\r\n                if(data){\r\n                    if(data.findProjectPhases){\r\n                        setAssignEachPhase(data.findProjectPhases.allPhases);\r\n                    }\r\n                    else{\r\n                        setAssignEachPhase([]);\r\n                    }\r\n                    setCurrentProjectCreator(data.findProjectCreator);\r\n                }\r\n                console.log(data)\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        showPhases();\r\n    },[])\r\n\r\n\r\n    const handleUpdateBtn = (e) =>{\r\n        let id = e.target.id\r\n        if(projectData){\r\n\r\n            let findPhase = projectData.currentProject.projectPhases.find(element => element._id === id);\r\n            console.log(findPhase);\r\n            setSelectedphaseForUpdate(findPhase)\r\n            setSmShowUpdate(true);\r\n        }\r\n        \r\n    }\r\n\r\n    const handleUpdatePhaseBtn = async () =>{\r\n        if(selectedphaseForUpdate){\r\n            try {\r\n                      const userProfile = JSON.parse(localStorage.getItem('User'));\r\n      const tok = userProfile.tok;\r\n      const response = await fetch('https://taskhive-backend-testing.onrender.com/updatePhaseToCompleted', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        Authorization: `Bearer ${tok}`,\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({selectedphaseForUpdate}),\r\n                })\r\n    \r\n                const data = await response.json();\r\n\r\n                if(response.status === 201 && data){\r\n                    setSmShowUpdate(false);\r\n                }\r\n                \r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const handleUndoUpdatePhaseBtn = async () =>{\r\n\r\n        if(selectedphaseForUpdate){\r\n            try {\r\n                const userProfile = JSON.parse(localStorage.getItem('User'));\r\n                const tok = userProfile.tok;\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/updatePhaseToPending', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        Authorization: `Bearer ${tok}`,\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({selectedphaseForUpdate}),\r\n                })\r\n    \r\n                const data = await response.json();\r\n\r\n                if(response.status === 201 && data){\r\n                    setSmShowUpdate(false);\r\n                }\r\n                \r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n  return (\r\n    <>\r\n\r\n        <ListGroup.Item className='selectedListItem' onClick={handleShow}>\r\n          <i className='fa fa-sitemap'></i>         \r\n          <br></br>\r\n          Assign Phases\r\n        </ListGroup.Item>\r\n\r\n        <Modal show={show} fullscreen={fullscreen} onHide={handleHideModal} keyboard={false} >\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title>Assign Project Phases</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                {projectData.currentProject && projectMembers ?\r\n                <>\r\n                <p>You can assign & update a phase of selected project to your team members or yourself.</p> \r\n                <p>Click on mentioned project phases to assign a phase to a member.</p>\r\n                <p><b>Project Title:  {projectData.currentProject.projectTitle} </b></p>\r\n                <br></br>\r\n                <Container>\r\n                    <p><b>Project Phases :-</b></p>\r\n                    <Row>\r\n                        {projectData.currentProject.projectPhases.map((element, index)=>\r\n                            <Col sm lg=\"3\" key={index}>\r\n                                <Dropdown >\r\n                                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" className='dropBtn'>\r\n                                        Phase {element.PhaseNum} : {element.PhaseTitle}\r\n                                    </Dropdown.Toggle>\r\n\r\n                                    <Dropdown.Menu className='dropDownCont'>\r\n                                        <Dropdown.Item id={element._id} onClick={handleAssignBtn}>Add Members</Dropdown.Item>\r\n                                        <Dropdown.Item id={element._id} onClick={handleUpdateBtn}>Update Status</Dropdown.Item> \r\n                                    </Dropdown.Menu>\r\n                                </Dropdown>\r\n                                <br></br>\r\n                            </Col>\r\n                        )}\r\n                    </Row>\r\n                </Container>\r\n                <br></br>\r\n                <Container>\r\n                    <p><b>Assign To :-</b></p>\r\n                    <Row>\r\n                        {assignEachPhase.map((element, index)=>\r\n                            <Col sm lg=\"3\" key={index}>\r\n                                <ListGroup.Item className='listPhase'>\r\n                                    Phase {element.phaseNum} : {element.memberName}\r\n                                    <i className=\"fa fa-times removeBtnPhase\" id={element.phaseId + element.memberRef} onClick={removeMember}></i>\r\n                                </ListGroup.Item> \r\n                            </Col>        \r\n                        )}\r\n                    </Row>                                            \r\n                </Container>\r\n                </>\r\n                :\r\n                <>\r\n                <p className='warningTxt'>Selected project will be permanently deleted when click on <b>Delete Project</b> button.</p>\r\n                <ListGroup>\r\n                    <ListGroup.Item  className='listPhase'><b>Title: </b> </ListGroup.Item>\r\n                </ListGroup>\r\n                </>\r\n                }\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                {projectData.currentProject ?\r\n                    <Button className='phaseSaveBtn' id={projectData.currentProject._id} onClick={handleAssignPhases}>Save</Button>\r\n                :\r\n                    <Button className='phaseSaveBtn'>Save</Button>\r\n                }\r\n                \r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        {/* add Members */}\r\n\r\n        <Modal size=\"sm\" show={smShow} onHide={() => setSmShow(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">\r\n                    Project Members\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>\r\n               \r\n                        <ListGroup variant=\"flush\" >\r\n                            {currentProjectCreator ?\r\n                            <>\r\n                            <ListGroup.Item as=\"li\"  className=\"d-flex justify-content-between align-items-start memberLists\" >\r\n                           \r\n                            <Row>\r\n                                <Col>\r\n                                    <img src={currentProjectCreator.projectCreatorImage}\r\n                                        onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\r\n                                        className=\"profileImages\"\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <p>{currentProjectCreator.projectCreatorName}</p>\r\n                                    <p>Project Creator</p>\r\n                                </Col>\r\n                                <Col>\r\n                                    <i className=\"fa fa-plus addFriendIcon\" id={currentProjectCreator.projectCreatorId} onClick={addMember}></i>\r\n                                </Col>\r\n                            </Row>\r\n                           \r\n                            </ListGroup.Item>\r\n                            {projectMembers.map( (element, index) =>\r\n                                <ListGroup.Item as=\"li\" key={index}  className=\"d-flex justify-content-between align-items-start memberLists\" >\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <img src={element.image}\r\n                                            onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\r\n                                            className=\"profileImages\"\r\n                                            />\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <p>{element.name}</p>\r\n                                            <p>{element.designation}</p>\r\n                                        </Col>\r\n                                        <Col>\r\n                                        <i className=\"fa fa-plus addFriendIcon\" id={element._id} onClick={addMember}></i>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                               \r\n                            )}\r\n                             </>\r\n                            :\r\n                            <ListGroup.Item></ListGroup.Item>\r\n                            \r\n                            }\r\n                            \r\n                        </ListGroup>\r\n                  \r\n            </Modal.Body>\r\n            </Modal>\r\n    \r\n\r\n\r\n\r\n\r\n            {/* Update Selected Phase */}\r\n\r\n            <Modal size=\"sm\" show={smShowUpdate} onHide={() => setSmShowUpdate(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n                <Modal.Header closeButton className='modalHeader'>\r\n                    {selectedphaseForUpdate ?\r\n                        <Modal.Title id=\"example-modal-sizes-title-sm\">{selectedphaseForUpdate.PhaseTitle}</Modal.Title>\r\n                    :\r\n                        <Modal.Title id=\"example-modal-sizes-title-sm\">Selected Phase</Modal.Title>\r\n                    }\r\n                </Modal.Header>\r\n                <Modal.Body className='modalBodyStatic'>\r\n                    {selectedphaseForUpdate ?\r\n                        <>\r\n                        {selectedphaseForUpdate.PhaseStatus === \"Pending\" ?\r\n                            <>\r\n                                <p>Phase Status: {selectedphaseForUpdate.PhaseStatus}</p>\r\n                                <br></br>\r\n                                <p>Click on \"Update\" button to update the phase status to \"Completed\".</p>\r\n                            </>\r\n                        :\r\n                            <>\r\n                                <p>Phase Status: {selectedphaseForUpdate.PhaseStatus}</p>\r\n                                <br></br>\r\n                                <p>Click on \"Update\" button to update the phase status to \"Pending\".</p>\r\n                            </>\r\n                        }\r\n                        </>\r\n                    \r\n                    :\r\n                        <p></p>\r\n                    }\r\n                    \r\n                </Modal.Body>\r\n                <Modal.Footer className='modalFooter'>\r\n                    {selectedphaseForUpdate ?\r\n                        <>\r\n                        {selectedphaseForUpdate.PhaseStatus === \"Pending\" ?\r\n                            <Button className='saveBtn' onClick={handleUpdatePhaseBtn}>Update</Button>\r\n                        :\r\n                            <Button className='saveBtn' onClick={handleUndoUpdatePhaseBtn}>Update</Button>  \r\n                        }\r\n                        </>\r\n                    \r\n                    :\r\n                        <Button className='saveBtn'>Update</Button>\r\n                    }   \r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n\r\n\r\n\r\n             {/* Alert Modal */}\r\n\r\n             <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>{alertMessage}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \r\n            </Modal.Footer>\r\n            </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AssignPhases","C:\\Users\\Charu\\Desktop\\taskhive\\src\\components\\CreateNotes.js",["462","463","464","465","466","467","468","469","470","471","472","473","474"],[],"import React, {useState, useLayoutEffect, useEffect} from 'react'\r\nimport '../stylesheets/notes.css'\r\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\n\r\n\r\nconst CreateNotes = ({props}) => {\r\n\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const handleAlertClose = () =>{setShowAlert(false);}\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [alertTitle, setAlertTitle] = useState(\"\");\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [noteTitle, setNoteTitle] = useState(\"\");\r\n    const [noteText, setNoteText] = useState(\"\");\r\n\r\n    const handleNoteSubmit = async (e) =>{\r\n        e.preventDefault();\r\n        if(noteTitle && noteText){\r\n            try {\r\n                const userProfile = JSON.parse(localStorage.getItem('User'));\r\n                const tok = userProfile.tok;\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/addNewnote', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        Authorization: `Bearer ${tok}`,\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({noteTitle, noteText}),\r\n                })\r\n    \r\n                const data = await response.json();\r\n    \r\n                if(response.status === 201 && data){\r\n                    setAlertTitle(\"Alert\");\r\n                    setAlertMessage(\"Note Created\");\r\n                    setShowAlert(true);\r\n                    setNoteTitle(\"\");\r\n                    setNoteText(\"\");\r\n                    props.setFecthTasks(data)\r\n                }\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }else{\r\n            setAlertTitle(\"Alert\");\r\n            setAlertMessage(\"Please fill the form correctly.\");\r\n            setShowAlert(true);\r\n        }\r\n        \r\n        \r\n    }\r\n \r\n  return (\r\n    <>\r\n        <ListGroup.Item className='newProjectBtn' onClick={() => setModalShow(true)}>\r\n            <i className='fa fa-plus'></i>\r\n            {' '}\r\n            Create Note         \r\n        </ListGroup.Item> \r\n    \r\n        <Modal size=\"lg\" show={modalShow} onHide={() => setModalShow(false)} backdrop=\"static\" keyboard={false} aria-labelledby=\"contained-modal-title-vcenter\" centered >\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title>New Note</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <Container>\r\n                    <Form method='POST'>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Label>Title</Form.Label>\r\n                            <Form.Control type=\"text\" className='formInput' placeholder=\"Title\" value={noteTitle} onChange={(e)=>setNoteTitle(e.target.value)} />\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Label>Note</Form.Label>\r\n                            <Form.Control as=\"textarea\" className='formInput' rows={3} value={noteText} onChange={(e)=>setNoteText(e.target.value)} />\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn' variant=\"primary\" type=\"submit\" onClick={handleNoteSubmit}>Save</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n\r\n\r\n\r\n        {/* Alert Modal */}\r\n\r\n        <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>{alertMessage}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \r\n            </Modal.Footer>\r\n        </Modal>\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default CreateNotes",{"ruleId":"475","severity":1,"message":"476","line":1,"column":44,"nodeType":"477","messageId":"478","endLine":1,"endColumn":52},{"ruleId":"475","severity":1,"message":"479","line":1,"column":54,"nodeType":"477","messageId":"478","endLine":1,"endColumn":63},{"ruleId":"475","severity":1,"message":"476","line":1,"column":16,"nodeType":"477","messageId":"478","endLine":1,"endColumn":24},{"ruleId":"475","severity":1,"message":"479","line":1,"column":26,"nodeType":"477","messageId":"478","endLine":1,"endColumn":35},{"ruleId":"475","severity":1,"message":"480","line":2,"column":10,"nodeType":"477","messageId":"478","endLine":2,"endColumn":21},{"ruleId":"475","severity":1,"message":"481","line":2,"column":23,"nodeType":"477","messageId":"478","endLine":2,"endColumn":30},{"ruleId":"475","severity":1,"message":"482","line":5,"column":10,"nodeType":"477","messageId":"478","endLine":5,"endColumn":13},{"ruleId":"475","severity":1,"message":"483","line":5,"column":15,"nodeType":"477","messageId":"478","endLine":5,"endColumn":18},{"ruleId":"475","severity":1,"message":"484","line":5,"column":30,"nodeType":"477","messageId":"478","endLine":5,"endColumn":34},{"ruleId":"475","severity":1,"message":"485","line":5,"column":36,"nodeType":"477","messageId":"478","endLine":5,"endColumn":42},{"ruleId":"475","severity":1,"message":"486","line":5,"column":44,"nodeType":"477","messageId":"478","endLine":5,"endColumn":53},{"ruleId":"475","severity":1,"message":"487","line":5,"column":55,"nodeType":"477","messageId":"478","endLine":5,"endColumn":60},{"ruleId":"475","severity":1,"message":"488","line":13,"column":19,"nodeType":"477","messageId":"478","endLine":13,"endColumn":27},{"ruleId":"475","severity":1,"message":"489","line":3,"column":10,"nodeType":"477","messageId":"478","endLine":3,"endColumn":21},{"ruleId":"475","severity":1,"message":"490","line":6,"column":31,"nodeType":"477","messageId":"478","endLine":6,"endColumn":35},{"ruleId":"475","severity":1,"message":"491","line":6,"column":37,"nodeType":"477","messageId":"478","endLine":6,"endColumn":46},{"ruleId":"475","severity":1,"message":"492","line":6,"column":48,"nodeType":"477","messageId":"478","endLine":6,"endColumn":59},{"ruleId":"475","severity":1,"message":"493","line":6,"column":61,"nodeType":"477","messageId":"478","endLine":6,"endColumn":67},{"ruleId":"475","severity":1,"message":"494","line":6,"column":69,"nodeType":"477","messageId":"478","endLine":6,"endColumn":72},{"ruleId":"475","severity":1,"message":"495","line":6,"column":74,"nodeType":"477","messageId":"478","endLine":6,"endColumn":85},{"ruleId":"475","severity":1,"message":"496","line":6,"column":93,"nodeType":"477","messageId":"478","endLine":6,"endColumn":98},{"ruleId":"475","severity":1,"message":"486","line":6,"column":108,"nodeType":"477","messageId":"478","endLine":6,"endColumn":117},{"ruleId":"475","severity":1,"message":"497","line":6,"column":119,"nodeType":"477","messageId":"478","endLine":6,"endColumn":128},{"ruleId":"475","severity":1,"message":"498","line":6,"column":130,"nodeType":"477","messageId":"478","endLine":6,"endColumn":140},{"ruleId":"475","severity":1,"message":"499","line":9,"column":8,"nodeType":"477","messageId":"478","endLine":9,"endColumn":18},{"ruleId":"475","severity":1,"message":"500","line":13,"column":12,"nodeType":"477","messageId":"478","endLine":13,"endColumn":17},{"ruleId":"501","severity":1,"message":"502","line":87,"column":8,"nodeType":"503","endLine":87,"endColumn":10,"suggestions":"504"},{"ruleId":"505","severity":1,"message":"506","line":142,"column":33,"nodeType":"507","messageId":"508","endLine":142,"endColumn":34,"suggestions":"509"},{"ruleId":"505","severity":1,"message":"506","line":142,"column":49,"nodeType":"507","messageId":"508","endLine":142,"endColumn":50,"suggestions":"510"},{"ruleId":"475","severity":1,"message":"479","line":1,"column":26,"nodeType":"477","messageId":"478","endLine":1,"endColumn":35},{"ruleId":"475","severity":1,"message":"485","line":3,"column":27,"nodeType":"477","messageId":"478","endLine":3,"endColumn":33},{"ruleId":"475","severity":1,"message":"487","line":3,"column":45,"nodeType":"477","messageId":"478","endLine":3,"endColumn":50},{"ruleId":"475","severity":1,"message":"511","line":3,"column":52,"nodeType":"477","messageId":"478","endLine":3,"endColumn":65},{"ruleId":"475","severity":1,"message":"512","line":3,"column":67,"nodeType":"477","messageId":"478","endLine":3,"endColumn":74},{"ruleId":"475","severity":1,"message":"513","line":3,"column":76,"nodeType":"477","messageId":"478","endLine":3,"endColumn":84},{"ruleId":"475","severity":1,"message":"514","line":3,"column":86,"nodeType":"477","messageId":"478","endLine":3,"endColumn":97},{"ruleId":"475","severity":1,"message":"515","line":3,"column":99,"nodeType":"477","messageId":"478","endLine":3,"endColumn":113},{"ruleId":"475","severity":1,"message":"516","line":3,"column":115,"nodeType":"477","messageId":"478","endLine":3,"endColumn":129},{"ruleId":"475","severity":1,"message":"517","line":3,"column":131,"nodeType":"477","messageId":"478","endLine":3,"endColumn":142},{"ruleId":"475","severity":1,"message":"486","line":3,"column":151,"nodeType":"477","messageId":"478","endLine":3,"endColumn":160},{"ruleId":"475","severity":1,"message":"498","line":3,"column":162,"nodeType":"477","messageId":"478","endLine":3,"endColumn":172},{"ruleId":"475","severity":1,"message":"476","line":1,"column":16,"nodeType":"477","messageId":"478","endLine":1,"endColumn":24},{"ruleId":"475","severity":1,"message":"518","line":1,"column":26,"nodeType":"477","messageId":"478","endLine":1,"endColumn":41},{"ruleId":"475","severity":1,"message":"479","line":1,"column":43,"nodeType":"477","messageId":"478","endLine":1,"endColumn":52},{"ruleId":"475","severity":1,"message":"482","line":3,"column":10,"nodeType":"477","messageId":"478","endLine":3,"endColumn":13},{"ruleId":"475","severity":1,"message":"483","line":3,"column":15,"nodeType":"477","messageId":"478","endLine":3,"endColumn":18},{"ruleId":"475","severity":1,"message":"495","line":3,"column":43,"nodeType":"477","messageId":"478","endLine":3,"endColumn":54},{"ruleId":"475","severity":1,"message":"519","line":3,"column":56,"nodeType":"477","messageId":"478","endLine":3,"endColumn":60},{"ruleId":"475","severity":1,"message":"496","line":3,"column":62,"nodeType":"477","messageId":"478","endLine":3,"endColumn":67},{"ruleId":"475","severity":1,"message":"485","line":3,"column":69,"nodeType":"477","messageId":"478","endLine":3,"endColumn":75},{"ruleId":"475","severity":1,"message":"486","line":3,"column":77,"nodeType":"477","messageId":"478","endLine":3,"endColumn":86},{"ruleId":"475","severity":1,"message":"497","line":3,"column":88,"nodeType":"477","messageId":"478","endLine":3,"endColumn":97},{"ruleId":"475","severity":1,"message":"498","line":3,"column":99,"nodeType":"477","messageId":"478","endLine":3,"endColumn":109},{"ruleId":"475","severity":1,"message":"520","line":3,"column":111,"nodeType":"477","messageId":"478","endLine":3,"endColumn":116},{"ruleId":"475","severity":1,"message":"521","line":5,"column":8,"nodeType":"477","messageId":"478","endLine":5,"endColumn":21},{"ruleId":"475","severity":1,"message":"522","line":6,"column":8,"nodeType":"477","messageId":"478","endLine":6,"endColumn":16},{"ruleId":"475","severity":1,"message":"523","line":7,"column":10,"nodeType":"477","messageId":"478","endLine":7,"endColumn":21},{"ruleId":"475","severity":1,"message":"524","line":1,"column":50,"nodeType":"477","messageId":"478","endLine":1,"endColumn":56},{"ruleId":"475","severity":1,"message":"480","line":2,"column":10,"nodeType":"477","messageId":"478","endLine":2,"endColumn":21},{"ruleId":"475","severity":1,"message":"481","line":2,"column":23,"nodeType":"477","messageId":"478","endLine":2,"endColumn":30},{"ruleId":"475","severity":1,"message":"484","line":3,"column":31,"nodeType":"477","messageId":"478","endLine":3,"endColumn":35},{"ruleId":"475","severity":1,"message":"485","line":3,"column":37,"nodeType":"477","messageId":"478","endLine":3,"endColumn":43},{"ruleId":"475","severity":1,"message":"500","line":11,"column":11,"nodeType":"477","messageId":"478","endLine":11,"endColumn":16},{"ruleId":"475","severity":1,"message":"488","line":11,"column":18,"nodeType":"477","messageId":"478","endLine":11,"endColumn":26},{"ruleId":"475","severity":1,"message":"480","line":2,"column":10,"nodeType":"477","messageId":"478","endLine":2,"endColumn":21},{"ruleId":"475","severity":1,"message":"481","line":2,"column":23,"nodeType":"477","messageId":"478","endLine":2,"endColumn":30},{"ruleId":"475","severity":1,"message":"496","line":5,"column":36,"nodeType":"477","messageId":"478","endLine":5,"endColumn":41},{"ruleId":"475","severity":1,"message":"497","line":5,"column":62,"nodeType":"477","messageId":"478","endLine":5,"endColumn":71},{"ruleId":"475","severity":1,"message":"488","line":17,"column":19,"nodeType":"477","messageId":"478","endLine":17,"endColumn":27},{"ruleId":"475","severity":1,"message":"525","line":30,"column":12,"nodeType":"477","messageId":"478","endLine":30,"endColumn":26},{"ruleId":"475","severity":1,"message":"526","line":32,"column":12,"nodeType":"477","messageId":"478","endLine":32,"endColumn":24},{"ruleId":"501","severity":1,"message":"527","line":96,"column":7,"nodeType":"503","endLine":96,"endColumn":9,"suggestions":"528"},{"ruleId":"501","severity":1,"message":"529","line":308,"column":7,"nodeType":"503","endLine":308,"endColumn":9,"suggestions":"530"},{"ruleId":"531","severity":1,"message":"532","line":333,"column":33,"nodeType":"533","endLine":339,"endColumn":35},{"ruleId":"531","severity":1,"message":"532","line":349,"column":33,"nodeType":"533","endLine":355,"endColumn":35},{"ruleId":"475","severity":1,"message":"481","line":2,"column":10,"nodeType":"477","messageId":"478","endLine":2,"endColumn":17},{"ruleId":"475","severity":1,"message":"480","line":2,"column":19,"nodeType":"477","messageId":"478","endLine":2,"endColumn":30},{"ruleId":"475","severity":1,"message":"534","line":5,"column":20,"nodeType":"477","messageId":"478","endLine":5,"endColumn":29},{"ruleId":"475","severity":1,"message":"487","line":5,"column":82,"nodeType":"477","messageId":"478","endLine":5,"endColumn":87},{"ruleId":"475","severity":1,"message":"488","line":10,"column":19,"nodeType":"477","messageId":"478","endLine":10,"endColumn":27},{"ruleId":"535","severity":1,"message":"536","line":126,"column":33,"nodeType":"537","messageId":"538","endLine":126,"endColumn":35},{"ruleId":"501","severity":1,"message":"539","line":137,"column":7,"nodeType":"503","endLine":137,"endColumn":21,"suggestions":"540"},{"ruleId":"531","severity":1,"message":"532","line":229,"column":33,"nodeType":"533","endLine":232,"endColumn":35},{"ruleId":"475","severity":1,"message":"518","line":1,"column":26,"nodeType":"477","messageId":"478","endLine":1,"endColumn":41},{"ruleId":"475","severity":1,"message":"482","line":3,"column":10,"nodeType":"477","messageId":"478","endLine":3,"endColumn":13},{"ruleId":"475","severity":1,"message":"483","line":3,"column":15,"nodeType":"477","messageId":"478","endLine":3,"endColumn":18},{"ruleId":"475","severity":1,"message":"534","line":3,"column":19,"nodeType":"477","messageId":"478","endLine":3,"endColumn":28},{"ruleId":"475","severity":1,"message":"493","line":3,"column":30,"nodeType":"477","messageId":"478","endLine":3,"endColumn":36},{"ruleId":"475","severity":1,"message":"494","line":3,"column":38,"nodeType":"477","messageId":"478","endLine":3,"endColumn":41},{"ruleId":"475","severity":1,"message":"495","line":3,"column":43,"nodeType":"477","messageId":"478","endLine":3,"endColumn":54},{"ruleId":"475","severity":1,"message":"519","line":3,"column":56,"nodeType":"477","messageId":"478","endLine":3,"endColumn":60},{"ruleId":"475","severity":1,"message":"496","line":3,"column":62,"nodeType":"477","messageId":"478","endLine":3,"endColumn":67},{"ruleId":"475","severity":1,"message":"485","line":3,"column":69,"nodeType":"477","messageId":"478","endLine":3,"endColumn":75},{"ruleId":"475","severity":1,"message":"497","line":3,"column":88,"nodeType":"477","messageId":"478","endLine":3,"endColumn":97},{"ruleId":"475","severity":1,"message":"498","line":3,"column":99,"nodeType":"477","messageId":"478","endLine":3,"endColumn":109},{"ruleId":"501","severity":1,"message":"541","line":94,"column":3,"nodeType":"503","endLine":94,"endColumn":20,"suggestions":"542"},{"ruleId":"475","severity":1,"message":"518","line":1,"column":26,"nodeType":"477","messageId":"478","endLine":1,"endColumn":41},{"ruleId":"475","severity":1,"message":"490","line":3,"column":31,"nodeType":"477","messageId":"478","endLine":3,"endColumn":35},{"ruleId":"475","severity":1,"message":"491","line":3,"column":37,"nodeType":"477","messageId":"478","endLine":3,"endColumn":46},{"ruleId":"475","severity":1,"message":"493","line":3,"column":61,"nodeType":"477","messageId":"478","endLine":3,"endColumn":67},{"ruleId":"475","severity":1,"message":"494","line":3,"column":69,"nodeType":"477","messageId":"478","endLine":3,"endColumn":72},{"ruleId":"475","severity":1,"message":"495","line":3,"column":74,"nodeType":"477","messageId":"478","endLine":3,"endColumn":85},{"ruleId":"475","severity":1,"message":"519","line":3,"column":87,"nodeType":"477","messageId":"478","endLine":3,"endColumn":91},{"ruleId":"475","severity":1,"message":"496","line":3,"column":93,"nodeType":"477","messageId":"478","endLine":3,"endColumn":98},{"ruleId":"475","severity":1,"message":"497","line":3,"column":119,"nodeType":"477","messageId":"478","endLine":3,"endColumn":128},{"ruleId":"475","severity":1,"message":"498","line":3,"column":130,"nodeType":"477","messageId":"478","endLine":3,"endColumn":140},{"ruleId":"475","severity":1,"message":"543","line":27,"column":12,"nodeType":"477","messageId":"478","endLine":27,"endColumn":28},{"ruleId":"475","severity":1,"message":"544","line":27,"column":30,"nodeType":"477","messageId":"478","endLine":27,"endColumn":49},{"ruleId":"475","severity":1,"message":"518","line":1,"column":26,"nodeType":"477","messageId":"478","endLine":1,"endColumn":41},{"ruleId":"475","severity":1,"message":"490","line":3,"column":31,"nodeType":"477","messageId":"478","endLine":3,"endColumn":35},{"ruleId":"475","severity":1,"message":"491","line":3,"column":37,"nodeType":"477","messageId":"478","endLine":3,"endColumn":46},{"ruleId":"475","severity":1,"message":"492","line":3,"column":48,"nodeType":"477","messageId":"478","endLine":3,"endColumn":59},{"ruleId":"475","severity":1,"message":"493","line":3,"column":61,"nodeType":"477","messageId":"478","endLine":3,"endColumn":67},{"ruleId":"475","severity":1,"message":"494","line":3,"column":69,"nodeType":"477","messageId":"478","endLine":3,"endColumn":72},{"ruleId":"475","severity":1,"message":"495","line":3,"column":74,"nodeType":"477","messageId":"478","endLine":3,"endColumn":85},{"ruleId":"475","severity":1,"message":"519","line":3,"column":87,"nodeType":"477","messageId":"478","endLine":3,"endColumn":91},{"ruleId":"475","severity":1,"message":"496","line":3,"column":93,"nodeType":"477","messageId":"478","endLine":3,"endColumn":98},{"ruleId":"475","severity":1,"message":"485","line":3,"column":100,"nodeType":"477","messageId":"478","endLine":3,"endColumn":106},{"ruleId":"475","severity":1,"message":"497","line":3,"column":119,"nodeType":"477","messageId":"478","endLine":3,"endColumn":128},{"ruleId":"475","severity":1,"message":"498","line":3,"column":130,"nodeType":"477","messageId":"478","endLine":3,"endColumn":140},{"ruleId":"475","severity":1,"message":"545","line":1,"column":37,"nodeType":"477","messageId":"478","endLine":1,"endColumn":47},{"ruleId":"475","severity":1,"message":"481","line":2,"column":10,"nodeType":"477","messageId":"478","endLine":2,"endColumn":17},{"ruleId":"475","severity":1,"message":"480","line":2,"column":19,"nodeType":"477","messageId":"478","endLine":2,"endColumn":30},{"ruleId":"475","severity":1,"message":"498","line":4,"column":31,"nodeType":"477","messageId":"478","endLine":4,"endColumn":41},{"ruleId":"475","severity":1,"message":"517","line":4,"column":58,"nodeType":"477","messageId":"478","endLine":4,"endColumn":69},{"ruleId":"475","severity":1,"message":"487","line":4,"column":82,"nodeType":"477","messageId":"478","endLine":4,"endColumn":87},{"ruleId":"531","severity":1,"message":"532","line":172,"column":29,"nodeType":"533","endLine":176,"endColumn":31},{"ruleId":"531","severity":1,"message":"532","line":190,"column":29,"nodeType":"533","endLine":194,"endColumn":31},{"ruleId":"475","severity":1,"message":"479","line":1,"column":38,"nodeType":"477","messageId":"478","endLine":1,"endColumn":47},{"ruleId":"475","severity":1,"message":"490","line":4,"column":31,"nodeType":"477","messageId":"478","endLine":4,"endColumn":35},{"ruleId":"475","severity":1,"message":"491","line":4,"column":37,"nodeType":"477","messageId":"478","endLine":4,"endColumn":46},{"ruleId":"475","severity":1,"message":"492","line":4,"column":48,"nodeType":"477","messageId":"478","endLine":4,"endColumn":59},{"ruleId":"475","severity":1,"message":"493","line":4,"column":61,"nodeType":"477","messageId":"478","endLine":4,"endColumn":67},{"ruleId":"475","severity":1,"message":"494","line":4,"column":69,"nodeType":"477","messageId":"478","endLine":4,"endColumn":72},{"ruleId":"475","severity":1,"message":"495","line":4,"column":74,"nodeType":"477","messageId":"478","endLine":4,"endColumn":85},{"ruleId":"475","severity":1,"message":"519","line":4,"column":87,"nodeType":"477","messageId":"478","endLine":4,"endColumn":91},{"ruleId":"475","severity":1,"message":"496","line":4,"column":93,"nodeType":"477","messageId":"478","endLine":4,"endColumn":98},{"ruleId":"475","severity":1,"message":"497","line":4,"column":119,"nodeType":"477","messageId":"478","endLine":4,"endColumn":128},{"ruleId":"475","severity":1,"message":"498","line":4,"column":130,"nodeType":"477","messageId":"478","endLine":4,"endColumn":140},{"ruleId":"475","severity":1,"message":"488","line":10,"column":19,"nodeType":"477","messageId":"478","endLine":10,"endColumn":27},{"ruleId":"531","severity":1,"message":"532","line":54,"column":33,"nodeType":"533","endLine":58,"endColumn":35},{"ruleId":"475","severity":1,"message":"479","line":1,"column":26,"nodeType":"477","messageId":"478","endLine":1,"endColumn":35},{"ruleId":"475","severity":1,"message":"480","line":2,"column":10,"nodeType":"477","messageId":"478","endLine":2,"endColumn":21},{"ruleId":"475","severity":1,"message":"534","line":4,"column":9,"nodeType":"477","messageId":"478","endLine":4,"endColumn":18},{"ruleId":"475","severity":1,"message":"519","line":4,"column":20,"nodeType":"477","messageId":"478","endLine":4,"endColumn":24},{"ruleId":"475","severity":1,"message":"482","line":4,"column":34,"nodeType":"477","messageId":"478","endLine":4,"endColumn":37},{"ruleId":"475","severity":1,"message":"483","line":4,"column":39,"nodeType":"477","messageId":"478","endLine":4,"endColumn":42},{"ruleId":"475","severity":1,"message":"487","line":4,"column":44,"nodeType":"477","messageId":"478","endLine":4,"endColumn":49},{"ruleId":"475","severity":1,"message":"511","line":4,"column":51,"nodeType":"477","messageId":"478","endLine":4,"endColumn":64},{"ruleId":"475","severity":1,"message":"512","line":4,"column":66,"nodeType":"477","messageId":"478","endLine":4,"endColumn":73},{"ruleId":"475","severity":1,"message":"513","line":4,"column":75,"nodeType":"477","messageId":"478","endLine":4,"endColumn":83},{"ruleId":"475","severity":1,"message":"514","line":4,"column":85,"nodeType":"477","messageId":"478","endLine":4,"endColumn":96},{"ruleId":"475","severity":1,"message":"515","line":4,"column":98,"nodeType":"477","messageId":"478","endLine":4,"endColumn":112},{"ruleId":"475","severity":1,"message":"516","line":4,"column":114,"nodeType":"477","messageId":"478","endLine":4,"endColumn":128},{"ruleId":"475","severity":1,"message":"517","line":4,"column":130,"nodeType":"477","messageId":"478","endLine":4,"endColumn":141},{"ruleId":"475","severity":1,"message":"498","line":4,"column":161,"nodeType":"477","messageId":"478","endLine":4,"endColumn":171},{"ruleId":"475","severity":1,"message":"479","line":1,"column":26,"nodeType":"477","messageId":"478","endLine":1,"endColumn":35},{"ruleId":"475","severity":1,"message":"545","line":1,"column":37,"nodeType":"477","messageId":"478","endLine":1,"endColumn":47},{"ruleId":"475","severity":1,"message":"480","line":2,"column":10,"nodeType":"477","messageId":"478","endLine":2,"endColumn":21},{"ruleId":"475","severity":1,"message":"481","line":2,"column":23,"nodeType":"477","messageId":"478","endLine":2,"endColumn":30},{"ruleId":"475","severity":1,"message":"482","line":5,"column":10,"nodeType":"477","messageId":"478","endLine":5,"endColumn":13},{"ruleId":"475","severity":1,"message":"483","line":5,"column":15,"nodeType":"477","messageId":"478","endLine":5,"endColumn":18},{"ruleId":"475","severity":1,"message":"534","line":5,"column":19,"nodeType":"477","messageId":"478","endLine":5,"endColumn":28},{"ruleId":"475","severity":1,"message":"519","line":5,"column":30,"nodeType":"477","messageId":"478","endLine":5,"endColumn":34},{"ruleId":"475","severity":1,"message":"496","line":5,"column":36,"nodeType":"477","messageId":"478","endLine":5,"endColumn":41},{"ruleId":"475","severity":1,"message":"497","line":5,"column":62,"nodeType":"477","messageId":"478","endLine":5,"endColumn":71},{"ruleId":"475","severity":1,"message":"498","line":5,"column":73,"nodeType":"477","messageId":"478","endLine":5,"endColumn":83},{"ruleId":"475","severity":1,"message":"546","line":6,"column":8,"nodeType":"477","messageId":"478","endLine":6,"endColumn":16},{"ruleId":"475","severity":1,"message":"482","line":3,"column":10,"nodeType":"477","messageId":"478","endLine":3,"endColumn":13},{"ruleId":"475","severity":1,"message":"483","line":3,"column":15,"nodeType":"477","messageId":"478","endLine":3,"endColumn":18},{"ruleId":"475","severity":1,"message":"490","line":3,"column":31,"nodeType":"477","messageId":"478","endLine":3,"endColumn":35},{"ruleId":"475","severity":1,"message":"491","line":3,"column":37,"nodeType":"477","messageId":"478","endLine":3,"endColumn":46},{"ruleId":"475","severity":1,"message":"492","line":3,"column":48,"nodeType":"477","messageId":"478","endLine":3,"endColumn":59},{"ruleId":"475","severity":1,"message":"493","line":3,"column":61,"nodeType":"477","messageId":"478","endLine":3,"endColumn":67},{"ruleId":"475","severity":1,"message":"494","line":3,"column":69,"nodeType":"477","messageId":"478","endLine":3,"endColumn":72},{"ruleId":"475","severity":1,"message":"495","line":3,"column":74,"nodeType":"477","messageId":"478","endLine":3,"endColumn":85},{"ruleId":"475","severity":1,"message":"519","line":3,"column":87,"nodeType":"477","messageId":"478","endLine":3,"endColumn":91},{"ruleId":"475","severity":1,"message":"496","line":3,"column":93,"nodeType":"477","messageId":"478","endLine":3,"endColumn":98},{"ruleId":"475","severity":1,"message":"497","line":3,"column":119,"nodeType":"477","messageId":"478","endLine":3,"endColumn":128},{"ruleId":"475","severity":1,"message":"498","line":3,"column":130,"nodeType":"477","messageId":"478","endLine":3,"endColumn":140},{"ruleId":"475","severity":1,"message":"488","line":8,"column":19,"nodeType":"477","messageId":"478","endLine":8,"endColumn":27},{"ruleId":"501","severity":1,"message":"547","line":66,"column":7,"nodeType":"503","endLine":66,"endColumn":9,"suggestions":"548"},{"ruleId":"535","severity":1,"message":"536","line":71,"column":41,"nodeType":"537","messageId":"538","endLine":71,"endColumn":43},{"ruleId":"501","severity":1,"message":"549","line":87,"column":7,"nodeType":"503","endLine":87,"endColumn":23,"suggestions":"550"},{"ruleId":"475","severity":1,"message":"551","line":133,"column":19,"nodeType":"477","messageId":"478","endLine":133,"endColumn":22},{"ruleId":"475","severity":1,"message":"524","line":1,"column":37,"nodeType":"477","messageId":"478","endLine":1,"endColumn":43},{"ruleId":"475","severity":1,"message":"480","line":2,"column":10,"nodeType":"477","messageId":"478","endLine":2,"endColumn":21},{"ruleId":"475","severity":1,"message":"481","line":2,"column":23,"nodeType":"477","messageId":"478","endLine":2,"endColumn":30},{"ruleId":"475","severity":1,"message":"487","line":4,"column":44,"nodeType":"477","messageId":"478","endLine":4,"endColumn":49},{"ruleId":"475","severity":1,"message":"552","line":15,"column":24,"nodeType":"477","messageId":"478","endLine":15,"endColumn":37},{"ruleId":"475","severity":1,"message":"480","line":2,"column":10,"nodeType":"477","messageId":"478","endLine":2,"endColumn":21},{"ruleId":"475","severity":1,"message":"487","line":4,"column":44,"nodeType":"477","messageId":"478","endLine":4,"endColumn":49},{"ruleId":"475","severity":1,"message":"511","line":4,"column":51,"nodeType":"477","messageId":"478","endLine":4,"endColumn":64},{"ruleId":"475","severity":1,"message":"512","line":4,"column":66,"nodeType":"477","messageId":"478","endLine":4,"endColumn":73},{"ruleId":"475","severity":1,"message":"513","line":4,"column":75,"nodeType":"477","messageId":"478","endLine":4,"endColumn":83},{"ruleId":"475","severity":1,"message":"514","line":4,"column":85,"nodeType":"477","messageId":"478","endLine":4,"endColumn":96},{"ruleId":"475","severity":1,"message":"515","line":4,"column":98,"nodeType":"477","messageId":"478","endLine":4,"endColumn":112},{"ruleId":"475","severity":1,"message":"516","line":4,"column":114,"nodeType":"477","messageId":"478","endLine":4,"endColumn":128},{"ruleId":"475","severity":1,"message":"517","line":4,"column":130,"nodeType":"477","messageId":"478","endLine":4,"endColumn":141},{"ruleId":"475","severity":1,"message":"553","line":18,"column":12,"nodeType":"477","messageId":"478","endLine":18,"endColumn":22},{"ruleId":"535","severity":1,"message":"536","line":65,"column":36,"nodeType":"537","messageId":"538","endLine":65,"endColumn":38},{"ruleId":"501","severity":1,"message":"554","line":190,"column":7,"nodeType":"503","endLine":190,"endColumn":17,"suggestions":"555"},{"ruleId":"535","severity":1,"message":"536","line":206,"column":54,"nodeType":"537","messageId":"538","endLine":206,"endColumn":56},{"ruleId":"475","severity":1,"message":"556","line":279,"column":11,"nodeType":"477","messageId":"478","endLine":279,"endColumn":22},{"ruleId":"475","severity":1,"message":"557","line":284,"column":11,"nodeType":"477","messageId":"478","endLine":284,"endColumn":25},{"ruleId":"531","severity":1,"message":"532","line":452,"column":41,"nodeType":"533","endLine":456,"endColumn":43},{"ruleId":"531","severity":1,"message":"532","line":533,"column":41,"nodeType":"533","endLine":535,"endColumn":68},{"ruleId":"475","severity":1,"message":"480","line":2,"column":10,"nodeType":"477","messageId":"478","endLine":2,"endColumn":21},{"ruleId":"475","severity":1,"message":"487","line":4,"column":44,"nodeType":"477","messageId":"478","endLine":4,"endColumn":49},{"ruleId":"475","severity":1,"message":"511","line":4,"column":51,"nodeType":"477","messageId":"478","endLine":4,"endColumn":64},{"ruleId":"475","severity":1,"message":"512","line":4,"column":66,"nodeType":"477","messageId":"478","endLine":4,"endColumn":73},{"ruleId":"475","severity":1,"message":"513","line":4,"column":75,"nodeType":"477","messageId":"478","endLine":4,"endColumn":83},{"ruleId":"475","severity":1,"message":"514","line":4,"column":85,"nodeType":"477","messageId":"478","endLine":4,"endColumn":96},{"ruleId":"475","severity":1,"message":"515","line":4,"column":98,"nodeType":"477","messageId":"478","endLine":4,"endColumn":112},{"ruleId":"475","severity":1,"message":"516","line":4,"column":114,"nodeType":"477","messageId":"478","endLine":4,"endColumn":128},{"ruleId":"475","severity":1,"message":"558","line":43,"column":11,"nodeType":"477","messageId":"478","endLine":43,"endColumn":23},{"ruleId":"535","severity":1,"message":"536","line":94,"column":61,"nodeType":"537","messageId":"538","endLine":94,"endColumn":63},{"ruleId":"501","severity":1,"message":"559","line":112,"column":7,"nodeType":"503","endLine":112,"endColumn":35,"suggestions":"560"},{"ruleId":"501","severity":1,"message":"554","line":147,"column":7,"nodeType":"503","endLine":147,"endColumn":17,"suggestions":"561"},{"ruleId":"535","severity":1,"message":"536","line":164,"column":65,"nodeType":"537","messageId":"538","endLine":164,"endColumn":67},{"ruleId":"535","severity":1,"message":"536","line":259,"column":36,"nodeType":"537","messageId":"538","endLine":259,"endColumn":38},{"ruleId":"535","severity":1,"message":"536","line":397,"column":49,"nodeType":"537","messageId":"538","endLine":397,"endColumn":51},{"ruleId":"531","severity":1,"message":"532","line":539,"column":41,"nodeType":"533","endLine":543,"endColumn":43},{"ruleId":"531","severity":1,"message":"532","line":621,"column":41,"nodeType":"533","endLine":625,"endColumn":43},{"ruleId":"475","severity":1,"message":"518","line":1,"column":26,"nodeType":"477","messageId":"478","endLine":1,"endColumn":41},{"ruleId":"475","severity":1,"message":"482","line":3,"column":10,"nodeType":"477","messageId":"478","endLine":3,"endColumn":13},{"ruleId":"475","severity":1,"message":"483","line":3,"column":15,"nodeType":"477","messageId":"478","endLine":3,"endColumn":18},{"ruleId":"475","severity":1,"message":"534","line":3,"column":20,"nodeType":"477","messageId":"478","endLine":3,"endColumn":29},{"ruleId":"475","severity":1,"message":"490","line":3,"column":31,"nodeType":"477","messageId":"478","endLine":3,"endColumn":35},{"ruleId":"475","severity":1,"message":"491","line":3,"column":37,"nodeType":"477","messageId":"478","endLine":3,"endColumn":46},{"ruleId":"475","severity":1,"message":"492","line":3,"column":48,"nodeType":"477","messageId":"478","endLine":3,"endColumn":59},{"ruleId":"475","severity":1,"message":"493","line":3,"column":61,"nodeType":"477","messageId":"478","endLine":3,"endColumn":67},{"ruleId":"475","severity":1,"message":"494","line":3,"column":69,"nodeType":"477","messageId":"478","endLine":3,"endColumn":72},{"ruleId":"475","severity":1,"message":"495","line":3,"column":74,"nodeType":"477","messageId":"478","endLine":3,"endColumn":85},{"ruleId":"475","severity":1,"message":"519","line":3,"column":87,"nodeType":"477","messageId":"478","endLine":3,"endColumn":91},{"ruleId":"475","severity":1,"message":"496","line":3,"column":93,"nodeType":"477","messageId":"478","endLine":3,"endColumn":98},{"ruleId":"475","severity":1,"message":"497","line":3,"column":119,"nodeType":"477","messageId":"478","endLine":3,"endColumn":128},{"ruleId":"475","severity":1,"message":"498","line":3,"column":130,"nodeType":"477","messageId":"478","endLine":3,"endColumn":140},{"ruleId":"501","severity":1,"message":"562","line":25,"column":7,"nodeType":"503","endLine":25,"endColumn":9,"suggestions":"563"},{"ruleId":"475","severity":1,"message":"518","line":1,"column":26,"nodeType":"477","messageId":"478","endLine":1,"endColumn":41},{"ruleId":"475","severity":1,"message":"490","line":3,"column":31,"nodeType":"477","messageId":"478","endLine":3,"endColumn":35},{"ruleId":"475","severity":1,"message":"491","line":3,"column":37,"nodeType":"477","messageId":"478","endLine":3,"endColumn":46},{"ruleId":"475","severity":1,"message":"492","line":3,"column":48,"nodeType":"477","messageId":"478","endLine":3,"endColumn":59},{"ruleId":"475","severity":1,"message":"493","line":3,"column":61,"nodeType":"477","messageId":"478","endLine":3,"endColumn":67},{"ruleId":"475","severity":1,"message":"494","line":3,"column":69,"nodeType":"477","messageId":"478","endLine":3,"endColumn":72},{"ruleId":"475","severity":1,"message":"495","line":3,"column":74,"nodeType":"477","messageId":"478","endLine":3,"endColumn":85},{"ruleId":"475","severity":1,"message":"519","line":3,"column":87,"nodeType":"477","messageId":"478","endLine":3,"endColumn":91},{"ruleId":"475","severity":1,"message":"496","line":3,"column":93,"nodeType":"477","messageId":"478","endLine":3,"endColumn":98},{"ruleId":"475","severity":1,"message":"497","line":3,"column":119,"nodeType":"477","messageId":"478","endLine":3,"endColumn":128},{"ruleId":"475","severity":1,"message":"498","line":3,"column":130,"nodeType":"477","messageId":"478","endLine":3,"endColumn":140},{"ruleId":"501","severity":1,"message":"564","line":43,"column":7,"nodeType":"503","endLine":43,"endColumn":9,"suggestions":"565"},{"ruleId":"475","severity":1,"message":"545","line":1,"column":26,"nodeType":"477","messageId":"478","endLine":1,"endColumn":36},{"ruleId":"475","severity":1,"message":"479","line":1,"column":38,"nodeType":"477","messageId":"478","endLine":1,"endColumn":47},{"ruleId":"475","severity":1,"message":"482","line":3,"column":10,"nodeType":"477","messageId":"478","endLine":3,"endColumn":13},{"ruleId":"475","severity":1,"message":"483","line":3,"column":15,"nodeType":"477","messageId":"478","endLine":3,"endColumn":18},{"ruleId":"475","severity":1,"message":"534","line":3,"column":20,"nodeType":"477","messageId":"478","endLine":3,"endColumn":29},{"ruleId":"475","severity":1,"message":"490","line":3,"column":31,"nodeType":"477","messageId":"478","endLine":3,"endColumn":35},{"ruleId":"475","severity":1,"message":"491","line":3,"column":37,"nodeType":"477","messageId":"478","endLine":3,"endColumn":46},{"ruleId":"475","severity":1,"message":"492","line":3,"column":48,"nodeType":"477","messageId":"478","endLine":3,"endColumn":59},{"ruleId":"475","severity":1,"message":"493","line":3,"column":61,"nodeType":"477","messageId":"478","endLine":3,"endColumn":67},{"ruleId":"475","severity":1,"message":"494","line":3,"column":69,"nodeType":"477","messageId":"478","endLine":3,"endColumn":72},{"ruleId":"475","severity":1,"message":"495","line":3,"column":74,"nodeType":"477","messageId":"478","endLine":3,"endColumn":85},{"ruleId":"475","severity":1,"message":"519","line":3,"column":87,"nodeType":"477","messageId":"478","endLine":3,"endColumn":91},{"ruleId":"475","severity":1,"message":"496","line":3,"column":93,"nodeType":"477","messageId":"478","endLine":3,"endColumn":98},{"ruleId":"475","severity":1,"message":"497","line":3,"column":119,"nodeType":"477","messageId":"478","endLine":3,"endColumn":128},{"ruleId":"475","severity":1,"message":"498","line":3,"column":130,"nodeType":"477","messageId":"478","endLine":3,"endColumn":140},{"ruleId":"475","severity":1,"message":"545","line":1,"column":26,"nodeType":"477","messageId":"478","endLine":1,"endColumn":36},{"ruleId":"475","severity":1,"message":"482","line":3,"column":10,"nodeType":"477","messageId":"478","endLine":3,"endColumn":13},{"ruleId":"475","severity":1,"message":"483","line":3,"column":15,"nodeType":"477","messageId":"478","endLine":3,"endColumn":18},{"ruleId":"475","severity":1,"message":"490","line":3,"column":31,"nodeType":"477","messageId":"478","endLine":3,"endColumn":35},{"ruleId":"475","severity":1,"message":"491","line":3,"column":37,"nodeType":"477","messageId":"478","endLine":3,"endColumn":46},{"ruleId":"475","severity":1,"message":"492","line":3,"column":48,"nodeType":"477","messageId":"478","endLine":3,"endColumn":59},{"ruleId":"475","severity":1,"message":"493","line":3,"column":61,"nodeType":"477","messageId":"478","endLine":3,"endColumn":67},{"ruleId":"475","severity":1,"message":"494","line":3,"column":69,"nodeType":"477","messageId":"478","endLine":3,"endColumn":72},{"ruleId":"475","severity":1,"message":"495","line":3,"column":74,"nodeType":"477","messageId":"478","endLine":3,"endColumn":85},{"ruleId":"475","severity":1,"message":"496","line":3,"column":93,"nodeType":"477","messageId":"478","endLine":3,"endColumn":98},{"ruleId":"475","severity":1,"message":"497","line":3,"column":119,"nodeType":"477","messageId":"478","endLine":3,"endColumn":128},{"ruleId":"475","severity":1,"message":"498","line":3,"column":130,"nodeType":"477","messageId":"478","endLine":3,"endColumn":140},{"ruleId":"501","severity":1,"message":"562","line":28,"column":7,"nodeType":"503","endLine":28,"endColumn":9,"suggestions":"566"},{"ruleId":"475","severity":1,"message":"490","line":4,"column":31,"nodeType":"477","messageId":"478","endLine":4,"endColumn":35},{"ruleId":"475","severity":1,"message":"491","line":4,"column":37,"nodeType":"477","messageId":"478","endLine":4,"endColumn":46},{"ruleId":"475","severity":1,"message":"492","line":4,"column":48,"nodeType":"477","messageId":"478","endLine":4,"endColumn":59},{"ruleId":"475","severity":1,"message":"493","line":4,"column":61,"nodeType":"477","messageId":"478","endLine":4,"endColumn":67},{"ruleId":"475","severity":1,"message":"494","line":4,"column":69,"nodeType":"477","messageId":"478","endLine":4,"endColumn":72},{"ruleId":"475","severity":1,"message":"495","line":4,"column":74,"nodeType":"477","messageId":"478","endLine":4,"endColumn":85},{"ruleId":"475","severity":1,"message":"519","line":4,"column":87,"nodeType":"477","messageId":"478","endLine":4,"endColumn":91},{"ruleId":"475","severity":1,"message":"496","line":4,"column":93,"nodeType":"477","messageId":"478","endLine":4,"endColumn":98},{"ruleId":"475","severity":1,"message":"497","line":4,"column":119,"nodeType":"477","messageId":"478","endLine":4,"endColumn":128},{"ruleId":"475","severity":1,"message":"498","line":4,"column":130,"nodeType":"477","messageId":"478","endLine":4,"endColumn":140},{"ruleId":"475","severity":1,"message":"488","line":9,"column":19,"nodeType":"477","messageId":"478","endLine":9,"endColumn":27},{"ruleId":"535","severity":1,"message":"536","line":31,"column":62,"nodeType":"537","messageId":"538","endLine":31,"endColumn":64},{"ruleId":"501","severity":1,"message":"567","line":43,"column":7,"nodeType":"503","endLine":43,"endColumn":9,"suggestions":"568"},{"ruleId":"501","severity":1,"message":"547","line":175,"column":7,"nodeType":"503","endLine":175,"endColumn":9,"suggestions":"569"},{"ruleId":"531","severity":1,"message":"532","line":342,"column":37,"nodeType":"533","endLine":345,"endColumn":39},{"ruleId":"531","severity":1,"message":"532","line":361,"column":45,"nodeType":"533","endLine":364,"endColumn":47},{"ruleId":"475","severity":1,"message":"518","line":1,"column":26,"nodeType":"477","messageId":"478","endLine":1,"endColumn":41},{"ruleId":"475","severity":1,"message":"479","line":1,"column":43,"nodeType":"477","messageId":"478","endLine":1,"endColumn":52},{"ruleId":"475","severity":1,"message":"482","line":3,"column":10,"nodeType":"477","messageId":"478","endLine":3,"endColumn":13},{"ruleId":"475","severity":1,"message":"483","line":3,"column":15,"nodeType":"477","messageId":"478","endLine":3,"endColumn":18},{"ruleId":"475","severity":1,"message":"490","line":3,"column":31,"nodeType":"477","messageId":"478","endLine":3,"endColumn":35},{"ruleId":"475","severity":1,"message":"491","line":3,"column":37,"nodeType":"477","messageId":"478","endLine":3,"endColumn":46},{"ruleId":"475","severity":1,"message":"492","line":3,"column":48,"nodeType":"477","messageId":"478","endLine":3,"endColumn":59},{"ruleId":"475","severity":1,"message":"493","line":3,"column":61,"nodeType":"477","messageId":"478","endLine":3,"endColumn":67},{"ruleId":"475","severity":1,"message":"494","line":3,"column":69,"nodeType":"477","messageId":"478","endLine":3,"endColumn":72},{"ruleId":"475","severity":1,"message":"495","line":3,"column":74,"nodeType":"477","messageId":"478","endLine":3,"endColumn":85},{"ruleId":"475","severity":1,"message":"496","line":3,"column":93,"nodeType":"477","messageId":"478","endLine":3,"endColumn":98},{"ruleId":"475","severity":1,"message":"497","line":3,"column":119,"nodeType":"477","messageId":"478","endLine":3,"endColumn":128},{"ruleId":"475","severity":1,"message":"498","line":3,"column":130,"nodeType":"477","messageId":"478","endLine":3,"endColumn":140},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useNavigate' is defined but never used.","'NavLink' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Fade' is defined but never used.","'Button' is defined but never used.","'ListGroup' is defined but never used.","'Badge' is defined but never used.","'dispatch' is assigned a value but never used.","'GoogleLogin' is defined but never used.","'Card' is defined but never used.","'CardGroup' is defined but never used.","'ProgressBar' is defined but never used.","'Navbar' is defined but never used.","'Nav' is defined but never used.","'NavDropdown' is defined but never used.","'Image' is defined but never used.","'Offcanvas' is defined but never used.","'InputGroup' is defined but never used.","'WatchVideo' is defined but never used.","'state' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleResponce'. Either include it or remove the dependency array.","ArrayExpression",["570"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["571","572"],["573","574"],"'FloatingLabel' is defined but never used.","'Popover' is defined but never used.","'Dropdown' is defined but never used.","'ButtonGroup' is defined but never used.","'DropdownButton' is defined but never used.","'OverlayTrigger' is defined but never used.","'FormControl' is defined but never used.","'useLayoutEffect' is defined but never used.","'Form' is defined but never used.","'Modal' is defined but never used.","'SearchMembers' is defined but never used.","'Messages' is defined but never used.","'UserContext' is defined but never used.","'useRef' is defined but never used.","'userConnection' is assigned a value but never used.","'senderchatId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userProfile'. Either include it or remove the dependency array.",["575"],"React Hook useEffect has missing dependencies: 'allMessages' and 'notification'. Either include them or remove the dependency array.",["576"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Container' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'compareIds'. Either include it or remove the dependency array.",["577"],"React Hook useEffect has a missing dependency: 'createEvents'. Either include it or remove the dependency array.",["578"],"'fecthAfterDelete' is assigned a value but never used.","'setFecthAfterDelete' is assigned a value but never used.","'useContext' is defined but never used.","'image_S1' is defined but never used.","React Hook useEffect has a missing dependency: 'showPhases'. Either include it or remove the dependency array.",["579"],"React Hook useEffect has a missing dependency: 'handelAssigning'. Either include it or remove the dependency array.",["580"],"'tok' is assigned a value but never used.","'setDefaultCat' is assigned a value but never used.","'desigModal' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'showSearchResult'. Either include it or remove the dependency array.",["581"],"'changeDesig' is assigned a value but never used.","'handleDeisgBtn' is assigned a value but never used.","'handleInputs' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'forUpdatingProject'. Either include it or remove the dependency array.",["582"],["583"],"React Hook useEffect has a missing dependency: 'setNoteForm'. Either include it or remove the dependency array.",["584"],"React Hook useEffect has a missing dependency: 'getNotifications'. Either include it or remove the dependency array.",["585"],["586"],"React Hook useEffect has a missing dependency: 'checkMembers'. Either include it or remove the dependency array.",["587"],["588"],{"desc":"589","fix":"590"},{"messageId":"591","fix":"592","desc":"593"},{"messageId":"594","fix":"595","desc":"596"},{"messageId":"591","fix":"597","desc":"593"},{"messageId":"594","fix":"598","desc":"596"},{"desc":"599","fix":"600"},{"desc":"601","fix":"602"},{"desc":"603","fix":"604"},{"desc":"605","fix":"606"},{"desc":"607","fix":"608"},{"desc":"609","fix":"610"},{"desc":"611","fix":"612"},{"desc":"613","fix":"614"},{"desc":"611","fix":"615"},{"desc":"616","fix":"617"},{"desc":"618","fix":"619"},{"desc":"616","fix":"620"},{"desc":"621","fix":"622"},{"desc":"607","fix":"623"},"Update the dependencies array to be: [handleResponce]",{"range":"624","text":"625"},"removeEscape",{"range":"626","text":"627"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"628","text":"629"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"630","text":"627"},{"range":"631","text":"629"},"Update the dependencies array to be: [userProfile]",{"range":"632","text":"633"},"Update the dependencies array to be: [allMessages, notification]",{"range":"634","text":"635"},"Update the dependencies array to be: [compareIds, searchResult]",{"range":"636","text":"637"},"Update the dependencies array to be: [tasks, projects, createEvents]",{"range":"638","text":"639"},"Update the dependencies array to be: [showPhases]",{"range":"640","text":"641"},"Update the dependencies array to be: [assignedPhases, handelAssigning]",{"range":"642","text":"643"},"Update the dependencies array to be: [showSearchResult, txtInput]",{"range":"644","text":"645"},"Update the dependencies array to be: [forUpdatingProject, projectData.currentProject]",{"range":"646","text":"647"},{"range":"648","text":"645"},"Update the dependencies array to be: [setNoteForm]",{"range":"649","text":"650"},"Update the dependencies array to be: [getNotifications]",{"range":"651","text":"652"},{"range":"653","text":"650"},"Update the dependencies array to be: [checkMembers]",{"range":"654","text":"655"},{"range":"656","text":"641"},[3180,3182],"[handleResponce]",[4811,4812],"",[4811,4811],"\\",[4827,4828],[4827,4827],[3390,3392],"[userProfile]",[10255,10257],"[allMessages, notification]",[4478,4492],"[compareIds, searchResult]",[2410,2427],"[tasks, projects, createEvents]",[2678,2680],"[showPhases]",[3139,3155],"[assignedPhases, handelAssigning]",[6502,6512],"[showSearchResult, txtInput]",[3965,3993],"[forUpdatingProject, projectData.currentProject]",[4624,4634],[936,938],"[setNoteForm]",[1691,1693],"[getNotifications]",[1047,1049],[1980,1982],"[checkMembers]",[6680,6682]]