{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Asus/Desktop/test11070/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/Asus/Desktop/test11070/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Asus/Desktop/test11070/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Asus/Desktop/test11070/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Asus/Desktop/test11070/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Asus/Desktop/test11070/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Asus/Desktop/test11070/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\n\nvar RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\nexport var Socket = /*#__PURE__*/function (_Emitter) {\n  _inherits(Socket, _Emitter);\n\n  var _super = _createSuper(Socket);\n\n  /**\r\n   * `Socket` constructor.\r\n   *\r\n   * @public\r\n   */\n  function Socket(io, nsp, opts) {\n    var _this;\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this);\n    _this.connected = false;\n    _this.receiveBuffer = [];\n    _this.sendBuffer = [];\n    _this.ids = 0;\n    _this.acks = {};\n    _this.flags = {};\n    _this.io = io;\n    _this.nsp = nsp;\n\n    if (opts && opts.auth) {\n      _this.auth = opts.auth;\n    }\n\n    if (_this.io._autoConnect) _this.open();\n    return _this;\n  }\n  /**\r\n   * Whether the socket is currently disconnected\r\n   */\n\n\n  _createClass(Socket, [{\n    key: \"disconnected\",\n    get: function get() {\n      return !this.connected;\n    }\n    /**\r\n     * Subscribe to open, close and packet events\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"subEvents\",\n    value: function subEvents() {\n      if (this.subs) return;\n      var io = this.io;\n      this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\r\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\r\n     */\n\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !!this.subs;\n    }\n    /**\r\n     * \"Opens\" the socket.\r\n     *\r\n     * @public\r\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\r\n     * Alias for connect()\r\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this.connect();\n    }\n    /**\r\n     * Sends a `message` event.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\r\n     * Override `emit`.\r\n     * If the event is in `events`, it's emitted normally.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev + '\" is a reserved event name');\n      }\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      args.unshift(ev);\n      var packet = {\n        type: PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false; // event ack callback\n\n      if (\"function\" === typeof args[args.length - 1]) {\n        var id = this.ids++;\n        var ack = args.pop();\n\n        this._registerAckCallback(id, ack);\n\n        packet.id = id;\n      }\n\n      var isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n      var discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n\n      if (discardPacket) {} else if (this.connected) {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n\n      this.flags = {};\n      return this;\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_registerAckCallback\",\n    value: function _registerAckCallback(id, ack) {\n      var _this2 = this;\n\n      var timeout = this.flags.timeout;\n\n      if (timeout === undefined) {\n        this.acks[id] = ack;\n        return;\n      } // @ts-ignore\n\n\n      var timer = this.io.setTimeoutFn(function () {\n        delete _this2.acks[id];\n\n        for (var i = 0; i < _this2.sendBuffer.length; i++) {\n          if (_this2.sendBuffer[i].id === id) {\n            _this2.sendBuffer.splice(i, 1);\n          }\n        }\n\n        ack.call(_this2, new Error(\"operation has timed out\"));\n      }, timeout);\n\n      this.acks[id] = function () {\n        // @ts-ignore\n        _this2.io.clearTimeoutFn(timer);\n\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        ack.apply(_this2, [null].concat(args));\n      };\n    }\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      _packet.nsp = this.nsp;\n\n      this.io._packet(_packet);\n    }\n    /**\r\n     * Called upon engine `open`.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      var _this3 = this;\n\n      if (typeof this.auth == \"function\") {\n        this.auth(function (data) {\n          _this3.packet({\n            type: PacketType.CONNECT,\n            data: data\n          });\n        });\n      } else {\n        this.packet({\n          type: PacketType.CONNECT,\n          data: this.auth\n        });\n      }\n    }\n    /**\r\n     * Called upon engine or manager `error`.\r\n     *\r\n     * @param err\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      if (!this.connected) {\n        this.emitReserved(\"connect_error\", err);\n      }\n    }\n    /**\r\n     * Called upon engine `close`.\r\n     *\r\n     * @param reason\r\n     * @param description\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason, description) {\n      this.connected = false;\n      delete this.id;\n      this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\r\n     * Called with socket packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onpacket\",\n    value: function onpacket(packet) {\n      var sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n\n      switch (packet.type) {\n        case PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            var id = packet.data.sid;\n            this.onconnect(id);\n          } else {\n            this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n\n          break;\n\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n\n        case PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n\n        case PacketType.CONNECT_ERROR:\n          this.destroy();\n          var err = new Error(packet.data.message); // @ts-ignore\n\n          err.data = packet.data.data;\n          this.emitReserved(\"connect_error\", err);\n          break;\n      }\n    }\n    /**\r\n     * Called upon a server event.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n\n      if (null != packet.id) {\n        args.push(this.ack(packet.id));\n      }\n\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n\n        var _iterator = _createForOfIteratorHelper(listeners),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n    }\n    /**\r\n     * Produces an ack callback to emit with an event.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n\n        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n\n        self.packet({\n          type: PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\r\n     * Called upon a server acknowlegement.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks[packet.id];\n\n      if (\"function\" === typeof ack) {\n        ack.apply(this, packet.data);\n        delete this.acks[packet.id];\n      } else {}\n    }\n    /**\r\n     * Called upon server connect.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onconnect\",\n    value: function onconnect(id) {\n      this.id = id;\n      this.connected = true;\n      this.emitBuffered();\n      this.emitReserved(\"connect\");\n    }\n    /**\r\n     * Emit buffered events (received and emitted).\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"emitBuffered\",\n    value: function emitBuffered() {\n      var _this4 = this;\n\n      this.receiveBuffer.forEach(function (args) {\n        return _this4.emitEvent(args);\n      });\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(function (packet) {\n        _this4.notifyOutgoingListeners(packet);\n\n        _this4.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\r\n     * Called upon server disconnect.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\r\n     * Called upon forced client/server side disconnections,\r\n     * this method ensures the manager stops tracking us and\r\n     * that reconnections don't get triggered for this.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(function (subDestroy) {\n          return subDestroy();\n        });\n        this.subs = undefined;\n      }\n\n      this.io[\"_destroy\"](this);\n    }\n    /**\r\n     * Disconnects the socket manually.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.connected) {\n        this.packet({\n          type: PacketType.DISCONNECT\n        });\n      } // remove socket from pool\n\n\n      this.destroy();\n\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n\n      return this;\n    }\n    /**\r\n     * Alias for disconnect()\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.disconnect();\n    }\n    /**\r\n     * Sets the compress flag.\r\n     *\r\n     * @param compress - if `true`, compresses the sending data\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\r\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n     * ready to send messages.\r\n     *\r\n     * @returns self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\r\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\r\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\r\n     *\r\n     * ```\r\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\r\n     *   if (err) {\r\n     *     // the server did not acknowledge the event in the given delay\r\n     *   }\r\n     * });\r\n     * ```\r\n     *\r\n     * @returns self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"timeout\",\n    value: function timeout(_timeout) {\n      this.flags.timeout = _timeout;\n      return this;\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\n\n  }, {\n    key: \"onAny\",\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.push(listener);\n\n      return this;\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\n\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.unshift(listener);\n\n      return this;\n    }\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\n\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n\n      return this;\n    }\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     *\r\n     * @public\r\n     */\n\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @param listener\r\n     *\r\n     * <pre><code>\r\n     *\r\n     * socket.onAnyOutgoing((event, ...args) => {\r\n     *   console.log(event);\r\n     * });\r\n     *\r\n     * </pre></code>\r\n     *\r\n     * @public\r\n     */\n\n  }, {\n    key: \"onAnyOutgoing\",\n    value: function onAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n      this._anyOutgoingListeners.push(listener);\n\n      return this;\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @param listener\r\n     *\r\n     * <pre><code>\r\n     *\r\n     * socket.prependAnyOutgoing((event, ...args) => {\r\n     *   console.log(event);\r\n     * });\r\n     *\r\n     * </pre></code>\r\n     *\r\n     * @public\r\n     */\n\n  }, {\n    key: \"prependAnyOutgoing\",\n    value: function prependAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n      this._anyOutgoingListeners.unshift(listener);\n\n      return this;\n    }\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @param listener\r\n     *\r\n     * <pre><code>\r\n     *\r\n     * const handler = (event, ...args) => {\r\n     *   console.log(event);\r\n     * }\r\n     *\r\n     * socket.onAnyOutgoing(handler);\r\n     *\r\n     * // then later\r\n     * socket.offAnyOutgoing(handler);\r\n     *\r\n     * </pre></code>\r\n     *\r\n     * @public\r\n     */\n\n  }, {\n    key: \"offAnyOutgoing\",\n    value: function offAnyOutgoing(listener) {\n      if (!this._anyOutgoingListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyOutgoingListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyOutgoingListeners = [];\n      }\n\n      return this;\n    }\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     *\r\n     * @public\r\n     */\n\n  }, {\n    key: \"listenersAnyOutgoing\",\n    value: function listenersAnyOutgoing() {\n      return this._anyOutgoingListeners || [];\n    }\n    /**\r\n     * Notify the listeners for each packet sent\r\n     *\r\n     * @param packet\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"notifyOutgoingListeners\",\n    value: function notifyOutgoingListeners(packet) {\n      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n        var listeners = this._anyOutgoingListeners.slice();\n\n        var _iterator2 = _createForOfIteratorHelper(listeners),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var listener = _step2.value;\n            listener.apply(this, packet.data);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  }]);\n\n  return Socket;\n}(Emitter);","map":{"version":3,"sources":["C:/Users/Asus/Desktop/test11070/node_modules/socket.io-client/build/esm/socket.js"],"names":["PacketType","on","Emitter","RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","io","nsp","opts","connected","receiveBuffer","sendBuffer","ids","acks","flags","auth","_autoConnect","open","subs","onopen","bind","onpacket","onerror","onclose","subEvents","_readyState","args","unshift","emit","apply","ev","hasOwnProperty","Error","packet","type","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","volatile","notifyOutgoingListeners","push","timeout","undefined","timer","setTimeoutFn","i","splice","call","clearTimeoutFn","_packet","CONNECT","err","emitReserved","reason","description","sameNamespace","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","subDestroy","_anyOutgoingListeners"],"mappings":"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","sourcesContent":["import { PacketType } from \"socket.io-parser\";\r\nimport { on } from \"./on.js\";\r\nimport { Emitter, } from \"@socket.io/component-emitter\";\r\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\r\nconst RESERVED_EVENTS = Object.freeze({\r\n    connect: 1,\r\n    connect_error: 1,\r\n    disconnect: 1,\r\n    disconnecting: 1,\r\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\r\n    newListener: 1,\r\n    removeListener: 1,\r\n});\r\nexport class Socket extends Emitter {\r\n    /**\r\n     * `Socket` constructor.\r\n     *\r\n     * @public\r\n     */\r\n    constructor(io, nsp, opts) {\r\n        super();\r\n        this.connected = false;\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer = [];\r\n        this.ids = 0;\r\n        this.acks = {};\r\n        this.flags = {};\r\n        this.io = io;\r\n        this.nsp = nsp;\r\n        if (opts && opts.auth) {\r\n            this.auth = opts.auth;\r\n        }\r\n        if (this.io._autoConnect)\r\n            this.open();\r\n    }\r\n    /**\r\n     * Whether the socket is currently disconnected\r\n     */\r\n    get disconnected() {\r\n        return !this.connected;\r\n    }\r\n    /**\r\n     * Subscribe to open, close and packet events\r\n     *\r\n     * @private\r\n     */\r\n    subEvents() {\r\n        if (this.subs)\r\n            return;\r\n        const io = this.io;\r\n        this.subs = [\r\n            on(io, \"open\", this.onopen.bind(this)),\r\n            on(io, \"packet\", this.onpacket.bind(this)),\r\n            on(io, \"error\", this.onerror.bind(this)),\r\n            on(io, \"close\", this.onclose.bind(this)),\r\n        ];\r\n    }\r\n    /**\r\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\r\n     */\r\n    get active() {\r\n        return !!this.subs;\r\n    }\r\n    /**\r\n     * \"Opens\" the socket.\r\n     *\r\n     * @public\r\n     */\r\n    connect() {\r\n        if (this.connected)\r\n            return this;\r\n        this.subEvents();\r\n        if (!this.io[\"_reconnecting\"])\r\n            this.io.open(); // ensure open\r\n        if (\"open\" === this.io._readyState)\r\n            this.onopen();\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for connect()\r\n     */\r\n    open() {\r\n        return this.connect();\r\n    }\r\n    /**\r\n     * Sends a `message` event.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    send(...args) {\r\n        args.unshift(\"message\");\r\n        this.emit.apply(this, args);\r\n        return this;\r\n    }\r\n    /**\r\n     * Override `emit`.\r\n     * If the event is in `events`, it's emitted normally.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    emit(ev, ...args) {\r\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\r\n            throw new Error('\"' + ev + '\" is a reserved event name');\r\n        }\r\n        args.unshift(ev);\r\n        const packet = {\r\n            type: PacketType.EVENT,\r\n            data: args,\r\n        };\r\n        packet.options = {};\r\n        packet.options.compress = this.flags.compress !== false;\r\n        // event ack callback\r\n        if (\"function\" === typeof args[args.length - 1]) {\r\n            const id = this.ids++;\r\n            const ack = args.pop();\r\n            this._registerAckCallback(id, ack);\r\n            packet.id = id;\r\n        }\r\n        const isTransportWritable = this.io.engine &&\r\n            this.io.engine.transport &&\r\n            this.io.engine.transport.writable;\r\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\r\n        if (discardPacket) {\r\n        }\r\n        else if (this.connected) {\r\n            this.notifyOutgoingListeners(packet);\r\n            this.packet(packet);\r\n        }\r\n        else {\r\n            this.sendBuffer.push(packet);\r\n        }\r\n        this.flags = {};\r\n        return this;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _registerAckCallback(id, ack) {\r\n        const timeout = this.flags.timeout;\r\n        if (timeout === undefined) {\r\n            this.acks[id] = ack;\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        const timer = this.io.setTimeoutFn(() => {\r\n            delete this.acks[id];\r\n            for (let i = 0; i < this.sendBuffer.length; i++) {\r\n                if (this.sendBuffer[i].id === id) {\r\n                    this.sendBuffer.splice(i, 1);\r\n                }\r\n            }\r\n            ack.call(this, new Error(\"operation has timed out\"));\r\n        }, timeout);\r\n        this.acks[id] = (...args) => {\r\n            // @ts-ignore\r\n            this.io.clearTimeoutFn(timer);\r\n            ack.apply(this, [null, ...args]);\r\n        };\r\n    }\r\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    packet(packet) {\r\n        packet.nsp = this.nsp;\r\n        this.io._packet(packet);\r\n    }\r\n    /**\r\n     * Called upon engine `open`.\r\n     *\r\n     * @private\r\n     */\r\n    onopen() {\r\n        if (typeof this.auth == \"function\") {\r\n            this.auth((data) => {\r\n                this.packet({ type: PacketType.CONNECT, data });\r\n            });\r\n        }\r\n        else {\r\n            this.packet({ type: PacketType.CONNECT, data: this.auth });\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine or manager `error`.\r\n     *\r\n     * @param err\r\n     * @private\r\n     */\r\n    onerror(err) {\r\n        if (!this.connected) {\r\n            this.emitReserved(\"connect_error\", err);\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine `close`.\r\n     *\r\n     * @param reason\r\n     * @param description\r\n     * @private\r\n     */\r\n    onclose(reason, description) {\r\n        this.connected = false;\r\n        delete this.id;\r\n        this.emitReserved(\"disconnect\", reason, description);\r\n    }\r\n    /**\r\n     * Called with socket packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onpacket(packet) {\r\n        const sameNamespace = packet.nsp === this.nsp;\r\n        if (!sameNamespace)\r\n            return;\r\n        switch (packet.type) {\r\n            case PacketType.CONNECT:\r\n                if (packet.data && packet.data.sid) {\r\n                    const id = packet.data.sid;\r\n                    this.onconnect(id);\r\n                }\r\n                else {\r\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\r\n                }\r\n                break;\r\n            case PacketType.EVENT:\r\n            case PacketType.BINARY_EVENT:\r\n                this.onevent(packet);\r\n                break;\r\n            case PacketType.ACK:\r\n            case PacketType.BINARY_ACK:\r\n                this.onack(packet);\r\n                break;\r\n            case PacketType.DISCONNECT:\r\n                this.ondisconnect();\r\n                break;\r\n            case PacketType.CONNECT_ERROR:\r\n                this.destroy();\r\n                const err = new Error(packet.data.message);\r\n                // @ts-ignore\r\n                err.data = packet.data.data;\r\n                this.emitReserved(\"connect_error\", err);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Called upon a server event.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onevent(packet) {\r\n        const args = packet.data || [];\r\n        if (null != packet.id) {\r\n            args.push(this.ack(packet.id));\r\n        }\r\n        if (this.connected) {\r\n            this.emitEvent(args);\r\n        }\r\n        else {\r\n            this.receiveBuffer.push(Object.freeze(args));\r\n        }\r\n    }\r\n    emitEvent(args) {\r\n        if (this._anyListeners && this._anyListeners.length) {\r\n            const listeners = this._anyListeners.slice();\r\n            for (const listener of listeners) {\r\n                listener.apply(this, args);\r\n            }\r\n        }\r\n        super.emit.apply(this, args);\r\n    }\r\n    /**\r\n     * Produces an ack callback to emit with an event.\r\n     *\r\n     * @private\r\n     */\r\n    ack(id) {\r\n        const self = this;\r\n        let sent = false;\r\n        return function (...args) {\r\n            // prevent double callbacks\r\n            if (sent)\r\n                return;\r\n            sent = true;\r\n            self.packet({\r\n                type: PacketType.ACK,\r\n                id: id,\r\n                data: args,\r\n            });\r\n        };\r\n    }\r\n    /**\r\n     * Called upon a server acknowlegement.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onack(packet) {\r\n        const ack = this.acks[packet.id];\r\n        if (\"function\" === typeof ack) {\r\n            ack.apply(this, packet.data);\r\n            delete this.acks[packet.id];\r\n        }\r\n        else {\r\n        }\r\n    }\r\n    /**\r\n     * Called upon server connect.\r\n     *\r\n     * @private\r\n     */\r\n    onconnect(id) {\r\n        this.id = id;\r\n        this.connected = true;\r\n        this.emitBuffered();\r\n        this.emitReserved(\"connect\");\r\n    }\r\n    /**\r\n     * Emit buffered events (received and emitted).\r\n     *\r\n     * @private\r\n     */\r\n    emitBuffered() {\r\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer.forEach((packet) => {\r\n            this.notifyOutgoingListeners(packet);\r\n            this.packet(packet);\r\n        });\r\n        this.sendBuffer = [];\r\n    }\r\n    /**\r\n     * Called upon server disconnect.\r\n     *\r\n     * @private\r\n     */\r\n    ondisconnect() {\r\n        this.destroy();\r\n        this.onclose(\"io server disconnect\");\r\n    }\r\n    /**\r\n     * Called upon forced client/server side disconnections,\r\n     * this method ensures the manager stops tracking us and\r\n     * that reconnections don't get triggered for this.\r\n     *\r\n     * @private\r\n     */\r\n    destroy() {\r\n        if (this.subs) {\r\n            // clean subscriptions to avoid reconnections\r\n            this.subs.forEach((subDestroy) => subDestroy());\r\n            this.subs = undefined;\r\n        }\r\n        this.io[\"_destroy\"](this);\r\n    }\r\n    /**\r\n     * Disconnects the socket manually.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    disconnect() {\r\n        if (this.connected) {\r\n            this.packet({ type: PacketType.DISCONNECT });\r\n        }\r\n        // remove socket from pool\r\n        this.destroy();\r\n        if (this.connected) {\r\n            // fire events\r\n            this.onclose(\"io client disconnect\");\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for disconnect()\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    close() {\r\n        return this.disconnect();\r\n    }\r\n    /**\r\n     * Sets the compress flag.\r\n     *\r\n     * @param compress - if `true`, compresses the sending data\r\n     * @return self\r\n     * @public\r\n     */\r\n    compress(compress) {\r\n        this.flags.compress = compress;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n     * ready to send messages.\r\n     *\r\n     * @returns self\r\n     * @public\r\n     */\r\n    get volatile() {\r\n        this.flags.volatile = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\r\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\r\n     *\r\n     * ```\r\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\r\n     *   if (err) {\r\n     *     // the server did not acknowledge the event in the given delay\r\n     *   }\r\n     * });\r\n     * ```\r\n     *\r\n     * @returns self\r\n     * @public\r\n     */\r\n    timeout(timeout) {\r\n        this.flags.timeout = timeout;\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    onAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.push(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    prependAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.unshift(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    offAny(listener) {\r\n        if (!this._anyListeners) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const listeners = this._anyListeners;\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listener === listeners[i]) {\r\n                    listeners.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._anyListeners = [];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     *\r\n     * @public\r\n     */\r\n    listenersAny() {\r\n        return this._anyListeners || [];\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @param listener\r\n     *\r\n     * <pre><code>\r\n     *\r\n     * socket.onAnyOutgoing((event, ...args) => {\r\n     *   console.log(event);\r\n     * });\r\n     *\r\n     * </pre></code>\r\n     *\r\n     * @public\r\n     */\r\n    onAnyOutgoing(listener) {\r\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\r\n        this._anyOutgoingListeners.push(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @param listener\r\n     *\r\n     * <pre><code>\r\n     *\r\n     * socket.prependAnyOutgoing((event, ...args) => {\r\n     *   console.log(event);\r\n     * });\r\n     *\r\n     * </pre></code>\r\n     *\r\n     * @public\r\n     */\r\n    prependAnyOutgoing(listener) {\r\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\r\n        this._anyOutgoingListeners.unshift(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @param listener\r\n     *\r\n     * <pre><code>\r\n     *\r\n     * const handler = (event, ...args) => {\r\n     *   console.log(event);\r\n     * }\r\n     *\r\n     * socket.onAnyOutgoing(handler);\r\n     *\r\n     * // then later\r\n     * socket.offAnyOutgoing(handler);\r\n     *\r\n     * </pre></code>\r\n     *\r\n     * @public\r\n     */\r\n    offAnyOutgoing(listener) {\r\n        if (!this._anyOutgoingListeners) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const listeners = this._anyOutgoingListeners;\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listener === listeners[i]) {\r\n                    listeners.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._anyOutgoingListeners = [];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     *\r\n     * @public\r\n     */\r\n    listenersAnyOutgoing() {\r\n        return this._anyOutgoingListeners || [];\r\n    }\r\n    /**\r\n     * Notify the listeners for each packet sent\r\n     *\r\n     * @param packet\r\n     *\r\n     * @private\r\n     */\r\n    notifyOutgoingListeners(packet) {\r\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\r\n            const listeners = this._anyOutgoingListeners.slice();\r\n            for (const listener of listeners) {\r\n                listener.apply(this, packet.data);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}