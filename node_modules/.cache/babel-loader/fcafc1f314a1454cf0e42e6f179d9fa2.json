{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\test11070\\\\src\\\\components\\\\ProjectNotification.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useLayoutEffect, useEffect } from 'react';\nimport '../stylesheets/displayProjects.css';\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\nimport Toast from 'react-bootstrap/Toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ProjectNotification = _ref => {\n  _s();\n\n  let {\n    projectData\n  } = _ref;\n  const [fullscreen, setFullscreen] = useState(true);\n  const [show, setShow] = useState(false);\n\n  const handleShow = () => {\n    setFullscreen(true);\n    setShow(true);\n  };\n\n  const handleHideModal = () => {\n    setShow(false);\n  };\n\n  const [smShow, setSmShow] = useState(false);\n  const [projectNotifications, setProjectNotifications] = useState([]);\n\n  const getNotifications = async () => {\n    if (projectData) {\n      let selectedProjectId = projectData._id;\n\n      try {\n        const response = await fetch('https://taskhive-hb9j.onrender.com/getProjectNotifications', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            selectedProjectId\n          })\n        });\n        const data = await response.json();\n        setProjectNotifications(data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    getNotifications();\n  }, []);\n\n  const deleteAllNotifications = async () => {\n    if (projectData) {\n      let selectedProjectId = projectData._id;\n\n      try {\n        const response = await fetch('/deleteProjectNotifications', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            selectedProjectId\n          })\n        });\n        const data = await response.json();\n\n        if (response.status === 201 && data) {\n          setSmShow(false);\n          setShow(false);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n      className: \"selectedListItem\",\n      onClick: handleShow,\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa fa-bell chat-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), \"Project Notifications\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      fullscreen: fullscreen,\n      onHide: handleHideModal,\n      backdrop: \"static\",\n      keyboard: false,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        className: \"modalHeader\",\n        children: projectData ? /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: projectData.projectTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Selected Project\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"modalBodyStatic\",\n        children: projectNotifications ? /*#__PURE__*/_jsxDEV(Container, {\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"justify-content-md-center\",\n            children: projectNotifications.map((element, index) => /*#__PURE__*/_jsxDEV(Col, {\n              sm: true,\n              lg: \"4\",\n              children: /*#__PURE__*/_jsxDEV(Toast, {\n                className: \"toastMain\",\n                children: [/*#__PURE__*/_jsxDEV(Toast.Header, {\n                  className: \"toastHeader\",\n                  closeButton: false,\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: element.memberImage,\n                    className: \"rounded me-2 notificationImage\",\n                    alt: \"\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 94,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                    className: \"me-auto\",\n                    children: element.memberName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 95,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                    children: element.notificationDate.substring(0, 10)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 96,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Toast.Body, {\n                  children: [\"\\\"Phase Number \", element.phaseNum, \" : \", element.phaseTitle, \"\\\" has been completed.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 37\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        className: \"modalFooter\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: \"saveBtn\",\n          onClick: () => setSmShow(true),\n          children: \"Delete All Notification\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"sm\",\n      show: smShow,\n      onHide: () => setSmShow(false),\n      \"aria-labelledby\": \"example-modal-sizes-title-sm\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        className: \"modalHeader\",\n        children: projectData ? /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"example-modal-sizes-title-sm\",\n          children: projectData.projectTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"example-modal-sizes-title-sm\",\n          children: \"Selected Project\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"modalBodyStatic\",\n        children: projectNotifications.length > 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Click on \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Proceed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 33\n          }, this), \" button will permanently delete all notifications for this project.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No new notifications.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        className: \"modalFooter\",\n        children: projectNotifications.length > 0 ? /*#__PURE__*/_jsxDEV(Button, {\n          className: \"saveBtn\",\n          onClick: deleteAllNotifications,\n          children: \"Proceed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          className: \"saveBtn\",\n          onClick: () => setSmShow(false),\n          children: \"Ok\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ProjectNotification, \"2ZQgoj0BIKL8egLtwnqJUYX6QK0=\");\n\n_c = ProjectNotification;\nexport default ProjectNotification;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectNotification\");","map":{"version":3,"sources":["C:/Users/Asus/Desktop/test11070/src/components/ProjectNotification.js"],"names":["React","useState","useLayoutEffect","useEffect","Row","Col","Container","Card","CardGroup","ProgressBar","Navbar","Nav","NavDropdown","Form","Image","Button","ListGroup","Offcanvas","InputGroup","Modal","Toast","ProjectNotification","projectData","fullscreen","setFullscreen","show","setShow","handleShow","handleHideModal","smShow","setSmShow","projectNotifications","setProjectNotifications","getNotifications","selectedProjectId","_id","response","fetch","method","headers","body","JSON","stringify","data","json","error","console","log","deleteAllNotifications","status","projectTitle","map","element","index","memberImage","memberName","notificationDate","substring","phaseNum","phaseTitle","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,eAAzB,EAA0CC,SAA1C,QAA0D,OAA1D;AACA,OAAO,oCAAP;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,EAA8BC,IAA9B,EAAoCC,SAApC,EAA+CC,WAA/C,EAA4DC,MAA5D,EAAoEC,GAApE,EAAyEC,WAAzE,EAAsFC,IAAtF,EAA4FC,KAA5F,EAAmGC,MAAnG,EAA2GC,SAA3G,EAAsHC,SAAtH,EAAiIC,UAAjI,EAA6IC,KAA7I,QAA0J,iBAA1J;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;;;AAEA,MAAMC,mBAAmB,GAAG,QAAmB;AAAA;;AAAA,MAAlB;AAACC,IAAAA;AAAD,GAAkB;AAE3C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACwB,IAAD,EAAOC,OAAP,IAAkBzB,QAAQ,CAAC,KAAD,CAAhC;;AACA,QAAM0B,UAAU,GAAG,MAAM;AAACH,IAAAA,aAAa,CAAC,IAAD,CAAb;AAAqBE,IAAAA,OAAO,CAAC,IAAD,CAAP;AAAe,GAA9D;;AACA,QAAME,eAAe,GAAG,MAAK;AAACF,IAAAA,OAAO,CAAC,KAAD,CAAP;AAAgB,GAA9C;;AACA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsB7B,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAAC8B,oBAAD,EAAuBC,uBAAvB,IAAkD/B,QAAQ,CAAC,EAAD,CAAhE;;AAIA,QAAMgC,gBAAgB,GAAG,YAAW;AAChC,QAAGX,WAAH,EAAe;AACX,UAAIY,iBAAiB,GAAGZ,WAAW,CAACa,GAApC;;AACA,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4DAAD,EAA+D;AACvFC,UAAAA,MAAM,EAAE,MAD+E;AAEvFC,UAAAA,OAAO,EAAE;AACL,4BAAiB;AADZ,WAF8E;AAKvFC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACR,YAAAA;AAAD,WAAf;AALiF,SAA/D,CAA5B;AAQA,cAAMS,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;AACAZ,QAAAA,uBAAuB,CAACW,IAAD,CAAvB;AACH,OAXD,CAWE,OAAOE,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ;AACJ,GAlBD;;AAqBA1C,EAAAA,SAAS,CAAC,MAAI;AACV8B,IAAAA,gBAAgB;AACnB,GAFQ,EAEP,EAFO,CAAT;;AAKA,QAAMe,sBAAsB,GAAG,YAAW;AACtC,QAAG1B,WAAH,EAAe;AACX,UAAIY,iBAAiB,GAAGZ,WAAW,CAACa,GAApC;;AACA,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,EAAgC;AACxDC,UAAAA,MAAM,EAAE,MADgD;AAExDC,UAAAA,OAAO,EAAE;AACL,4BAAiB;AADZ,WAF+C;AAKxDC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACR,YAAAA;AAAD,WAAf;AALkD,SAAhC,CAA5B;AAQA,cAAMS,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;;AAEA,YAAGR,QAAQ,CAACa,MAAT,KAAoB,GAApB,IAA2BN,IAA9B,EAAmC;AAC/Bb,UAAAA,SAAS,CAAC,KAAD,CAAT;AACAJ,UAAAA,OAAO,CAAC,KAAD,CAAP;AACH;AAEJ,OAhBD,CAgBE,OAAOmB,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ;AAEJ,GAxBD;;AA2BA,sBACI;AAAA,4BACI,QAAC,SAAD,CAAW,IAAX;AAAgB,MAAA,SAAS,EAAC,kBAA1B;AAA6C,MAAA,OAAO,EAAElB,UAAtD;AAAA,8BACI;AAAG,QAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEF,IAAb;AAAmB,MAAA,UAAU,EAAEF,UAA/B;AAA2C,MAAA,MAAM,EAAEK,eAAnD;AAAoE,MAAA,QAAQ,EAAC,QAA7E;AAAsF,MAAA,QAAQ,EAAE,KAAhG;AAAA,8BACI,QAAC,KAAD,CAAO,MAAP;AAAc,QAAA,WAAW,MAAzB;AAA0B,QAAA,SAAS,EAAC,aAApC;AAAA,kBACKN,WAAW,gBACR,QAAC,KAAD,CAAO,KAAP;AAAA,oBAAcA,WAAW,CAAC4B;AAA1B;AAAA;AAAA;AAAA;AAAA,gBADQ,gBAGR,QAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,cADJ,eAQI,QAAC,KAAD,CAAO,IAAP;AAAY,QAAA,SAAS,EAAC,iBAAtB;AAAA,kBACCnB,oBAAoB,gBACjB,QAAC,SAAD;AAAA,iCACI,QAAC,GAAD;AAAK,YAAA,SAAS,EAAC,2BAAf;AAAA,sBACKA,oBAAoB,CAACoB,GAArB,CAAyB,CAACC,OAAD,EAAUC,KAAV,kBACtB,QAAC,GAAD;AAAK,cAAA,EAAE,MAAP;AAAQ,cAAA,EAAE,EAAC,GAAX;AAAA,qCACI,QAAC,KAAD;AAAO,gBAAA,SAAS,EAAC,WAAjB;AAAA,wCACI,QAAC,KAAD,CAAO,MAAP;AAAc,kBAAA,SAAS,EAAC,aAAxB;AAAsC,kBAAA,WAAW,EAAE,KAAnD;AAAA,0CACI;AAAK,oBAAA,GAAG,EAAED,OAAO,CAACE,WAAlB;AAA+B,oBAAA,SAAS,EAAC,gCAAzC;AAA0E,oBAAA,GAAG,EAAC;AAA9E;AAAA;AAAA;AAAA;AAAA,0BADJ,eAEI;AAAQ,oBAAA,SAAS,EAAC,SAAlB;AAAA,8BAA6BF,OAAO,CAACG;AAArC;AAAA;AAAA;AAAA;AAAA,0BAFJ,eAGI;AAAA,8BAAQH,OAAO,CAACI,gBAAR,CAAyBC,SAAzB,CAAmC,CAAnC,EAAqC,EAArC;AAAR;AAAA;AAAA;AAAA;AAAA,0BAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAMI,QAAC,KAAD,CAAO,IAAP;AAAA,gDACmBL,OAAO,CAACM,QAD3B,SACwCN,OAAO,CAACO,UADhD;AAAA;AAAA;AAAA;AAAA;AAAA,wBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,eAAoBN,KAApB;AAAA;AAAA;AAAA;AAAA,oBADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADiB,gBAoBjB,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AArBJ;AAAA;AAAA;AAAA;AAAA,cARJ,eAgCI,QAAC,KAAD,CAAO,MAAP;AAAc,QAAA,SAAS,EAAC,aAAxB;AAAA,+BACI,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,SAAlB;AAA4B,UAAA,OAAO,EAAE,MAAMvB,SAAS,CAAC,IAAD,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAhCJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAkDA,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,IAAZ;AAAiB,MAAA,IAAI,EAAED,MAAvB;AAA+B,MAAA,MAAM,EAAE,MAAMC,SAAS,CAAC,KAAD,CAAtD;AAA+D,yBAAgB,8BAA/E;AAAA,8BACI,QAAC,KAAD,CAAO,MAAP;AAAc,QAAA,WAAW,MAAzB;AAA0B,QAAA,SAAS,EAAC,aAApC;AAAA,kBACKR,WAAW,gBACR,QAAC,KAAD,CAAO,KAAP;AAAa,UAAA,EAAE,EAAC,8BAAhB;AAAA,oBAAgDA,WAAW,CAAC4B;AAA5D;AAAA;AAAA;AAAA;AAAA,gBADQ,gBAGR,QAAC,KAAD,CAAO,KAAP;AAAa,UAAA,EAAE,EAAC,8BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,cADJ,eAQI,QAAC,KAAD,CAAO,IAAP;AAAY,QAAA,SAAS,EAAC,iBAAtB;AAAA,kBACKnB,oBAAoB,CAAC6B,MAArB,GAA8B,CAA9B,gBACG;AAAA,+CAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADH,gBAGG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,cARJ,eAeI,QAAC,KAAD,CAAO,MAAP;AAAc,QAAA,SAAS,EAAC,aAAxB;AAAA,kBACK7B,oBAAoB,CAAC6B,MAArB,GAA8B,CAA9B,gBACG,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,SAAlB;AAA4B,UAAA,OAAO,EAAEZ,sBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADH,gBAGG,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,SAAlB;AAA4B,UAAA,OAAO,EAAE,MAAMlB,SAAS,CAAC,KAAD,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,cAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAlDA;AAAA,kBADJ;AA8EH,CA9ID;;GAAMT,mB;;KAAAA,mB;AAgJN,eAAeA,mBAAf","sourcesContent":["import React, {useState, useLayoutEffect, useEffect} from 'react'\r\nimport '../stylesheets/displayProjects.css'\r\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\nimport Toast from 'react-bootstrap/Toast';\r\n\r\nconst ProjectNotification = ({projectData}) => {\r\n\r\n    const [fullscreen, setFullscreen] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const handleShow = () => {setFullscreen(true); setShow(true);}\r\n    const handleHideModal = () =>{setShow(false);}\r\n    const [smShow, setSmShow] = useState(false);\r\n    const [projectNotifications, setProjectNotifications] = useState([]);\r\n\r\n\r\n\r\n    const getNotifications = async () =>{\r\n        if(projectData){\r\n            let selectedProjectId = projectData._id;\r\n            try {\r\n                const response = await fetch('https://taskhive-hb9j.onrender.com/getProjectNotifications', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({selectedProjectId}),\r\n                })\r\n    \r\n                const data = await response.json();\r\n                setProjectNotifications(data);\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n  \r\n\r\n    useEffect(()=>{\r\n        getNotifications();\r\n    },[])\r\n\r\n\r\n    const deleteAllNotifications = async () =>{\r\n        if(projectData){\r\n            let selectedProjectId = projectData._id;\r\n            try {\r\n                const response = await fetch('/deleteProjectNotifications', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({selectedProjectId}),\r\n                })\r\n    \r\n                const data = await response.json();\r\n\r\n                if(response.status === 201 && data){\r\n                    setSmShow(false);\r\n                    setShow(false);\r\n                }\r\n               \r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <ListGroup.Item className='selectedListItem' onClick={handleShow}>\r\n                <i className='fa fa-bell chat-icon'></i>         \r\n                <br></br>\r\n                Project Notifications\r\n            </ListGroup.Item>\r\n            \r\n            <Modal show={show} fullscreen={fullscreen} onHide={handleHideModal} backdrop=\"static\" keyboard={false} >\r\n                <Modal.Header closeButton className='modalHeader'>\r\n                    {projectData ?\r\n                        <Modal.Title>{projectData.projectTitle}</Modal.Title>\r\n                    :\r\n                        <Modal.Title>Selected Project</Modal.Title>\r\n                    } \r\n                </Modal.Header>\r\n                <Modal.Body className='modalBodyStatic'>\r\n                {projectNotifications ?\r\n                    <Container>\r\n                        <Row className=\"justify-content-md-center\">\r\n                            {projectNotifications.map((element, index)=>\r\n                                <Col sm lg=\"4\" key={index}>\r\n                                    <Toast className='toastMain'>\r\n                                        <Toast.Header className='toastHeader' closeButton={false}>\r\n                                            <img src={element.memberImage} className=\"rounded me-2 notificationImage\" alt=\"\" />\r\n                                            <strong className=\"me-auto\">{element.memberName}</strong>\r\n                                            <small>{element.notificationDate.substring(0,10)}</small>\r\n                                        </Toast.Header>\r\n                                        <Toast.Body>\r\n                                            \"Phase Number {element.phaseNum} : {element.phaseTitle}\" has been completed.\r\n                                        </Toast.Body>\r\n                                    </Toast>\r\n                                </Col>\r\n                            )}\r\n                        </Row>\r\n                    </Container>\r\n                :\r\n                    <Container></Container>\r\n                }\r\n                </Modal.Body>\r\n                <Modal.Footer className='modalFooter'>\r\n                    <Button className='saveBtn' onClick={() => setSmShow(true)}>Delete All Notification</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n\r\n\r\n            {/* Delete All Notifications Modal  */}\r\n\r\n\r\n        <Modal size=\"sm\" show={smShow} onHide={() => setSmShow(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                {projectData ?\r\n                    <Modal.Title id=\"example-modal-sizes-title-sm\">{projectData.projectTitle}</Modal.Title>\r\n                  :\r\n                    <Modal.Title id=\"example-modal-sizes-title-sm\">Selected Project</Modal.Title>\r\n                }  \r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                {projectNotifications.length > 0 ?\r\n                    <p>Click on <b>Proceed</b> button will permanently delete all notifications for this project.</p>\r\n                :\r\n                    <p>No new notifications.</p>\r\n                }\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                {projectNotifications.length > 0 ?\r\n                    <Button className='saveBtn' onClick={deleteAllNotifications}>Proceed</Button>\r\n                :\r\n                    <Button className='saveBtn' onClick={() => setSmShow(false)}>Ok</Button>\r\n                }\r\n                \r\n            </Modal.Footer>\r\n        </Modal>\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProjectNotification"]},"metadata":{},"sourceType":"module"}