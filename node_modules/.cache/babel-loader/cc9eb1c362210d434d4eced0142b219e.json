{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\test11070\\\\src\\\\components\\\\ViewProject.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport '../stylesheets/displayProjects.css';\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\nimport { UserContext } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ViewProject = _ref => {\n  _s();\n\n  let {\n    projectData\n  } = _ref;\n  const {\n    state,\n    dispatch\n  } = useContext(UserContext);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleAlertClose = () => {\n    setShowAlert(false);\n  };\n\n  const [alertMessage, setAlertMessage] = useState(\"\");\n  const [alertTitle, setAlertTitle] = useState(\"\");\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const [smShow, setSmShow] = useState(false);\n  const [currentProjectMembers, setCurrentProjectMembers] = useState([]);\n  const [assignedPhases, setAssignedPhases] = useState([]);\n  const [currentProjectCreator, setCurrentProjectCreator] = useState();\n  const [myAssignedPhases, setmyAssignedPhases] = useState([]);\n  const [selectedPhase, setSelectedPhase] = useState();\n\n  const showPhases = async () => {\n    if (projectData) {\n      try {\n        let selectedProjectId = projectData._id;\n        let selectedProjectCreator = projectData.projectCreator;\n        const response = await fetch('https://taskhive-hb9j.onrender.com/showProjectPhases', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            selectedProjectId,\n            selectedProjectCreator\n          })\n        });\n        const data = await response.json();\n        console.log(data);\n\n        if (data) {\n          if (data.findProjectPhases) {\n            setAssignedPhases(data.findProjectPhases.allPhases);\n          } else {\n            setAssignedPhases([]);\n          }\n\n          setCurrentProjectCreator(data.findProjectCreator);\n          setCurrentProjectMembers(data.selectedProjectMembers);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    showPhases();\n  }, []);\n\n  const handelAssigning = () => {\n    if (assignedPhases) {\n      let phaseObj = [];\n      assignedPhases.map(element => {\n        if (element.memberRef === state.id) {\n          phaseObj.push(element);\n        }\n      });\n      setmyAssignedPhases(phaseObj);\n      console.log(myAssignedPhases);\n    }\n  };\n\n  useEffect(() => {\n    handelAssigning();\n  }, [assignedPhases]);\n\n  const phaseCompletionModal = e => {\n    let id = e.target.id;\n    let findPhase = myAssignedPhases.find(element => element.phaseId === id);\n    console.log(findPhase);\n    setSelectedPhase(findPhase);\n    setSmShow(true);\n  };\n\n  const handleCompletedPhases = async e => {\n    let selectedProjectId = e.target.id;\n\n    try {\n      const response = await fetch('/phaseCompletedNotification', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          selectedProjectId,\n          selectedPhase\n        })\n      });\n      const data = await response.json();\n\n      if (response.status === 201 && data) {\n        setAlertTitle(\"Alert\");\n        setAlertMessage(data.message);\n        setShowAlert(true);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    setSmShow(false);\n  };\n\n  const handleDownloadFile = async e => {\n    let fileId = e.target.id;\n    console.log(fileId);\n    let x = document.getElementById(\"2abc\");\n\n    try {\n      const response = await fetch(`/downloadFile/${fileId}`);\n      const file = await response.blob();\n      const url = window.URL.createObjectURL(file);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = fileId; // document.body.appendChild(a);\n\n      x.appendChild(a);\n      a.click(); // window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n      className: \"selectedListItem\",\n      onClick: handleShow,\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa fa-tv chat-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this), \"View Project\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: handleClose,\n      backdrop: \"static\",\n      keyboard: false,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        className: \"modalHeader\",\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Selected Project\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"modalBody\",\n        children: projectData ? /*#__PURE__*/_jsxDEV(Container, {\n          children: /*#__PURE__*/_jsxDEV(ListGroup, {\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Details: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 33\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 29\n            }, this), currentProjectCreator ? /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              className: \"phaseListItem\",\n              children: /*#__PURE__*/_jsxDEV(\"b\", {\n                children: [\"Project Creator: \", currentProjectCreator.projectCreatorName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 75\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              className: \"phaseListItem\",\n              children: /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Project Creator: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 75\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              className: \"phaseListItem\",\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Title: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 71\n              }, this), \" \", projectData.projectTitle, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              className: \"phaseListItem\",\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Discription: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 71\n              }, this), \" \", projectData.projectDiscription]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              className: \"phaseListItem\",\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Start Date: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 71\n              }, this), \" \", projectData.startDate.substring(0, 10)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              className: \"phaseListItem\",\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Due Date: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 71\n              }, this), \" \", projectData.dueDate.substring(0, 10)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              className: \"phaseListItem\",\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Type: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 71\n              }, this), \" \", projectData.projectType]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Members: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 33\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 29\n            }, this), currentProjectMembers.map((element, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              className: \"phaseListItem\",\n              children: element.memberName\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 33\n            }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Phases: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 33\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 29\n            }, this), projectData.projectPhases.map((element, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              className: \"phaseListItem\",\n              children: [\"Phase \", element.PhaseNum, \" --- \", element.PhaseTitle]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 33\n            }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Files: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 33\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 29\n            }, this), projectData.projectFiles.map((element, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              id: index + \"abc\",\n              className: \"phaseListItem\",\n              children: [\"File Name: \", element.fileName, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 37\n              }, this), \"File Size: \", Math.floor(element.fileSize / 10000) + 'KB', /*#__PURE__*/_jsxDEV(Button, {\n                className: \"downloadBtn\",\n                id: element._id,\n                onClick: handleDownloadFile,\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fa fa-download\",\n                  id: element._id,\n                  onClick: handleDownloadFile\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 115\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 33\n            }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"My Assigned Phases & Tasks: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 33\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 29\n            }, this), myAssignedPhases ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: myAssignedPhases.map((element, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n                className: \"phaseListItem\",\n                children: [\"Phase Number: \", element.phaseNum, \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                  id: element.phaseId,\n                  className: \"fa fa-check-circle completedBtn\",\n                  onClick: phaseCompletionModal\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 74\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 41\n                }, this), \"Phase Title: \", element.phaseTitle]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 37\n              }, this))\n            }, void 0, false) : /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              className: \"phaseListItem\",\n              children: \"No Assigned Phases\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(ListGroup, {\n          children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            className: \"phaseListItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Creator: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 67\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            className: \"phaseListItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Title: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 67\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            className: \"phaseListItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Discription: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 67\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            className: \"phaseListItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Start Date: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 67\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            className: \"phaseListItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Due Date: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 67\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            className: \"phaseListItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Type: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 67\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            className: \"phaseListItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Members: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 67\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            className: \"phaseListItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Phases: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 67\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            className: \"phaseListItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Files: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 67\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"sm\",\n      show: smShow,\n      onHide: () => setSmShow(false),\n      \"aria-labelledby\": \"example-modal-sizes-title-sm\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        className: \"modalHeader\",\n        children: selectedPhase ? /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"example-modal-sizes-title-sm\",\n          children: selectedPhase.phaseTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"example-modal-sizes-title-sm\",\n          children: \"Selected Phase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"modalBodyStatic\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"If you completed the selected phase / task then click on \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Task Completed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 24\n          }, this), \" button to send notification to the project creator.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        className: \"modalFooter\",\n        children: projectData ? /*#__PURE__*/_jsxDEV(Button, {\n          className: \"saveBtn\",\n          id: projectData._id,\n          onClick: handleCompletedPhases,\n          children: \"Task Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          className: \"saveBtn\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"sm\",\n      show: showAlert,\n      onHide: handleAlertClose,\n      backdrop: \"static\",\n      keyboard: false,\n      \"aria-labelledby\": \"example-modal-sizes-title-sm\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        className: \"modalHeader\",\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"example-modal-sizes-title-sm\",\n          children: alertTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"modalBodyStatic\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: alertMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        className: \"modalFooter\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: \"saveBtn\",\n          onClick: handleAlertClose,\n          children: \"Ok\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ViewProject, \"bDkP6ZanDJ9kMcXXJrXeatEFgOU=\");\n\n_c = ViewProject;\nexport default ViewProject;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewProject\");","map":{"version":3,"sources":["C:/Users/Asus/Desktop/test11070/src/components/ViewProject.js"],"names":["React","useState","useContext","useEffect","Row","Col","Container","Card","CardGroup","ProgressBar","Navbar","Nav","NavDropdown","Form","Image","Button","ListGroup","Offcanvas","InputGroup","Modal","UserContext","ViewProject","projectData","state","dispatch","showAlert","setShowAlert","handleAlertClose","alertMessage","setAlertMessage","alertTitle","setAlertTitle","show","setShow","handleClose","handleShow","smShow","setSmShow","currentProjectMembers","setCurrentProjectMembers","assignedPhases","setAssignedPhases","currentProjectCreator","setCurrentProjectCreator","myAssignedPhases","setmyAssignedPhases","selectedPhase","setSelectedPhase","showPhases","selectedProjectId","_id","selectedProjectCreator","projectCreator","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","findProjectPhases","allPhases","findProjectCreator","selectedProjectMembers","error","handelAssigning","phaseObj","map","element","memberRef","id","push","phaseCompletionModal","e","target","findPhase","find","phaseId","handleCompletedPhases","status","message","handleDownloadFile","fileId","x","document","getElementById","file","blob","url","window","URL","createObjectURL","a","createElement","style","display","href","download","appendChild","click","projectCreatorName","projectTitle","projectDiscription","startDate","substring","dueDate","projectType","index","memberName","projectPhases","PhaseNum","PhaseTitle","projectFiles","fileName","Math","floor","fileSize","phaseNum","phaseTitle"],"mappings":"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","sourcesContent":["import React, {useState, useContext, useEffect} from 'react'\r\nimport '../stylesheets/displayProjects.css'\r\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\nimport { UserContext } from '../App'\r\n\r\nconst ViewProject = ({projectData}) => {\r\n   \r\n    const {state, dispatch} = useContext(UserContext);  \r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const handleAlertClose = () =>{setShowAlert(false);}\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [alertTitle, setAlertTitle] = useState(\"\");\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const [smShow, setSmShow] = useState(false);\r\n    const [currentProjectMembers, setCurrentProjectMembers] = useState([]);\r\n    const [assignedPhases, setAssignedPhases] = useState([]);\r\n    const [currentProjectCreator, setCurrentProjectCreator] = useState();\r\n    const [myAssignedPhases, setmyAssignedPhases] = useState([]);\r\n    const [selectedPhase, setSelectedPhase] = useState();\r\n  \r\n\r\n\r\n\r\n    const showPhases = async () =>{\r\n        if(projectData){\r\n            try {\r\n                let selectedProjectId = projectData._id;\r\n                let selectedProjectCreator = projectData.projectCreator;\r\n\r\n                const response = await fetch('https://taskhive-hb9j.onrender.com/showProjectPhases', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({selectedProjectId, selectedProjectCreator}),\r\n                })\r\n    \r\n                const data = await response.json();\r\n                console.log(data)\r\n                if(data){\r\n                    if(data.findProjectPhases){\r\n                        setAssignedPhases(data.findProjectPhases.allPhases);\r\n                    }\r\n                    else{\r\n                        setAssignedPhases([]);\r\n                    }\r\n                    setCurrentProjectCreator(data.findProjectCreator);\r\n                    setCurrentProjectMembers(data.selectedProjectMembers)\r\n                }\r\n               \r\n\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        showPhases();\r\n    },[])\r\n\r\n    const handelAssigning = () =>{\r\n        if(assignedPhases){\r\n            let phaseObj = [];\r\n            assignedPhases.map((element)=>{\r\n                if(element.memberRef === state.id){\r\n                    phaseObj.push(element);\r\n                }\r\n            })\r\n       \r\n            setmyAssignedPhases(phaseObj); \r\n\r\n            console.log(myAssignedPhases)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    useEffect(() =>{\r\n        handelAssigning();\r\n    },[assignedPhases])\r\n\r\n\r\n    const phaseCompletionModal = (e) =>{\r\n        let id = e.target.id;\r\n        let findPhase = myAssignedPhases.find(element => element.phaseId === id);\r\n        console.log(findPhase)\r\n        setSelectedPhase(findPhase);\r\n        setSmShow(true);\r\n    }\r\n\r\n    const handleCompletedPhases = async (e) =>{\r\n        let selectedProjectId = e.target.id;\r\n        try {\r\n            const response = await fetch('/phaseCompletedNotification', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type' : 'application/json' \r\n                },\r\n                body: JSON.stringify({selectedProjectId, selectedPhase}),\r\n            })\r\n\r\n            const data = await response.json();\r\n\r\n            if(response.status === 201 && data){\r\n                setAlertTitle(\"Alert\")\r\n                setAlertMessage(data.message);\r\n                setShowAlert(true);\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        setSmShow(false);\r\n    }\r\n\r\n\r\n    const handleDownloadFile = async (e) =>{\r\n        let fileId = e.target.id;\r\n        console.log(fileId)\r\n        let x = document.getElementById(\"2abc\")\r\n        try {\r\n            const response = await fetch(`/downloadFile/${fileId}`);\r\n\r\n            const file = await response.blob();\r\n            const url = window.URL.createObjectURL(file);\r\n\r\n            const a = document.createElement('a');\r\n            a.style.display = 'none';\r\n            a.href = url;\r\n            a.download = fileId;\r\n            // document.body.appendChild(a);\r\n            x.appendChild(a);\r\n            a.click();\r\n            // window.URL.revokeObjectURL(url);\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n  \r\n    return (\r\n    <>\r\n    \r\n        <ListGroup.Item className='selectedListItem' onClick={handleShow}>\r\n            <i className='fa fa-tv chat-icon'></i>         \r\n            <br></br>\r\n            View Project\r\n        </ListGroup.Item>\r\n        <Modal show={show} onHide={handleClose} backdrop=\"static\" keyboard={false} >\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title>Selected Project</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>\r\n                {projectData ?\r\n                    <Container>\r\n                        <ListGroup>\r\n                            <h6><b>Details: </b> </h6>\r\n                            {currentProjectCreator ?\r\n                                <ListGroup.Item className='phaseListItem'><b>Project Creator: {currentProjectCreator.projectCreatorName}</b></ListGroup.Item>\r\n                            :\r\n                                <ListGroup.Item className='phaseListItem'><b>Project Creator: </b></ListGroup.Item>\r\n                            }\r\n                            \r\n                            <ListGroup.Item className='phaseListItem'><b>Title: </b> {projectData.projectTitle} </ListGroup.Item>\r\n                            <ListGroup.Item className='phaseListItem'><b>Discription: </b> {projectData.projectDiscription}</ListGroup.Item>\r\n                            <ListGroup.Item className='phaseListItem'><b>Start Date: </b> {projectData.startDate.substring(0,10)}</ListGroup.Item>\r\n                            <ListGroup.Item className='phaseListItem'><b>Due Date: </b> {projectData.dueDate.substring(0,10)}</ListGroup.Item>\r\n                            <ListGroup.Item className='phaseListItem'><b>Type: </b> {projectData.projectType}</ListGroup.Item>\r\n                            <br></br>\r\n                            <h6><b>Members: </b> </h6>\r\n                            {currentProjectMembers.map((element, index)=>\r\n                                <ListGroup.Item key={index} className='phaseListItem'>\r\n                                    {element.memberName}\r\n                                </ListGroup.Item>\r\n                            )}\r\n                            <br></br>\r\n                            <h6><b>Phases: </b> </h6>\r\n                            {projectData.projectPhases.map((element, index)=>\r\n                                <ListGroup.Item key={index} className='phaseListItem'>\r\n                                    Phase {element.PhaseNum} --- {element.PhaseTitle}\r\n                                </ListGroup.Item>\r\n                            )}\r\n                            <br></br> \r\n                            <h6><b>Files: </b> </h6>\r\n                            {projectData.projectFiles.map((element, index)=>\r\n                                <ListGroup.Item key={index} id={index + \"abc\"} className='phaseListItem'>\r\n                                    File Name: {element.fileName}\r\n                                    <br></br>\r\n                                    File Size: {Math.floor(element.fileSize/10000) + 'KB'}\r\n                                    <Button className='downloadBtn' id={element._id} onClick={handleDownloadFile}><i className=\"fa fa-download\" id={element._id} onClick={handleDownloadFile}></i></Button>\r\n                                </ListGroup.Item>\r\n                            )}\r\n                            <br></br>\r\n                            <h6><b>My Assigned Phases & Tasks: </b> </h6>\r\n                            {myAssignedPhases ?\r\n                                <>\r\n                                {myAssignedPhases.map((element, index)=>\r\n                                    <ListGroup.Item key={index} className='phaseListItem'>\r\n                                        Phase Number: {element.phaseNum} <i id={element.phaseId} className=\"fa fa-check-circle completedBtn\" onClick={phaseCompletionModal}></i>\r\n                                        <br></br>\r\n                                        Phase Title: {element.phaseTitle}\r\n                                    </ListGroup.Item>\r\n                                )}\r\n                                </>\r\n                            :\r\n                                <ListGroup.Item className='phaseListItem'>No Assigned Phases</ListGroup.Item>\r\n                            }\r\n                            \r\n                    </ListGroup>\r\n                    </Container>\r\n                :\r\n                    <ListGroup>\r\n                        <ListGroup.Item className='phaseListItem'><b>Creator: </b> </ListGroup.Item>\r\n                        <ListGroup.Item className='phaseListItem'><b>Title: </b> </ListGroup.Item>\r\n                        <ListGroup.Item className='phaseListItem'><b>Discription: </b> </ListGroup.Item>\r\n                        <ListGroup.Item className='phaseListItem'><b>Start Date: </b> </ListGroup.Item>\r\n                        <ListGroup.Item className='phaseListItem'><b>Due Date: </b> </ListGroup.Item>\r\n                        <ListGroup.Item className='phaseListItem'><b>Type: </b> </ListGroup.Item>\r\n                        <ListGroup.Item className='phaseListItem'><b>Members: </b> </ListGroup.Item>\r\n                        <ListGroup.Item className='phaseListItem'><b>Phases: </b> </ListGroup.Item>\r\n                        <ListGroup.Item className='phaseListItem'><b>Files: </b> </ListGroup.Item>\r\n                    </ListGroup>\r\n                }\r\n                \r\n            </Modal.Body>\r\n        </Modal>\r\n\r\n\r\n                {/* Phase Completion Modal  */}\r\n\r\n\r\n        <Modal size=\"sm\" show={smShow} onHide={() => setSmShow(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                {selectedPhase ?\r\n                    <Modal.Title id=\"example-modal-sizes-title-sm\">{selectedPhase.phaseTitle}</Modal.Title>\r\n                  :\r\n                    <Modal.Title id=\"example-modal-sizes-title-sm\">Selected Phase</Modal.Title>\r\n                }  \r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>If you completed the selected phase / task then click \r\n                    on <b>Task Completed</b> button to send notification to the project creator.</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                {projectData ?\r\n                    <Button className='saveBtn' id={projectData._id} onClick={handleCompletedPhases}>Task Completed</Button>\r\n                    :\r\n                    <Button className='saveBtn'>Save</Button>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n\r\n\r\n        <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>{alertMessage}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \r\n            </Modal.Footer>\r\n            </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ViewProject"]},"metadata":{},"sourceType":"module"}