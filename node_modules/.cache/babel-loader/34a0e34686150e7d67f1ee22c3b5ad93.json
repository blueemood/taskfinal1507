{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\test11070\\\\src\\\\components\\\\DeleteNote.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useLayoutEffect, useEffect } from 'react';\nimport '../stylesheets/notes.css';\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DeleteNote = _ref => {\n  _s();\n\n  let {\n    noteData\n  } = _ref;\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleAlertClose = () => {\n    setShowAlert(false);\n  };\n\n  const [alertMessage, setAlertMessage] = useState(\"\");\n  const [alertTitle, setAlertTitle] = useState(\"\");\n  const [noteId, setNoteId] = useState(\"\");\n\n  const setNoteForm = () => {\n    if (noteData) {\n      setAlertTitle(noteData.currentNote.noteTitle);\n      setAlertMessage('Click on \"Delete\" button will permanently delete the selected note.');\n      setNoteId(noteData.currentNote._id);\n    }\n  };\n\n  useEffect(() => {\n    setNoteForm();\n  }, []);\n\n  const handleDeleteBtn = async () => {\n    if (alertTitle && noteId) {\n      try {\n        const response = await fetch('https://taskhive-backend-testing.onrender.comdeleteCurrentNote', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            noteId\n          })\n        });\n        const data = await response.json();\n\n        if (response.status === 201 && data) {\n          setShowAlert(false);\n          noteData.setFecthTasks(data);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      setAlertTitle(\"Alert\");\n      setAlertMessage(\"Please fill the form correctly.\");\n      setShowAlert(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n      className: \"selectedListBtn\",\n      onClick: () => setShowAlert(true),\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa fa-trash\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), \"Delete Note\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"sm\",\n      show: showAlert,\n      onHide: handleAlertClose,\n      backdrop: \"static\",\n      keyboard: false,\n      \"aria-labelledby\": \"example-modal-sizes-title-sm\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        className: \"modalHeader\",\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"example-modal-sizes-title-sm\",\n          children: alertTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"modalBodyStatic\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: alertMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        className: \"modalFooter\",\n        children: noteId ? /*#__PURE__*/_jsxDEV(Button, {\n          className: \"saveBtn\",\n          onClick: handleDeleteBtn,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          className: \"saveBtn\",\n          onClick: handleAlertClose,\n          children: \"Ok\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(DeleteNote, \"1x7PdQiu60ibbN1SDEDimLwSHQc=\");\n\n_c = DeleteNote;\nexport default DeleteNote;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeleteNote\");","map":{"version":3,"sources":["C:/Users/Asus/Desktop/test11070/src/components/DeleteNote.js"],"names":["React","useState","useLayoutEffect","useEffect","Row","Col","Container","Card","CardGroup","ProgressBar","Navbar","Nav","NavDropdown","Form","Image","Button","ListGroup","Offcanvas","InputGroup","Modal","DeleteNote","noteData","showAlert","setShowAlert","handleAlertClose","alertMessage","setAlertMessage","alertTitle","setAlertTitle","noteId","setNoteId","setNoteForm","currentNote","noteTitle","_id","handleDeleteBtn","response","fetch","method","headers","body","JSON","stringify","data","json","status","setFecthTasks","error","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,eAAzB,EAA0CC,SAA1C,QAA0D,OAA1D;AACA,OAAO,0BAAP;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,EAA8BC,IAA9B,EAAoCC,SAApC,EAA+CC,WAA/C,EAA4DC,MAA5D,EAAoEC,GAApE,EAAyEC,WAAzE,EAAsFC,IAAtF,EAA4FC,KAA5F,EAAmGC,MAAnG,EAA2GC,SAA3G,EAAsHC,SAAtH,EAAiIC,UAAjI,EAA6IC,KAA7I,QAA0J,iBAA1J;;;;AAIA,MAAMC,UAAU,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AAE/B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,KAAD,CAA1C;;AACA,QAAMuB,gBAAgB,GAAG,MAAK;AAACD,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAAqB,GAApD;;AACA,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCzB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAAC0B,UAAD,EAAaC,aAAb,IAA8B3B,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAC4B,MAAD,EAASC,SAAT,IAAsB7B,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAM8B,WAAW,GAAG,MAAK;AACrB,QAAGV,QAAH,EAAY;AACRO,MAAAA,aAAa,CAACP,QAAQ,CAACW,WAAT,CAAqBC,SAAtB,CAAb;AACAP,MAAAA,eAAe,CAAC,qEAAD,CAAf;AACAI,MAAAA,SAAS,CAACT,QAAQ,CAACW,WAAT,CAAqBE,GAAtB,CAAT;AACH;AACJ,GAND;;AAQA/B,EAAAA,SAAS,CAAC,MAAI;AACV4B,IAAAA,WAAW;AACd,GAFQ,EAEP,EAFO,CAAT;;AAKA,QAAMI,eAAe,GAAG,YAAW;AAE/B,QAAGR,UAAU,IAAIE,MAAjB,EAAwB;AACpB,UAAI;AACA,cAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,gEAAD,EAAmE;AAC3FC,UAAAA,MAAM,EAAE,MADmF;AAE3FC,UAAAA,OAAO,EAAE;AACL,4BAAiB;AADZ,WAFkF;AAK3FC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACb,YAAAA;AAAD,WAAf;AALqF,SAAnE,CAA5B;AAQA,cAAMc,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;;AAEA,YAAGR,QAAQ,CAACS,MAAT,KAAoB,GAApB,IAA2BF,IAA9B,EAAmC;AAC/BpB,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,UAAAA,QAAQ,CAACyB,aAAT,CAAuBH,IAAvB;AACH;AACJ,OAfD,CAeE,OAAOI,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,KAnBD,MAmBK;AACDnB,MAAAA,aAAa,CAAC,OAAD,CAAb;AACAF,MAAAA,eAAe,CAAC,iCAAD,CAAf;AACAH,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;AAEJ,GA3BD;;AA8BF,sBACE;AAAA,4BAGI,QAAC,SAAD,CAAW,IAAX;AAAgB,MAAA,SAAS,EAAC,iBAA1B;AAA4C,MAAA,OAAO,EAAE,MAAMA,YAAY,CAAC,IAAD,CAAvE;AAAA,8BACE;AAAG,QAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eASI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,IAAZ;AAAiB,MAAA,IAAI,EAAED,SAAvB;AAAkC,MAAA,MAAM,EAAEE,gBAA1C;AAA4D,MAAA,QAAQ,EAAC,QAArE;AAA8E,MAAA,QAAQ,EAAE,KAAxF;AAA+F,yBAAgB,8BAA/G;AAAA,8BACI,QAAC,KAAD,CAAO,MAAP;AAAc,QAAA,WAAW,MAAzB;AAA0B,QAAA,SAAS,EAAC,aAApC;AAAA,+BACI,QAAC,KAAD,CAAO,KAAP;AAAa,UAAA,EAAE,EAAC,8BAAhB;AAAA,oBAAgDG;AAAhD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,KAAD,CAAO,IAAP;AAAY,QAAA,SAAS,EAAC,iBAAtB;AAAA,+BACI;AAAA,oBAAIF;AAAJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAJJ,eAOI,QAAC,KAAD,CAAO,MAAP;AAAc,QAAA,SAAS,EAAC,aAAxB;AAAA,kBACKI,MAAM,gBACH,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,SAAlB;AAA4B,UAAA,OAAO,EAAEM,eAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADG,gBAGH,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,SAAlB;AAA4B,UAAA,OAAO,EAAEX,gBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA,kBADF;AA4BD,CA/ED;;GAAMJ,U;;KAAAA,U;AAiFN,eAAeA,UAAf","sourcesContent":["import React, {useState, useLayoutEffect, useEffect} from 'react'\r\nimport '../stylesheets/notes.css'\r\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\n\r\n\r\n\r\nconst DeleteNote = ({noteData}) => {\r\n\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const handleAlertClose = () =>{setShowAlert(false);}\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [alertTitle, setAlertTitle] = useState(\"\");\r\n    const [noteId, setNoteId] = useState(\"\");\r\n\r\n    const setNoteForm = () =>{\r\n        if(noteData){\r\n            setAlertTitle(noteData.currentNote.noteTitle);\r\n            setAlertMessage('Click on \"Delete\" button will permanently delete the selected note.');\r\n            setNoteId(noteData.currentNote._id);\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setNoteForm();\r\n    },[]);\r\n\r\n\r\n    const handleDeleteBtn = async () =>{\r\n\r\n        if(alertTitle && noteId){\r\n            try {\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.comdeleteCurrentNote', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({noteId}),\r\n                })\r\n    \r\n                const data = await response.json();\r\n    \r\n                if(response.status === 201 && data){\r\n                    setShowAlert(false);\r\n                    noteData.setFecthTasks(data);\r\n                }\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }else{\r\n            setAlertTitle(\"Alert\");\r\n            setAlertMessage(\"Please fill the form correctly.\");\r\n            setShowAlert(true);\r\n        }\r\n\r\n    }\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n    {/* Alert Modal */}\r\n        <ListGroup.Item className='selectedListBtn' onClick={() => setShowAlert(true)}>\r\n          <i className='fa fa-trash'></i>         \r\n          <br></br>\r\n          Delete Note\r\n        </ListGroup.Item>\r\n\r\n        <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>{alertMessage}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                {noteId ?\r\n                    <Button className='saveBtn' onClick={handleDeleteBtn}>Delete</Button> \r\n                :\r\n                    <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default DeleteNote"]},"metadata":{},"sourceType":"module"}