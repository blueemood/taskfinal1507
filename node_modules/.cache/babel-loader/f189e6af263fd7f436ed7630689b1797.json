{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\test11070\\\\src\\\\components\\\\AssignPhases.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport '../stylesheets/displayProjects.css';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\nimport image_S1 from '../images/abstract10.png';\nimport { UserContext } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AssignPhases = _ref => {\n  _s();\n\n  let {\n    projectData\n  } = _ref;\n  const {\n    state,\n    dispatch\n  } = useContext(UserContext);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleAlertClose = () => {\n    setShowAlert(false);\n  };\n\n  const [alertMessage, setAlertMessage] = useState(\"\");\n  const [alertTitle, setAlertTitle] = useState(\"\");\n  const [fullscreen, setFullscreen] = useState(true);\n  const [show, setShow] = useState(false);\n\n  const handleShow = () => {\n    setFullscreen(true);\n    setShow(true);\n  };\n\n  const handleHideModal = () => {\n    setShow(false);\n  };\n\n  const [smShow, setSmShow] = useState(false);\n  const [smShowUpdate, setSmShowUpdate] = useState(false);\n  const [projectMembers, setProjectMembers] = useState();\n  const [currentProjectCreator, setCurrentProjectCreator] = useState();\n  const [selectedPhase, setSelectedPhase] = useState();\n  const [selectedphaseForUpdate, setSelectedphaseForUpdate] = useState();\n  const [assignEachPhase, setAssignEachPhase] = useState([]);\n\n  const checkMembers = () => {\n    if (projectData) {\n      console.log(projectData.currentProject);\n      let currentMembers = [];\n      projectData.currentProject.members.map(element1 => {\n        let getProfile = projectData.allfriends.find(element2 => element2._id === element1.memberRef);\n        currentMembers.push(getProfile);\n      });\n      setProjectMembers(currentMembers);\n      console.log(currentMembers);\n    }\n  };\n\n  useEffect(() => {\n    checkMembers();\n  }, []);\n\n  const handleAssignBtn = e => {\n    let id = e.target.id;\n\n    if (projectData) {\n      let getPhase = projectData.currentProject.projectPhases.find(element => element._id === id);\n      setSelectedPhase(getPhase);\n      setSmShow(true);\n      console.log(getPhase);\n    }\n  };\n\n  const addMember = e => {\n    let id = e.target.id; // let checkArr = assignEachPhase.find(element => element.phaseId === selectedPhase._id && element.phaseMembers === id);\n\n    let checkArr = assignEachPhase.find(element => element.phaseId === selectedPhase._id && element.memberRef === id);\n\n    if (checkArr) {\n      setAlertTitle(\"Alert\");\n      setAlertMessage(\"Member is already added in this phase.\");\n      setShowAlert(true);\n    } else {\n      let getProfile = projectData.allfriends.find(element => element._id === id);\n\n      if (getProfile) {\n        let eachPhaseObj = {\n          phaseId: selectedPhase._id,\n          phaseNum: selectedPhase.PhaseNum,\n          phaseTitle: selectedPhase.PhaseTitle,\n          memberRef: id,\n          memberName: getProfile.name,\n          uniqueId: selectedPhase._id + id\n        };\n        setAssignEachPhase(assignEachPhase => [...assignEachPhase, eachPhaseObj]);\n      } else {\n        let eachPhaseObj = {\n          phaseId: selectedPhase._id,\n          phaseNum: selectedPhase.PhaseNum,\n          phaseTitle: selectedPhase.PhaseTitle,\n          memberRef: id,\n          memberName: state.name,\n          uniqueId: selectedPhase._id + id\n        };\n        setAssignEachPhase(assignEachPhase => [...assignEachPhase, eachPhaseObj]);\n      }\n    }\n  };\n\n  const removeMember = e => {\n    let id = e.target.id;\n    let removeSelectedMember = assignEachPhase.filter(element => element.uniqueId !== id);\n    setAssignEachPhase(removeSelectedMember);\n  };\n\n  const handleAssignPhases = async e => {\n    let projectId = e.target.id;\n\n    try {\n      const response = await fetch('https://taskhive-backend-testing.onrender.com/assignProjectPhases', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          assignEachPhase,\n          projectId\n        })\n      });\n      const data = await response.json();\n\n      if (response.status === 201 || data) {\n        setAlertTitle(\"Alert\");\n        setAlertMessage(\"Phases Assigned.\");\n        setShowAlert(true);\n        projectData.setFecthTasks(data);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    setShow(false);\n  };\n\n  const showPhases = async () => {\n    if (projectData) {\n      try {\n        let selectedProjectId = projectData.currentProject._id;\n        let selectedProjectCreator = projectData.currentProject.projectCreator;\n        const response = await fetch('https://taskhive-backend-testing.onrender.com/showProjectPhases', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            selectedProjectId,\n            selectedProjectCreator\n          })\n        });\n        const data = await response.json();\n\n        if (data) {\n          if (data.findProjectPhases) {\n            setAssignEachPhase(data.findProjectPhases.allPhases);\n          } else {\n            setAssignEachPhase([]);\n          }\n\n          setCurrentProjectCreator(data.findProjectCreator);\n        }\n\n        console.log(data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    showPhases();\n  }, []);\n\n  const handleUpdateBtn = e => {\n    let id = e.target.id;\n\n    if (projectData) {\n      let findPhase = projectData.currentProject.projectPhases.find(element => element._id === id);\n      console.log(findPhase);\n      setSelectedphaseForUpdate(findPhase);\n      setSmShowUpdate(true);\n    }\n  };\n\n  const handleUpdatePhaseBtn = async () => {\n    if (selectedphaseForUpdate) {\n      try {\n        const response = await fetch('https://taskhive-backend-testing.onrender.com/updatePhaseToCompleted', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            selectedphaseForUpdate\n          })\n        });\n        const data = await response.json();\n\n        if (response.status === 201 && data) {\n          setSmShowUpdate(false);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  const handleUndoUpdatePhaseBtn = async () => {\n    if (selectedphaseForUpdate) {\n      try {\n        const response = await fetch('https://taskhive-backend-testing.onrender.com/updatePhaseToPending', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            selectedphaseForUpdate\n          })\n        });\n        const data = await response.json();\n\n        if (response.status === 201 && data) {\n          setSmShowUpdate(false);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n      className: \"selectedListItem\",\n      onClick: handleShow,\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa fa-sitemap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this), \"Assign Phases\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      fullscreen: fullscreen,\n      onHide: handleHideModal,\n      keyboard: false,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        className: \"modalHeader\",\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Assign Project Phases\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"modalBodyStatic\",\n        children: projectData.currentProject && projectMembers ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"You can assign & update a phase of selected project to your team members or yourself.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Click on mentioned project phases to assign a phase to a member.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: [\"Project Title:  \", projectData.currentProject.projectTitle, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 20\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Container, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Project Phases :-\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 24\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: projectData.currentProject.projectPhases.map((element, index) => /*#__PURE__*/_jsxDEV(Col, {\n                sm: true,\n                lg: \"3\",\n                children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n                  children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n                    variant: \"success\",\n                    id: \"dropdown-basic\",\n                    className: \"dropBtn\",\n                    children: [\"Phase \", element.PhaseNum, \" : \", element.PhaseTitle]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 260,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n                    className: \"dropDownCont\",\n                    children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                      id: element._id,\n                      onClick: handleAssignBtn,\n                      children: \"Add Members\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 265,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                      id: element._id,\n                      onClick: handleUpdateBtn,\n                      children: \"Update Status\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 266,\n                      columnNumber: 41\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 264,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 33\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 29\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Container, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Assign To :-\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 24\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: assignEachPhase.map((element, index) => /*#__PURE__*/_jsxDEV(Col, {\n                sm: true,\n                lg: \"3\",\n                children: /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n                  className: \"listPhase\",\n                  children: [\"Phase \", element.phaseNum, \" : \", element.memberName, /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-times removeBtnPhase\",\n                    id: element.phaseId + element.memberRef,\n                    onClick: removeMember\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 282,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 280,\n                  columnNumber: 33\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 29\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"warningTxt\",\n            children: [\"Selected project will be permanently deleted when click on \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Delete Project\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 102\n            }, this), \" button.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n            children: /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              className: \"listPhase\",\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Title: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 60\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        className: \"modalFooter\",\n        children: projectData.currentProject ? /*#__PURE__*/_jsxDEV(Button, {\n          className: \"phaseSaveBtn\",\n          id: projectData.currentProject._id,\n          onClick: handleAssignPhases,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          className: \"phaseSaveBtn\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"sm\",\n      show: smShow,\n      onHide: () => setSmShow(false),\n      \"aria-labelledby\": \"example-modal-sizes-title-sm\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        className: \"modalHeader\",\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"example-modal-sizes-title-sm\",\n          children: \"Project Members\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"modalBody\",\n        children: /*#__PURE__*/_jsxDEV(ListGroup, {\n          variant: \"flush\",\n          children: currentProjectCreator ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              as: \"li\",\n              className: \"d-flex justify-content-between align-items-start memberLists\",\n              children: /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: currentProjectCreator.projectCreatorImage,\n                    onError: e => {\n                      e.target.onError = null;\n                      e.target.src = image_S1;\n                    },\n                    className: \"profileImages\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 330,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 329,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: currentProjectCreator.projectCreatorName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 336,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"Project Creator\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 337,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-plus addFriendIcon\",\n                    id: currentProjectCreator.projectCreatorId,\n                    onClick: addMember\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 340,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 339,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 29\n            }, this), projectMembers.map((element, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              as: \"li\",\n              className: \"d-flex justify-content-between align-items-start memberLists\",\n              children: /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: element.image,\n                    onError: e => {\n                      e.target.onError = null;\n                      e.target.src = image_S1;\n                    },\n                    className: \"profileImages\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 349,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 348,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: element.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 355,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: element.designation\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 356,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 354,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-plus addFriendIcon\",\n                    id: element._id,\n                    onClick: addMember\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 359,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 358,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 37\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(ListGroup.Item, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"sm\",\n      show: smShowUpdate,\n      onHide: () => setSmShowUpdate(false),\n      \"aria-labelledby\": \"example-modal-sizes-title-sm\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        className: \"modalHeader\",\n        children: selectedphaseForUpdate ? /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"example-modal-sizes-title-sm\",\n          children: selectedphaseForUpdate.PhaseTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"example-modal-sizes-title-sm\",\n          children: \"Selected Phase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"modalBodyStatic\",\n        children: selectedphaseForUpdate ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: selectedphaseForUpdate.PhaseStatus === \"Pending\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Phase Status: \", selectedphaseForUpdate.PhaseStatus]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Click on \\\"Update\\\" button to update the phase status to \\\"Completed\\\".\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Phase Status: \", selectedphaseForUpdate.PhaseStatus]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Click on \\\"Update\\\" button to update the phase status to \\\"Pending\\\".\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        className: \"modalFooter\",\n        children: selectedphaseForUpdate ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: selectedphaseForUpdate.PhaseStatus === \"Pending\" ? /*#__PURE__*/_jsxDEV(Button, {\n            className: \"saveBtn\",\n            onClick: handleUpdatePhaseBtn,\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            className: \"saveBtn\",\n            onClick: handleUndoUpdatePhaseBtn,\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 29\n          }, this)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(Button, {\n          className: \"saveBtn\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"sm\",\n      show: showAlert,\n      onHide: handleAlertClose,\n      backdrop: \"static\",\n      keyboard: false,\n      \"aria-labelledby\": \"example-modal-sizes-title-sm\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        className: \"modalHeader\",\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"example-modal-sizes-title-sm\",\n          children: alertTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"modalBodyStatic\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: alertMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        className: \"modalFooter\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: \"saveBtn\",\n          onClick: handleAlertClose,\n          children: \"Ok\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AssignPhases, \"/1qINRL8FA2oSj8TnGp4rBlBCJY=\");\n\n_c = AssignPhases;\nexport default AssignPhases;\n\nvar _c;\n\n$RefreshReg$(_c, \"AssignPhases\");","map":{"version":3,"sources":["C:/Users/Asus/Desktop/test11070/src/components/AssignPhases.js"],"names":["React","useState","useContext","useEffect","Dropdown","Row","Col","Container","Card","CardGroup","ProgressBar","Navbar","Nav","NavDropdown","Form","Image","Button","ListGroup","Offcanvas","InputGroup","Modal","image_S1","UserContext","AssignPhases","projectData","state","dispatch","showAlert","setShowAlert","handleAlertClose","alertMessage","setAlertMessage","alertTitle","setAlertTitle","fullscreen","setFullscreen","show","setShow","handleShow","handleHideModal","smShow","setSmShow","smShowUpdate","setSmShowUpdate","projectMembers","setProjectMembers","currentProjectCreator","setCurrentProjectCreator","selectedPhase","setSelectedPhase","selectedphaseForUpdate","setSelectedphaseForUpdate","assignEachPhase","setAssignEachPhase","checkMembers","console","log","currentProject","currentMembers","members","map","element1","getProfile","allfriends","find","element2","_id","memberRef","push","handleAssignBtn","e","id","target","getPhase","projectPhases","element","addMember","checkArr","phaseId","eachPhaseObj","phaseNum","PhaseNum","phaseTitle","PhaseTitle","memberName","name","uniqueId","removeMember","removeSelectedMember","filter","handleAssignPhases","projectId","response","fetch","method","headers","body","JSON","stringify","data","json","status","setFecthTasks","error","showPhases","selectedProjectId","selectedProjectCreator","projectCreator","findProjectPhases","allPhases","findProjectCreator","handleUpdateBtn","findPhase","handleUpdatePhaseBtn","handleUndoUpdatePhaseBtn","projectTitle","index","projectCreatorImage","onError","src","projectCreatorName","projectCreatorId","image","designation","PhaseStatus"],"mappings":"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","sourcesContent":["import React, {useState, useContext, useEffect} from 'react'\r\nimport '../stylesheets/displayProjects.css'\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\r\nimport image_S1 from '../images/abstract10.png'\r\nimport { UserContext } from '../App'\r\n\r\nconst AssignPhases = ({projectData}) => {\r\n    const {state, dispatch} = useContext(UserContext); \r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const handleAlertClose = () =>{setShowAlert(false);}\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [alertTitle, setAlertTitle] = useState(\"\");\r\n    const [fullscreen, setFullscreen] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const handleShow = () => {setFullscreen(true); setShow(true);}\r\n    const handleHideModal = () =>{setShow(false);}\r\n    const [smShow, setSmShow] = useState(false);\r\n    const [smShowUpdate, setSmShowUpdate] = useState(false);\r\n    const [projectMembers, setProjectMembers] = useState();\r\n    const [currentProjectCreator, setCurrentProjectCreator] = useState();\r\n    const [selectedPhase, setSelectedPhase] = useState();\r\n    const [selectedphaseForUpdate, setSelectedphaseForUpdate] = useState();\r\n    const [assignEachPhase, setAssignEachPhase] = useState([]);\r\n\r\n\r\n    const checkMembers = () =>{\r\n        if(projectData){\r\n            console.log(projectData.currentProject)\r\n            let currentMembers = [];\r\n            projectData.currentProject.members.map((element1)=>{\r\n                let getProfile = projectData.allfriends.find(element2 => element2._id === element1.memberRef);\r\n                currentMembers.push(getProfile);\r\n            })\r\n            setProjectMembers(currentMembers)\r\n            console.log(currentMembers)\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        checkMembers();\r\n    },[])\r\n\r\n\r\n    const handleAssignBtn = (e) =>{\r\n        let id = e.target.id;\r\n        \r\n        if(projectData){\r\n            let getPhase = projectData.currentProject.projectPhases.find(element => element._id === id);\r\n            setSelectedPhase(getPhase);\r\n            setSmShow(true);\r\n            console.log(getPhase)\r\n        }\r\n    }\r\n\r\n\r\n    const addMember = (e) =>{\r\n        let id = e.target.id;\r\n        \r\n\r\n        // let checkArr = assignEachPhase.find(element => element.phaseId === selectedPhase._id && element.phaseMembers === id);\r\n        let checkArr = assignEachPhase.find(element => element.phaseId === selectedPhase._id && element.memberRef === id);\r\n        \r\n        if(checkArr){\r\n            setAlertTitle(\"Alert\");\r\n            setAlertMessage(\"Member is already added in this phase.\");\r\n            setShowAlert(true);\r\n        }\r\n        else{          \r\n            \r\n            let getProfile = projectData.allfriends.find(element => element._id === id);\r\n            \r\n            if(getProfile){\r\n                let eachPhaseObj = {\r\n                    phaseId: selectedPhase._id,\r\n                    phaseNum: selectedPhase.PhaseNum,\r\n                    phaseTitle: selectedPhase.PhaseTitle,\r\n                    memberRef: id,\r\n                    memberName: getProfile.name,\r\n                    uniqueId: selectedPhase._id + id,\r\n                }\r\n                setAssignEachPhase(assignEachPhase => [...assignEachPhase, eachPhaseObj])\r\n            }\r\n            else{\r\n                let eachPhaseObj = {\r\n                    phaseId: selectedPhase._id,\r\n                    phaseNum: selectedPhase.PhaseNum,\r\n                    phaseTitle: selectedPhase.PhaseTitle,\r\n                    memberRef: id,\r\n                    memberName: state.name,\r\n                    uniqueId: selectedPhase._id + id, \r\n                }\r\n                setAssignEachPhase(assignEachPhase => [...assignEachPhase, eachPhaseObj])\r\n            }\r\n\r\n        }\r\n           \r\n    }\r\n\r\n\r\n    const removeMember = (e) =>{\r\n        let id = e.target.id;\r\n        let removeSelectedMember = assignEachPhase.filter(element => element.uniqueId !== id); \r\n        setAssignEachPhase(removeSelectedMember)\r\n    }\r\n\r\n    const handleAssignPhases = async (e) =>{\r\n        let projectId = e.target.id;\r\n        try {\r\n            const response = await fetch('https://taskhive-backend-testing.onrender.com/assignProjectPhases', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type' : 'application/json' \r\n                },\r\n                body: JSON.stringify({assignEachPhase, projectId}),\r\n            })\r\n\r\n            const data = await response.json();\r\n\r\n            if(response.status === 201 || data){\r\n                setAlertTitle(\"Alert\");\r\n                setAlertMessage(\"Phases Assigned.\");\r\n                setShowAlert(true);\r\n                projectData.setFecthTasks(data);\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        setShow(false)\r\n    }\r\n\r\n\r\n    const showPhases = async () =>{\r\n        if(projectData){\r\n            try {\r\n                let selectedProjectId = projectData.currentProject._id;\r\n                let selectedProjectCreator = projectData.currentProject.projectCreator;\r\n\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/showProjectPhases', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({selectedProjectId, selectedProjectCreator}),\r\n                })\r\n    \r\n                const data = await response.json();\r\n\r\n                if(data){\r\n                    if(data.findProjectPhases){\r\n                        setAssignEachPhase(data.findProjectPhases.allPhases);\r\n                    }\r\n                    else{\r\n                        setAssignEachPhase([]);\r\n                    }\r\n                    setCurrentProjectCreator(data.findProjectCreator);\r\n                }\r\n                console.log(data)\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        showPhases();\r\n    },[])\r\n\r\n\r\n    const handleUpdateBtn = (e) =>{\r\n        let id = e.target.id\r\n        if(projectData){\r\n\r\n            let findPhase = projectData.currentProject.projectPhases.find(element => element._id === id);\r\n            console.log(findPhase);\r\n            setSelectedphaseForUpdate(findPhase)\r\n            setSmShowUpdate(true);\r\n        }\r\n        \r\n    }\r\n\r\n    const handleUpdatePhaseBtn = async () =>{\r\n        if(selectedphaseForUpdate){\r\n            try {\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/updatePhaseToCompleted', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({selectedphaseForUpdate}),\r\n                })\r\n    \r\n                const data = await response.json();\r\n\r\n                if(response.status === 201 && data){\r\n                    setSmShowUpdate(false);\r\n                }\r\n                \r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const handleUndoUpdatePhaseBtn = async () =>{\r\n\r\n        if(selectedphaseForUpdate){\r\n            try {\r\n                const response = await fetch('https://taskhive-backend-testing.onrender.com/updatePhaseToPending', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type' : 'application/json' \r\n                    },\r\n                    body: JSON.stringify({selectedphaseForUpdate}),\r\n                })\r\n    \r\n                const data = await response.json();\r\n\r\n                if(response.status === 201 && data){\r\n                    setSmShowUpdate(false);\r\n                }\r\n                \r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n  return (\r\n    <>\r\n\r\n        <ListGroup.Item className='selectedListItem' onClick={handleShow}>\r\n          <i className='fa fa-sitemap'></i>         \r\n          <br></br>\r\n          Assign Phases\r\n        </ListGroup.Item>\r\n\r\n        <Modal show={show} fullscreen={fullscreen} onHide={handleHideModal} keyboard={false} >\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title>Assign Project Phases</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                {projectData.currentProject && projectMembers ?\r\n                <>\r\n                <p>You can assign & update a phase of selected project to your team members or yourself.</p> \r\n                <p>Click on mentioned project phases to assign a phase to a member.</p>\r\n                <p><b>Project Title:  {projectData.currentProject.projectTitle} </b></p>\r\n                <br></br>\r\n                <Container>\r\n                    <p><b>Project Phases :-</b></p>\r\n                    <Row>\r\n                        {projectData.currentProject.projectPhases.map((element, index)=>\r\n                            <Col sm lg=\"3\" key={index}>\r\n                                <Dropdown >\r\n                                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" className='dropBtn'>\r\n                                        Phase {element.PhaseNum} : {element.PhaseTitle}\r\n                                    </Dropdown.Toggle>\r\n\r\n                                    <Dropdown.Menu className='dropDownCont'>\r\n                                        <Dropdown.Item id={element._id} onClick={handleAssignBtn}>Add Members</Dropdown.Item>\r\n                                        <Dropdown.Item id={element._id} onClick={handleUpdateBtn}>Update Status</Dropdown.Item> \r\n                                    </Dropdown.Menu>\r\n                                </Dropdown>\r\n                                <br></br>\r\n                            </Col>\r\n                        )}\r\n                    </Row>\r\n                </Container>\r\n                <br></br>\r\n                <Container>\r\n                    <p><b>Assign To :-</b></p>\r\n                    <Row>\r\n                        {assignEachPhase.map((element, index)=>\r\n                            <Col sm lg=\"3\" key={index}>\r\n                                <ListGroup.Item className='listPhase'>\r\n                                    Phase {element.phaseNum} : {element.memberName}\r\n                                    <i className=\"fa fa-times removeBtnPhase\" id={element.phaseId + element.memberRef} onClick={removeMember}></i>\r\n                                </ListGroup.Item> \r\n                            </Col>        \r\n                        )}\r\n                    </Row>                                            \r\n                </Container>\r\n                </>\r\n                :\r\n                <>\r\n                <p className='warningTxt'>Selected project will be permanently deleted when click on <b>Delete Project</b> button.</p>\r\n                <ListGroup>\r\n                    <ListGroup.Item  className='listPhase'><b>Title: </b> </ListGroup.Item>\r\n                </ListGroup>\r\n                </>\r\n                }\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                {projectData.currentProject ?\r\n                    <Button className='phaseSaveBtn' id={projectData.currentProject._id} onClick={handleAssignPhases}>Save</Button>\r\n                :\r\n                    <Button className='phaseSaveBtn'>Save</Button>\r\n                }\r\n                \r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        {/* add Members */}\r\n\r\n        <Modal size=\"sm\" show={smShow} onHide={() => setSmShow(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">\r\n                    Project Members\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBody'>\r\n               \r\n                        <ListGroup variant=\"flush\" >\r\n                            {currentProjectCreator ?\r\n                            <>\r\n                            <ListGroup.Item as=\"li\"  className=\"d-flex justify-content-between align-items-start memberLists\" >\r\n                           \r\n                            <Row>\r\n                                <Col>\r\n                                    <img src={currentProjectCreator.projectCreatorImage}\r\n                                        onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\r\n                                        className=\"profileImages\"\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <p>{currentProjectCreator.projectCreatorName}</p>\r\n                                    <p>Project Creator</p>\r\n                                </Col>\r\n                                <Col>\r\n                                    <i className=\"fa fa-plus addFriendIcon\" id={currentProjectCreator.projectCreatorId} onClick={addMember}></i>\r\n                                </Col>\r\n                            </Row>\r\n                           \r\n                            </ListGroup.Item>\r\n                            {projectMembers.map( (element, index) =>\r\n                                <ListGroup.Item as=\"li\" key={index}  className=\"d-flex justify-content-between align-items-start memberLists\" >\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <img src={element.image}\r\n                                            onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\r\n                                            className=\"profileImages\"\r\n                                            />\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <p>{element.name}</p>\r\n                                            <p>{element.designation}</p>\r\n                                        </Col>\r\n                                        <Col>\r\n                                        <i className=\"fa fa-plus addFriendIcon\" id={element._id} onClick={addMember}></i>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                               \r\n                            )}\r\n                             </>\r\n                            :\r\n                            <ListGroup.Item></ListGroup.Item>\r\n                            \r\n                            }\r\n                            \r\n                        </ListGroup>\r\n                  \r\n            </Modal.Body>\r\n            </Modal>\r\n    \r\n\r\n\r\n\r\n\r\n            {/* Update Selected Phase */}\r\n\r\n            <Modal size=\"sm\" show={smShowUpdate} onHide={() => setSmShowUpdate(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n                <Modal.Header closeButton className='modalHeader'>\r\n                    {selectedphaseForUpdate ?\r\n                        <Modal.Title id=\"example-modal-sizes-title-sm\">{selectedphaseForUpdate.PhaseTitle}</Modal.Title>\r\n                    :\r\n                        <Modal.Title id=\"example-modal-sizes-title-sm\">Selected Phase</Modal.Title>\r\n                    }\r\n                </Modal.Header>\r\n                <Modal.Body className='modalBodyStatic'>\r\n                    {selectedphaseForUpdate ?\r\n                        <>\r\n                        {selectedphaseForUpdate.PhaseStatus === \"Pending\" ?\r\n                            <>\r\n                                <p>Phase Status: {selectedphaseForUpdate.PhaseStatus}</p>\r\n                                <br></br>\r\n                                <p>Click on \"Update\" button to update the phase status to \"Completed\".</p>\r\n                            </>\r\n                        :\r\n                            <>\r\n                                <p>Phase Status: {selectedphaseForUpdate.PhaseStatus}</p>\r\n                                <br></br>\r\n                                <p>Click on \"Update\" button to update the phase status to \"Pending\".</p>\r\n                            </>\r\n                        }\r\n                        </>\r\n                    \r\n                    :\r\n                        <p></p>\r\n                    }\r\n                    \r\n                </Modal.Body>\r\n                <Modal.Footer className='modalFooter'>\r\n                    {selectedphaseForUpdate ?\r\n                        <>\r\n                        {selectedphaseForUpdate.PhaseStatus === \"Pending\" ?\r\n                            <Button className='saveBtn' onClick={handleUpdatePhaseBtn}>Update</Button>\r\n                        :\r\n                            <Button className='saveBtn' onClick={handleUndoUpdatePhaseBtn}>Update</Button>  \r\n                        }\r\n                        </>\r\n                    \r\n                    :\r\n                        <Button className='saveBtn'>Update</Button>\r\n                    }   \r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n\r\n\r\n\r\n             {/* Alert Modal */}\r\n\r\n             <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\r\n            <Modal.Header closeButton className='modalHeader'>\r\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className='modalBodyStatic'>\r\n                <p>{alertMessage}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooter'>\r\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \r\n            </Modal.Footer>\r\n            </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AssignPhases"]},"metadata":{},"sourceType":"module"}